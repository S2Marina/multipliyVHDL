
multiplicacao.elf:     file format elf32-littlenios2
multiplicacao.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002dd8 memsz 0x00002dd8 flags r-x
    LOAD off    0x00003df8 vaddr 0x00012df8 paddr 0x000130cc align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x000043a0 vaddr 0x000133a0 paddr 0x000133a0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002b48  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  00012b68  00012b68  00003b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  00012df8  000130cc  00003df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  000133a0  000133a0  000043a0  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000040cc  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000004a8  00000000  00000000  000040f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000070d  00000000  00000000  000045a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009883  00000000  00000000  00004cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002177  00000000  00000000  0000e530  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005f51  00000000  00000000  000106a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000008a4  00000000  00000000  000165f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000dcf  00000000  00000000  00016e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000023c5  00000000  00000000  00017c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0001a030  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000390  00000000  00000000  0001a040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001bbc5  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0001bbc8  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001bbcc  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001bbcd  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0001bbce  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0001bbd2  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0001bbd6  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  0001bbda  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  0001bbde  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  0001bbe2  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000005  00000000  00000000  0001bbe6  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000004d  00000000  00000000  0001bbeb  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0004caa9  00000000  00000000  0001bc38  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .text	00000000 .text
00012b68 l    d  .rodata	00000000 .rodata
00012df8 l    d  .rwdata	00000000 .rwdata
000133a0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010308 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00012df8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010b7c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00010d80 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00010f6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012ed8 l     O .rwdata	0000002c jtag
0001103c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_close.c
000116a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011724 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011804 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011880 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000119d0 l     F .text	000000f8 alt_file_locked
00011c54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000121b4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00012b04 l     F .text	00000040 alt_sim_halt
00010dec g     F .text	0000005c alt_main
00010244 g     F .text	00000090 _puts_r
000130cc g       *ABS*	00000000 __flash_rwdata_start
000101ac g     F .text	00000054 printf
00011eb0 g     F .text	00000024 alt_get_cpu_freq
000112cc g     F .text	000002dc perf_print_formatted_report
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000133a0 g     O .bss	00000004 errno
000133a8 g     O .bss	00000004 alt_argv
0001b0ac g       *ABS*	00000000 _gp
00012f2c g     O .rwdata	00000180 alt_fd_list
00011ed4 g     F .text	00000094 alt_find_dev
00011958 g     F .text	00000078 alt_io_redirect
000102d4 g     F .text	00000014 puts
00011124 g     F .text	00000104 altera_avalon_jtag_uart_read
00010200 g     F .text	00000044 _printf_r
00010cb8 g     F .text	00000008 __udivsi3
00011e50 g     F .text	00000040 perf_get_num_starts
00010000 g       *ABS*	00000000 __alt_mem_ram
000130c4 g     O .rwdata	00000004 alt_max_fd
000130b0 g     O .rwdata	00000004 _global_impure_ptr
000133b0 g       *ABS*	00000000 __bss_end
00012498 g     F .text	0000066c __udivdi3
00012f04 g     O .rwdata	00000028 alt_dev_null
00011708 g     F .text	0000001c alt_dcache_flush_all
000130cc g       *ABS*	00000000 __ram_rwdata_end
000130bc g     O .rwdata	00000008 alt_dev_list
00010e48 g     F .text	00000124 write
00012df8 g       *ABS*	00000000 __ram_rodata_end
00010cc0 g     F .text	00000008 __umodsi3
000133b0 g       *ABS*	00000000 end
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00011228 g     F .text	000000a4 altera_avalon_jtag_uart_write
00010388 g     F .text	0000069c ___vfprintf_internal_r
000121b8 g     F .text	000001bc __call_exitprocs
00010020 g     F .text	0000003c _start
00011000 g     F .text	0000003c alt_sys_init
00010cc8 g     F .text	00000038 __mulsi3
00012df8 g       *ABS*	00000000 __ram_rwdata_start
00012b68 g       *ABS*	00000000 __ram_rodata_start
00011074 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00012088 g     F .text	000000d0 alt_get_fd
00011d4c g     F .text	000000b0 perf_get_section_time
00012178 g     F .text	0000003c memcmp
000133b0 g       *ABS*	00000000 __alt_stack_base
00011dfc g     F .text	00000054 perf_get_total_time
00011f68 g     F .text	00000120 alt_find_file
00011750 g     F .text	000000b4 alt_dev_llist_insert
00010a48 g     F .text	000000bc __sfvwrite_small_dev
000133a0 g       *ABS*	00000000 __bss_start
0001005c g     F .text	00000150 main
000133ac g     O .bss	00000004 alt_envp
000110cc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000130c8 g     O .rwdata	00000004 alt_errno
00010bf8 g     F .text	00000060 __divsi3
00012b68 g       *ABS*	00000000 __flash_rodata_start
00010fcc g     F .text	00000034 alt_irq_init
00011cb4 g     F .text	00000078 alt_release_fd
00012cf8 g     O .rodata	00000100 __clz_tab
00010b04 g     F .text	00000078 _write_r
000130ac g     O .rwdata	00000004 _impure_ptr
000133a4 g     O .bss	00000004 alt_argc
000130b4 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000130cc g       *ABS*	00000000 _edata
000133b0 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00011e90 g     F .text	00000020 alt_get_performance_counter_base
00011d2c g     F .text	00000020 altera_nios2_qsys_irq_init
00012158 g     F .text	00000020 exit
00010c58 g     F .text	00000060 __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
00012b44 g     F .text	00000020 _exit
00012374 g     F .text	00000124 __muldi3
000102e8 g     F .text	00000020 strlen
00011ac8 g     F .text	0000018c open
00011864 g     F .text	0000001c alt_icache_flush_all
00010a24 g     F .text	00000024 __vfprintf_internal
000115a8 g     F .text	00000100 close
00010d00 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00010020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee80014 	ori	sp,sp,40960

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6ac2b14 	ori	gp,gp,45228
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	108ce814 	ori	r2,r2,13216

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18ccec14 	ori	r3,r3,13232

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0010d000 	call	10d00 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0010dec0 	call	10dec <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <main>:
#define m (int *) 0x21040
#define mult (int *) 0x21030
#define res (int *) 0x21020

int main()
{
   1005c:	defffe04 	addi	sp,sp,-8
   10060:	dfc00115 	stw	ra,4(sp)
   10064:	df000015 	stw	fp,0(sp)
   10068:	d839883a 	mov	fp,sp
  *m = 0;
   1006c:	008000b4 	movhi	r2,2
   10070:	10841004 	addi	r2,r2,4160
   10074:	10000015 	stw	zero,0(r2)
  *mult = 0;
   10078:	008000b4 	movhi	r2,2
   1007c:	10840c04 	addi	r2,r2,4144
   10080:	10000015 	stw	zero,0(r2)
  printf("Hello from Nios II!\n");
   10084:	01000074 	movhi	r4,1
   10088:	210ada04 	addi	r4,r4,11112
   1008c:	00102d40 	call	102d4 <puts>

  PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
   10090:	0007883a 	mov	r3,zero
   10094:	00800044 	movi	r2,1
   10098:	18800035 	stwio	r2,0(r3)
  PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
   1009c:	00800104 	movi	r2,4
   100a0:	10000035 	stwio	zero,0(r2)

  PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
   100a4:	00800504 	movi	r2,20
   100a8:	10000035 	stwio	zero,0(r2)

  *go = 0;
   100ac:	008000b4 	movhi	r2,2
   100b0:	10840004 	addi	r2,r2,4096
   100b4:	10000015 	stw	zero,0(r2)
  *prt = 0;
   100b8:	008000b4 	movhi	r2,2
   100bc:	10840404 	addi	r2,r2,4112
   100c0:	10000015 	stw	zero,0(r2)
  *m = 2000;
   100c4:	00c000b4 	movhi	r3,2
   100c8:	18c41004 	addi	r3,r3,4160
   100cc:	0081f404 	movi	r2,2000
   100d0:	18800015 	stw	r2,0(r3)
  *mult = 10;
   100d4:	00c000b4 	movhi	r3,2
   100d8:	18c40c04 	addi	r3,r3,4144
   100dc:	00800284 	movi	r2,10
   100e0:	18800015 	stw	r2,0(r3)

  printf("m: %i\n", *m);
   100e4:	008000b4 	movhi	r2,2
   100e8:	10841004 	addi	r2,r2,4160
   100ec:	11400017 	ldw	r5,0(r2)
   100f0:	01000074 	movhi	r4,1
   100f4:	210adf04 	addi	r4,r4,11132
   100f8:	00101ac0 	call	101ac <printf>
  printf("mult: %i\n", *mult);
   100fc:	008000b4 	movhi	r2,2
   10100:	10840c04 	addi	r2,r2,4144
   10104:	11400017 	ldw	r5,0(r2)
   10108:	01000074 	movhi	r4,1
   1010c:	210ae104 	addi	r4,r4,11140
   10110:	00101ac0 	call	101ac <printf>

  *go = 1;
   10114:	00c000b4 	movhi	r3,2
   10118:	18c40004 	addi	r3,r3,4096
   1011c:	00800044 	movi	r2,1
   10120:	18800015 	stw	r2,0(r3)

  while(*prt != 1){
   10124:	008000b4 	movhi	r2,2
   10128:	10840404 	addi	r2,r2,4112
   1012c:	10800017 	ldw	r2,0(r2)
   10130:	10800058 	cmpnei	r2,r2,1
   10134:	103ffb1e 	bne	r2,zero,10124 <main+0xc8>
	  //printf("Esperando...");
  }

  PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
   10138:	00800404 	movi	r2,16
   1013c:	10000035 	stwio	zero,0(r2)
  PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
   10140:	0005883a 	mov	r2,zero
   10144:	10000035 	stwio	zero,0(r2)

  printf("Resultado da multiplicacao %i x %i = %i\n", *m, *mult, *res);
   10148:	008000b4 	movhi	r2,2
   1014c:	10841004 	addi	r2,r2,4160
   10150:	11400017 	ldw	r5,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10840c04 	addi	r2,r2,4144
   1015c:	11800017 	ldw	r6,0(r2)
   10160:	008000b4 	movhi	r2,2
   10164:	10840804 	addi	r2,r2,4128
   10168:	11c00017 	ldw	r7,0(r2)
   1016c:	01000074 	movhi	r4,1
   10170:	210ae404 	addi	r4,r4,11152
   10174:	00101ac0 	call	101ac <printf>

  perf_print_formatted_report((void*) PERFORMANCE_COUNTER_0_BASE, ALT_CPU_FREQ, 1, "TOTAL");
   10178:	0009883a 	mov	r4,zero
   1017c:	0140bef4 	movhi	r5,763
   10180:	297c2004 	addi	r5,r5,-3968
   10184:	01800044 	movi	r6,1
   10188:	01c00074 	movhi	r7,1
   1018c:	39caef04 	addi	r7,r7,11196
   10190:	00112cc0 	call	112cc <perf_print_formatted_report>

  return 0;
   10194:	0005883a 	mov	r2,zero
}
   10198:	e037883a 	mov	sp,fp
   1019c:	dfc00117 	ldw	ra,4(sp)
   101a0:	df000017 	ldw	fp,0(sp)
   101a4:	dec00204 	addi	sp,sp,8
   101a8:	f800283a 	ret

000101ac <printf>:
   101ac:	defffb04 	addi	sp,sp,-20
   101b0:	dfc00115 	stw	ra,4(sp)
   101b4:	d9400215 	stw	r5,8(sp)
   101b8:	d9800315 	stw	r6,12(sp)
   101bc:	d9c00415 	stw	r7,16(sp)
   101c0:	00800074 	movhi	r2,1
   101c4:	108c2b04 	addi	r2,r2,12460
   101c8:	11400017 	ldw	r5,0(r2)
   101cc:	d8800204 	addi	r2,sp,8
   101d0:	d8800015 	stw	r2,0(sp)
   101d4:	29c00217 	ldw	r7,8(r5)
   101d8:	100d883a 	mov	r6,r2
   101dc:	00800074 	movhi	r2,1
   101e0:	10829204 	addi	r2,r2,2632
   101e4:	200b883a 	mov	r5,r4
   101e8:	38800115 	stw	r2,4(r7)
   101ec:	3809883a 	mov	r4,r7
   101f0:	0010a240 	call	10a24 <__vfprintf_internal>
   101f4:	dfc00117 	ldw	ra,4(sp)
   101f8:	dec00504 	addi	sp,sp,20
   101fc:	f800283a 	ret

00010200 <_printf_r>:
   10200:	defffc04 	addi	sp,sp,-16
   10204:	dfc00115 	stw	ra,4(sp)
   10208:	d9800215 	stw	r6,8(sp)
   1020c:	d9c00315 	stw	r7,12(sp)
   10210:	22000217 	ldw	r8,8(r4)
   10214:	d8800204 	addi	r2,sp,8
   10218:	d8800015 	stw	r2,0(sp)
   1021c:	100f883a 	mov	r7,r2
   10220:	00800074 	movhi	r2,1
   10224:	10829204 	addi	r2,r2,2632
   10228:	280d883a 	mov	r6,r5
   1022c:	40800115 	stw	r2,4(r8)
   10230:	400b883a 	mov	r5,r8
   10234:	00103880 	call	10388 <___vfprintf_internal_r>
   10238:	dfc00117 	ldw	ra,4(sp)
   1023c:	dec00404 	addi	sp,sp,16
   10240:	f800283a 	ret

00010244 <_puts_r>:
   10244:	defffd04 	addi	sp,sp,-12
   10248:	dc000015 	stw	r16,0(sp)
   1024c:	2021883a 	mov	r16,r4
   10250:	2809883a 	mov	r4,r5
   10254:	dfc00215 	stw	ra,8(sp)
   10258:	dc400115 	stw	r17,4(sp)
   1025c:	2823883a 	mov	r17,r5
   10260:	00102e80 	call	102e8 <strlen>
   10264:	80c00217 	ldw	r3,8(r16)
   10268:	02000074 	movhi	r8,1
   1026c:	42029204 	addi	r8,r8,2632
   10270:	880d883a 	mov	r6,r17
   10274:	100f883a 	mov	r7,r2
   10278:	8009883a 	mov	r4,r16
   1027c:	180b883a 	mov	r5,r3
   10280:	1a000115 	stw	r8,4(r3)
   10284:	403ee83a 	callr	r8
   10288:	047fffc4 	movi	r17,-1
   1028c:	8009883a 	mov	r4,r16
   10290:	01800074 	movhi	r6,1
   10294:	318af104 	addi	r6,r6,11204
   10298:	01c00044 	movi	r7,1
   1029c:	1440071e 	bne	r2,r17,102bc <_puts_r+0x78>
   102a0:	00ffffc4 	movi	r3,-1
   102a4:	1805883a 	mov	r2,r3
   102a8:	dfc00217 	ldw	ra,8(sp)
   102ac:	dc400117 	ldw	r17,4(sp)
   102b0:	dc000017 	ldw	r16,0(sp)
   102b4:	dec00304 	addi	sp,sp,12
   102b8:	f800283a 	ret
   102bc:	81400217 	ldw	r5,8(r16)
   102c0:	28c00117 	ldw	r3,4(r5)
   102c4:	183ee83a 	callr	r3
   102c8:	0007883a 	mov	r3,zero
   102cc:	147ff51e 	bne	r2,r17,102a4 <_puts_r+0x60>
   102d0:	003ff306 	br	102a0 <_puts_r+0x5c>

000102d4 <puts>:
   102d4:	00800074 	movhi	r2,1
   102d8:	108c2b04 	addi	r2,r2,12460
   102dc:	200b883a 	mov	r5,r4
   102e0:	11000017 	ldw	r4,0(r2)
   102e4:	00102441 	jmpi	10244 <_puts_r>

000102e8 <strlen>:
   102e8:	20800007 	ldb	r2,0(r4)
   102ec:	10000526 	beq	r2,zero,10304 <strlen+0x1c>
   102f0:	2007883a 	mov	r3,r4
   102f4:	18c00044 	addi	r3,r3,1
   102f8:	18800007 	ldb	r2,0(r3)
   102fc:	103ffd1e 	bne	r2,zero,102f4 <strlen+0xc>
   10300:	1905c83a 	sub	r2,r3,r4
   10304:	f800283a 	ret

00010308 <print_repeat>:
   10308:	defffb04 	addi	sp,sp,-20
   1030c:	dc800315 	stw	r18,12(sp)
   10310:	dc400215 	stw	r17,8(sp)
   10314:	dc000115 	stw	r16,4(sp)
   10318:	dfc00415 	stw	ra,16(sp)
   1031c:	2025883a 	mov	r18,r4
   10320:	2823883a 	mov	r17,r5
   10324:	3821883a 	mov	r16,r7
   10328:	d9800005 	stb	r6,0(sp)
   1032c:	9009883a 	mov	r4,r18
   10330:	880b883a 	mov	r5,r17
   10334:	d80d883a 	mov	r6,sp
   10338:	01c00044 	movi	r7,1
   1033c:	04000b0e 	bge	zero,r16,1036c <print_repeat+0x64>
   10340:	88c00117 	ldw	r3,4(r17)
   10344:	843fffc4 	addi	r16,r16,-1
   10348:	183ee83a 	callr	r3
   1034c:	103ff726 	beq	r2,zero,1032c <print_repeat+0x24>
   10350:	00bfffc4 	movi	r2,-1
   10354:	dfc00417 	ldw	ra,16(sp)
   10358:	dc800317 	ldw	r18,12(sp)
   1035c:	dc400217 	ldw	r17,8(sp)
   10360:	dc000117 	ldw	r16,4(sp)
   10364:	dec00504 	addi	sp,sp,20
   10368:	f800283a 	ret
   1036c:	0005883a 	mov	r2,zero
   10370:	dfc00417 	ldw	ra,16(sp)
   10374:	dc800317 	ldw	r18,12(sp)
   10378:	dc400217 	ldw	r17,8(sp)
   1037c:	dc000117 	ldw	r16,4(sp)
   10380:	dec00504 	addi	sp,sp,20
   10384:	f800283a 	ret

00010388 <___vfprintf_internal_r>:
   10388:	deffe304 	addi	sp,sp,-116
   1038c:	df001b15 	stw	fp,108(sp)
   10390:	ddc01a15 	stw	r23,104(sp)
   10394:	dd001715 	stw	r20,92(sp)
   10398:	dc801515 	stw	r18,84(sp)
   1039c:	dc001315 	stw	r16,76(sp)
   103a0:	dfc01c15 	stw	ra,112(sp)
   103a4:	dd801915 	stw	r22,100(sp)
   103a8:	dd401815 	stw	r21,96(sp)
   103ac:	dcc01615 	stw	r19,88(sp)
   103b0:	dc401415 	stw	r17,80(sp)
   103b4:	d9001015 	stw	r4,64(sp)
   103b8:	2829883a 	mov	r20,r5
   103bc:	d9c01115 	stw	r7,68(sp)
   103c0:	3025883a 	mov	r18,r6
   103c4:	0021883a 	mov	r16,zero
   103c8:	d8000f15 	stw	zero,60(sp)
   103cc:	d8000e15 	stw	zero,56(sp)
   103d0:	0039883a 	mov	fp,zero
   103d4:	d8000915 	stw	zero,36(sp)
   103d8:	d8000d15 	stw	zero,52(sp)
   103dc:	d8000c15 	stw	zero,48(sp)
   103e0:	d8000b15 	stw	zero,44(sp)
   103e4:	002f883a 	mov	r23,zero
   103e8:	91400003 	ldbu	r5,0(r18)
   103ec:	01c00044 	movi	r7,1
   103f0:	94800044 	addi	r18,r18,1
   103f4:	29003fcc 	andi	r4,r5,255
   103f8:	2100201c 	xori	r4,r4,128
   103fc:	213fe004 	addi	r4,r4,-128
   10400:	20001526 	beq	r4,zero,10458 <___vfprintf_internal_r+0xd0>
   10404:	81c03526 	beq	r16,r7,104dc <___vfprintf_internal_r+0x154>
   10408:	3c002016 	blt	r7,r16,1048c <___vfprintf_internal_r+0x104>
   1040c:	803ff61e 	bne	r16,zero,103e8 <___vfprintf_internal_r+0x60>
   10410:	00800944 	movi	r2,37
   10414:	2081501e 	bne	r4,r2,10958 <___vfprintf_internal_r+0x5d0>
   10418:	073fffc4 	movi	fp,-1
   1041c:	00800284 	movi	r2,10
   10420:	d9c00c15 	stw	r7,48(sp)
   10424:	d8000f15 	stw	zero,60(sp)
   10428:	d8000e15 	stw	zero,56(sp)
   1042c:	df000915 	stw	fp,36(sp)
   10430:	d8800d15 	stw	r2,52(sp)
   10434:	d8000b15 	stw	zero,44(sp)
   10438:	91400003 	ldbu	r5,0(r18)
   1043c:	3821883a 	mov	r16,r7
   10440:	94800044 	addi	r18,r18,1
   10444:	29003fcc 	andi	r4,r5,255
   10448:	2100201c 	xori	r4,r4,128
   1044c:	213fe004 	addi	r4,r4,-128
   10450:	01c00044 	movi	r7,1
   10454:	203feb1e 	bne	r4,zero,10404 <___vfprintf_internal_r+0x7c>
   10458:	b805883a 	mov	r2,r23
   1045c:	dfc01c17 	ldw	ra,112(sp)
   10460:	df001b17 	ldw	fp,108(sp)
   10464:	ddc01a17 	ldw	r23,104(sp)
   10468:	dd801917 	ldw	r22,100(sp)
   1046c:	dd401817 	ldw	r21,96(sp)
   10470:	dd001717 	ldw	r20,92(sp)
   10474:	dcc01617 	ldw	r19,88(sp)
   10478:	dc801517 	ldw	r18,84(sp)
   1047c:	dc401417 	ldw	r17,80(sp)
   10480:	dc001317 	ldw	r16,76(sp)
   10484:	dec01d04 	addi	sp,sp,116
   10488:	f800283a 	ret
   1048c:	00800084 	movi	r2,2
   10490:	80801726 	beq	r16,r2,104f0 <___vfprintf_internal_r+0x168>
   10494:	008000c4 	movi	r2,3
   10498:	80bfd31e 	bne	r16,r2,103e8 <___vfprintf_internal_r+0x60>
   1049c:	2c7ff404 	addi	r17,r5,-48
   104a0:	88c03fcc 	andi	r3,r17,255
   104a4:	00800244 	movi	r2,9
   104a8:	10c02136 	bltu	r2,r3,10530 <___vfprintf_internal_r+0x1a8>
   104ac:	d8c00917 	ldw	r3,36(sp)
   104b0:	18012716 	blt	r3,zero,10950 <___vfprintf_internal_r+0x5c8>
   104b4:	d9000917 	ldw	r4,36(sp)
   104b8:	01400284 	movi	r5,10
   104bc:	0010cc80 	call	10cc8 <__mulsi3>
   104c0:	1007883a 	mov	r3,r2
   104c4:	88803fcc 	andi	r2,r17,255
   104c8:	1080201c 	xori	r2,r2,128
   104cc:	10bfe004 	addi	r2,r2,-128
   104d0:	1887883a 	add	r3,r3,r2
   104d4:	d8c00915 	stw	r3,36(sp)
   104d8:	003fc306 	br	103e8 <___vfprintf_internal_r+0x60>
   104dc:	00800c04 	movi	r2,48
   104e0:	2080b326 	beq	r4,r2,107b0 <___vfprintf_internal_r+0x428>
   104e4:	00800944 	movi	r2,37
   104e8:	20812726 	beq	r4,r2,10988 <___vfprintf_internal_r+0x600>
   104ec:	04000084 	movi	r16,2
   104f0:	2c7ff404 	addi	r17,r5,-48
   104f4:	88c03fcc 	andi	r3,r17,255
   104f8:	00800244 	movi	r2,9
   104fc:	10c00a36 	bltu	r2,r3,10528 <___vfprintf_internal_r+0x1a0>
   10500:	e000b416 	blt	fp,zero,107d4 <___vfprintf_internal_r+0x44c>
   10504:	e009883a 	mov	r4,fp
   10508:	01400284 	movi	r5,10
   1050c:	0010cc80 	call	10cc8 <__mulsi3>
   10510:	1007883a 	mov	r3,r2
   10514:	88803fcc 	andi	r2,r17,255
   10518:	1080201c 	xori	r2,r2,128
   1051c:	10bfe004 	addi	r2,r2,-128
   10520:	18b9883a 	add	fp,r3,r2
   10524:	003fb006 	br	103e8 <___vfprintf_internal_r+0x60>
   10528:	00800b84 	movi	r2,46
   1052c:	2080a326 	beq	r4,r2,107bc <___vfprintf_internal_r+0x434>
   10530:	00801b04 	movi	r2,108
   10534:	2080a326 	beq	r4,r2,107c4 <___vfprintf_internal_r+0x43c>
   10538:	d8c00917 	ldw	r3,36(sp)
   1053c:	1800a716 	blt	r3,zero,107dc <___vfprintf_internal_r+0x454>
   10540:	d8000f15 	stw	zero,60(sp)
   10544:	28bfea04 	addi	r2,r5,-88
   10548:	10803fcc 	andi	r2,r2,255
   1054c:	00c00804 	movi	r3,32
   10550:	18802836 	bltu	r3,r2,105f4 <___vfprintf_internal_r+0x26c>
   10554:	1085883a 	add	r2,r2,r2
   10558:	1085883a 	add	r2,r2,r2
   1055c:	00c00074 	movhi	r3,1
   10560:	18c15c04 	addi	r3,r3,1392
   10564:	10c5883a 	add	r2,r2,r3
   10568:	11000017 	ldw	r4,0(r2)
   1056c:	2000683a 	jmp	r4
   10570:	000105fc 	xorhi	zero,zero,1047
   10574:	000105f4 	movhi	zero,1047
   10578:	000105f4 	movhi	zero,1047
   1057c:	000105f4 	movhi	zero,1047
   10580:	000105f4 	movhi	zero,1047
   10584:	000105f4 	movhi	zero,1047
   10588:	000105f4 	movhi	zero,1047
   1058c:	000105f4 	movhi	zero,1047
   10590:	000105f4 	movhi	zero,1047
   10594:	000105f4 	movhi	zero,1047
   10598:	000105f4 	movhi	zero,1047
   1059c:	00010828 	cmpgeui	zero,zero,1056
   105a0:	00010610 	cmplti	zero,zero,1048
   105a4:	000105f4 	movhi	zero,1047
   105a8:	000105f4 	movhi	zero,1047
   105ac:	000105f4 	movhi	zero,1047
   105b0:	000105f4 	movhi	zero,1047
   105b4:	00010610 	cmplti	zero,zero,1048
   105b8:	000105f4 	movhi	zero,1047
   105bc:	000105f4 	movhi	zero,1047
   105c0:	000105f4 	movhi	zero,1047
   105c4:	000105f4 	movhi	zero,1047
   105c8:	000105f4 	movhi	zero,1047
   105cc:	00010890 	cmplti	zero,zero,1058
   105d0:	000105f4 	movhi	zero,1047
   105d4:	000105f4 	movhi	zero,1047
   105d8:	000105f4 	movhi	zero,1047
   105dc:	000108a0 	cmpeqi	zero,zero,1058
   105e0:	000105f4 	movhi	zero,1047
   105e4:	00010774 	movhi	zero,1053
   105e8:	000105f4 	movhi	zero,1047
   105ec:	000105f4 	movhi	zero,1047
   105f0:	0001076c 	andhi	zero,zero,1053
   105f4:	0021883a 	mov	r16,zero
   105f8:	003f7b06 	br	103e8 <___vfprintf_internal_r+0x60>
   105fc:	00c00404 	movi	r3,16
   10600:	00800044 	movi	r2,1
   10604:	d8c00d15 	stw	r3,52(sp)
   10608:	d8000c15 	stw	zero,48(sp)
   1060c:	d8800b15 	stw	r2,44(sp)
   10610:	d8c00e17 	ldw	r3,56(sp)
   10614:	1805003a 	cmpeq	r2,r3,zero
   10618:	10005a1e 	bne	r2,zero,10784 <___vfprintf_internal_r+0x3fc>
   1061c:	d8800c17 	ldw	r2,48(sp)
   10620:	1000781e 	bne	r2,zero,10804 <___vfprintf_internal_r+0x47c>
   10624:	d8801117 	ldw	r2,68(sp)
   10628:	d8000a15 	stw	zero,40(sp)
   1062c:	14400017 	ldw	r17,0(r2)
   10630:	11c00104 	addi	r7,r2,4
   10634:	d9c01115 	stw	r7,68(sp)
   10638:	88005a26 	beq	r17,zero,107a4 <___vfprintf_internal_r+0x41c>
   1063c:	d8c00b17 	ldw	r3,44(sp)
   10640:	dcc00044 	addi	r19,sp,1
   10644:	05800244 	movi	r22,9
   10648:	182b003a 	cmpeq	r21,r3,zero
   1064c:	dcc01215 	stw	r19,72(sp)
   10650:	00000506 	br	10668 <___vfprintf_internal_r+0x2e0>
   10654:	21000c04 	addi	r4,r4,48
   10658:	99000005 	stb	r4,0(r19)
   1065c:	9cc00044 	addi	r19,r19,1
   10660:	80000f26 	beq	r16,zero,106a0 <___vfprintf_internal_r+0x318>
   10664:	8023883a 	mov	r17,r16
   10668:	d9400d17 	ldw	r5,52(sp)
   1066c:	8809883a 	mov	r4,r17
   10670:	0010cb80 	call	10cb8 <__udivsi3>
   10674:	d9000d17 	ldw	r4,52(sp)
   10678:	100b883a 	mov	r5,r2
   1067c:	1021883a 	mov	r16,r2
   10680:	0010cc80 	call	10cc8 <__mulsi3>
   10684:	8889c83a 	sub	r4,r17,r2
   10688:	b13ff20e 	bge	r22,r4,10654 <___vfprintf_internal_r+0x2cc>
   1068c:	a8009f1e 	bne	r21,zero,1090c <___vfprintf_internal_r+0x584>
   10690:	21000dc4 	addi	r4,r4,55
   10694:	99000005 	stb	r4,0(r19)
   10698:	9cc00044 	addi	r19,r19,1
   1069c:	803ff11e 	bne	r16,zero,10664 <___vfprintf_internal_r+0x2dc>
   106a0:	d8801217 	ldw	r2,72(sp)
   106a4:	98a3c83a 	sub	r17,r19,r2
   106a8:	d8c00917 	ldw	r3,36(sp)
   106ac:	1c4bc83a 	sub	r5,r3,r17
   106b0:	0140130e 	bge	zero,r5,10700 <___vfprintf_internal_r+0x378>
   106b4:	d8c00044 	addi	r3,sp,1
   106b8:	18800804 	addi	r2,r3,32
   106bc:	9880102e 	bgeu	r19,r2,10700 <___vfprintf_internal_r+0x378>
   106c0:	00800c04 	movi	r2,48
   106c4:	28ffffc4 	addi	r3,r5,-1
   106c8:	98800005 	stb	r2,0(r19)
   106cc:	99000044 	addi	r4,r19,1
   106d0:	00c0080e 	bge	zero,r3,106f4 <___vfprintf_internal_r+0x36c>
   106d4:	d8c00044 	addi	r3,sp,1
   106d8:	18800804 	addi	r2,r3,32
   106dc:	2080052e 	bgeu	r4,r2,106f4 <___vfprintf_internal_r+0x36c>
   106e0:	00800c04 	movi	r2,48
   106e4:	20800005 	stb	r2,0(r4)
   106e8:	21000044 	addi	r4,r4,1
   106ec:	9945883a 	add	r2,r19,r5
   106f0:	20bff81e 	bne	r4,r2,106d4 <___vfprintf_internal_r+0x34c>
   106f4:	d8801217 	ldw	r2,72(sp)
   106f8:	2027883a 	mov	r19,r4
   106fc:	20a3c83a 	sub	r17,r4,r2
   10700:	d8c00a17 	ldw	r3,40(sp)
   10704:	1c45883a 	add	r2,r3,r17
   10708:	e0a1c83a 	sub	r16,fp,r2
   1070c:	d8800f17 	ldw	r2,60(sp)
   10710:	10008026 	beq	r2,zero,10914 <___vfprintf_internal_r+0x58c>
   10714:	1805003a 	cmpeq	r2,r3,zero
   10718:	1000ae26 	beq	r2,zero,109d4 <___vfprintf_internal_r+0x64c>
   1071c:	0400a516 	blt	zero,r16,109b4 <___vfprintf_internal_r+0x62c>
   10720:	b805883a 	mov	r2,r23
   10724:	0440950e 	bge	zero,r17,1097c <___vfprintf_internal_r+0x5f4>
   10728:	102f883a 	mov	r23,r2
   1072c:	1461883a 	add	r16,r2,r17
   10730:	00000206 	br	1073c <___vfprintf_internal_r+0x3b4>
   10734:	bdc00044 	addi	r23,r23,1
   10738:	85ffae26 	beq	r16,r23,105f4 <___vfprintf_internal_r+0x26c>
   1073c:	9cffffc4 	addi	r19,r19,-1
   10740:	98800003 	ldbu	r2,0(r19)
   10744:	a0c00117 	ldw	r3,4(r20)
   10748:	d9001017 	ldw	r4,64(sp)
   1074c:	d8800005 	stb	r2,0(sp)
   10750:	a00b883a 	mov	r5,r20
   10754:	d80d883a 	mov	r6,sp
   10758:	01c00044 	movi	r7,1
   1075c:	183ee83a 	callr	r3
   10760:	103ff426 	beq	r2,zero,10734 <___vfprintf_internal_r+0x3ac>
   10764:	05ffffc4 	movi	r23,-1
   10768:	003f3b06 	br	10458 <___vfprintf_internal_r+0xd0>
   1076c:	00c00404 	movi	r3,16
   10770:	d8c00d15 	stw	r3,52(sp)
   10774:	d8000c15 	stw	zero,48(sp)
   10778:	d8c00e17 	ldw	r3,56(sp)
   1077c:	1805003a 	cmpeq	r2,r3,zero
   10780:	103fa626 	beq	r2,zero,1061c <___vfprintf_internal_r+0x294>
   10784:	d8c00c17 	ldw	r3,48(sp)
   10788:	1800171e 	bne	r3,zero,107e8 <___vfprintf_internal_r+0x460>
   1078c:	d8c01117 	ldw	r3,68(sp)
   10790:	d8000a15 	stw	zero,40(sp)
   10794:	1c400017 	ldw	r17,0(r3)
   10798:	19c00104 	addi	r7,r3,4
   1079c:	d9c01115 	stw	r7,68(sp)
   107a0:	883fa61e 	bne	r17,zero,1063c <___vfprintf_internal_r+0x2b4>
   107a4:	dcc00044 	addi	r19,sp,1
   107a8:	dcc01215 	stw	r19,72(sp)
   107ac:	003fbe06 	br	106a8 <___vfprintf_internal_r+0x320>
   107b0:	04000084 	movi	r16,2
   107b4:	d9c00f15 	stw	r7,60(sp)
   107b8:	003f0b06 	br	103e8 <___vfprintf_internal_r+0x60>
   107bc:	040000c4 	movi	r16,3
   107c0:	003f0906 	br	103e8 <___vfprintf_internal_r+0x60>
   107c4:	00800044 	movi	r2,1
   107c8:	040000c4 	movi	r16,3
   107cc:	d8800e15 	stw	r2,56(sp)
   107d0:	003f0506 	br	103e8 <___vfprintf_internal_r+0x60>
   107d4:	0007883a 	mov	r3,zero
   107d8:	003f4e06 	br	10514 <___vfprintf_internal_r+0x18c>
   107dc:	00800044 	movi	r2,1
   107e0:	d8800915 	stw	r2,36(sp)
   107e4:	003f5706 	br	10544 <___vfprintf_internal_r+0x1bc>
   107e8:	d8801117 	ldw	r2,68(sp)
   107ec:	14400017 	ldw	r17,0(r2)
   107f0:	10800104 	addi	r2,r2,4
   107f4:	d8801115 	stw	r2,68(sp)
   107f8:	88000716 	blt	r17,zero,10818 <___vfprintf_internal_r+0x490>
   107fc:	d8000a15 	stw	zero,40(sp)
   10800:	003f8d06 	br	10638 <___vfprintf_internal_r+0x2b0>
   10804:	d8c01117 	ldw	r3,68(sp)
   10808:	1c400017 	ldw	r17,0(r3)
   1080c:	18c00104 	addi	r3,r3,4
   10810:	d8c01115 	stw	r3,68(sp)
   10814:	883ff90e 	bge	r17,zero,107fc <___vfprintf_internal_r+0x474>
   10818:	00800044 	movi	r2,1
   1081c:	0463c83a 	sub	r17,zero,r17
   10820:	d8800a15 	stw	r2,40(sp)
   10824:	003f8406 	br	10638 <___vfprintf_internal_r+0x2b0>
   10828:	04000044 	movi	r16,1
   1082c:	8700080e 	bge	r16,fp,10850 <___vfprintf_internal_r+0x4c8>
   10830:	d9001017 	ldw	r4,64(sp)
   10834:	a00b883a 	mov	r5,r20
   10838:	01800804 	movi	r6,32
   1083c:	e1ffffc4 	addi	r7,fp,-1
   10840:	00103080 	call	10308 <print_repeat>
   10844:	103fc71e 	bne	r2,zero,10764 <___vfprintf_internal_r+0x3dc>
   10848:	e5c5883a 	add	r2,fp,r23
   1084c:	15ffffc4 	addi	r23,r2,-1
   10850:	d8c01117 	ldw	r3,68(sp)
   10854:	d9001017 	ldw	r4,64(sp)
   10858:	800f883a 	mov	r7,r16
   1085c:	18800017 	ldw	r2,0(r3)
   10860:	a0c00117 	ldw	r3,4(r20)
   10864:	a00b883a 	mov	r5,r20
   10868:	d8800005 	stb	r2,0(sp)
   1086c:	d80d883a 	mov	r6,sp
   10870:	183ee83a 	callr	r3
   10874:	103fbb1e 	bne	r2,zero,10764 <___vfprintf_internal_r+0x3dc>
   10878:	d8801117 	ldw	r2,68(sp)
   1087c:	bdc00044 	addi	r23,r23,1
   10880:	0021883a 	mov	r16,zero
   10884:	10800104 	addi	r2,r2,4
   10888:	d8801115 	stw	r2,68(sp)
   1088c:	003ed606 	br	103e8 <___vfprintf_internal_r+0x60>
   10890:	00800204 	movi	r2,8
   10894:	d8800d15 	stw	r2,52(sp)
   10898:	d8000c15 	stw	zero,48(sp)
   1089c:	003fb606 	br	10778 <___vfprintf_internal_r+0x3f0>
   108a0:	d8c01117 	ldw	r3,68(sp)
   108a4:	1cc00017 	ldw	r19,0(r3)
   108a8:	9809883a 	mov	r4,r19
   108ac:	00102e80 	call	102e8 <strlen>
   108b0:	e0a1c83a 	sub	r16,fp,r2
   108b4:	1023883a 	mov	r17,r2
   108b8:	0400070e 	bge	zero,r16,108d8 <___vfprintf_internal_r+0x550>
   108bc:	d9001017 	ldw	r4,64(sp)
   108c0:	a00b883a 	mov	r5,r20
   108c4:	01800804 	movi	r6,32
   108c8:	800f883a 	mov	r7,r16
   108cc:	00103080 	call	10308 <print_repeat>
   108d0:	103fa41e 	bne	r2,zero,10764 <___vfprintf_internal_r+0x3dc>
   108d4:	bc2f883a 	add	r23,r23,r16
   108d8:	a0c00117 	ldw	r3,4(r20)
   108dc:	d9001017 	ldw	r4,64(sp)
   108e0:	980d883a 	mov	r6,r19
   108e4:	a00b883a 	mov	r5,r20
   108e8:	880f883a 	mov	r7,r17
   108ec:	183ee83a 	callr	r3
   108f0:	103f9c1e 	bne	r2,zero,10764 <___vfprintf_internal_r+0x3dc>
   108f4:	d8801117 	ldw	r2,68(sp)
   108f8:	bc6f883a 	add	r23,r23,r17
   108fc:	0021883a 	mov	r16,zero
   10900:	10800104 	addi	r2,r2,4
   10904:	d8801115 	stw	r2,68(sp)
   10908:	003eb706 	br	103e8 <___vfprintf_internal_r+0x60>
   1090c:	210015c4 	addi	r4,r4,87
   10910:	003f5106 	br	10658 <___vfprintf_internal_r+0x2d0>
   10914:	04003b16 	blt	zero,r16,10a04 <___vfprintf_internal_r+0x67c>
   10918:	d8c00a17 	ldw	r3,40(sp)
   1091c:	1805003a 	cmpeq	r2,r3,zero
   10920:	103f7f1e 	bne	r2,zero,10720 <___vfprintf_internal_r+0x398>
   10924:	a0c00117 	ldw	r3,4(r20)
   10928:	d9001017 	ldw	r4,64(sp)
   1092c:	00800b44 	movi	r2,45
   10930:	d8800005 	stb	r2,0(sp)
   10934:	a00b883a 	mov	r5,r20
   10938:	d80d883a 	mov	r6,sp
   1093c:	01c00044 	movi	r7,1
   10940:	183ee83a 	callr	r3
   10944:	103f871e 	bne	r2,zero,10764 <___vfprintf_internal_r+0x3dc>
   10948:	b8800044 	addi	r2,r23,1
   1094c:	003f7506 	br	10724 <___vfprintf_internal_r+0x39c>
   10950:	0007883a 	mov	r3,zero
   10954:	003edb06 	br	104c4 <___vfprintf_internal_r+0x13c>
   10958:	a0c00117 	ldw	r3,4(r20)
   1095c:	d9001017 	ldw	r4,64(sp)
   10960:	d9400005 	stb	r5,0(sp)
   10964:	d80d883a 	mov	r6,sp
   10968:	a00b883a 	mov	r5,r20
   1096c:	183ee83a 	callr	r3
   10970:	103f7c1e 	bne	r2,zero,10764 <___vfprintf_internal_r+0x3dc>
   10974:	bdc00044 	addi	r23,r23,1
   10978:	003e9b06 	br	103e8 <___vfprintf_internal_r+0x60>
   1097c:	102f883a 	mov	r23,r2
   10980:	0021883a 	mov	r16,zero
   10984:	003e9806 	br	103e8 <___vfprintf_internal_r+0x60>
   10988:	a0c00117 	ldw	r3,4(r20)
   1098c:	d9000005 	stb	r4,0(sp)
   10990:	d9001017 	ldw	r4,64(sp)
   10994:	a00b883a 	mov	r5,r20
   10998:	d80d883a 	mov	r6,sp
   1099c:	800f883a 	mov	r7,r16
   109a0:	183ee83a 	callr	r3
   109a4:	103f6f1e 	bne	r2,zero,10764 <___vfprintf_internal_r+0x3dc>
   109a8:	bc2f883a 	add	r23,r23,r16
   109ac:	0021883a 	mov	r16,zero
   109b0:	003e8d06 	br	103e8 <___vfprintf_internal_r+0x60>
   109b4:	d9001017 	ldw	r4,64(sp)
   109b8:	a00b883a 	mov	r5,r20
   109bc:	01800c04 	movi	r6,48
   109c0:	800f883a 	mov	r7,r16
   109c4:	00103080 	call	10308 <print_repeat>
   109c8:	103f661e 	bne	r2,zero,10764 <___vfprintf_internal_r+0x3dc>
   109cc:	bc05883a 	add	r2,r23,r16
   109d0:	003f5406 	br	10724 <___vfprintf_internal_r+0x39c>
   109d4:	a0c00117 	ldw	r3,4(r20)
   109d8:	d9001017 	ldw	r4,64(sp)
   109dc:	00800b44 	movi	r2,45
   109e0:	d8800005 	stb	r2,0(sp)
   109e4:	a00b883a 	mov	r5,r20
   109e8:	d80d883a 	mov	r6,sp
   109ec:	01c00044 	movi	r7,1
   109f0:	183ee83a 	callr	r3
   109f4:	103f5b1e 	bne	r2,zero,10764 <___vfprintf_internal_r+0x3dc>
   109f8:	bdc00044 	addi	r23,r23,1
   109fc:	043f480e 	bge	zero,r16,10720 <___vfprintf_internal_r+0x398>
   10a00:	003fec06 	br	109b4 <___vfprintf_internal_r+0x62c>
   10a04:	d9001017 	ldw	r4,64(sp)
   10a08:	a00b883a 	mov	r5,r20
   10a0c:	01800804 	movi	r6,32
   10a10:	800f883a 	mov	r7,r16
   10a14:	00103080 	call	10308 <print_repeat>
   10a18:	103f521e 	bne	r2,zero,10764 <___vfprintf_internal_r+0x3dc>
   10a1c:	bc2f883a 	add	r23,r23,r16
   10a20:	003fbd06 	br	10918 <___vfprintf_internal_r+0x590>

00010a24 <__vfprintf_internal>:
   10a24:	00800074 	movhi	r2,1
   10a28:	108c2b04 	addi	r2,r2,12460
   10a2c:	2013883a 	mov	r9,r4
   10a30:	11000017 	ldw	r4,0(r2)
   10a34:	2805883a 	mov	r2,r5
   10a38:	300f883a 	mov	r7,r6
   10a3c:	480b883a 	mov	r5,r9
   10a40:	100d883a 	mov	r6,r2
   10a44:	00103881 	jmpi	10388 <___vfprintf_internal_r>

00010a48 <__sfvwrite_small_dev>:
   10a48:	2880000b 	ldhu	r2,0(r5)
   10a4c:	defffa04 	addi	sp,sp,-24
   10a50:	dcc00315 	stw	r19,12(sp)
   10a54:	1080020c 	andi	r2,r2,8
   10a58:	dc800215 	stw	r18,8(sp)
   10a5c:	dc400115 	stw	r17,4(sp)
   10a60:	dfc00515 	stw	ra,20(sp)
   10a64:	dd000415 	stw	r20,16(sp)
   10a68:	dc000015 	stw	r16,0(sp)
   10a6c:	2825883a 	mov	r18,r5
   10a70:	2027883a 	mov	r19,r4
   10a74:	3023883a 	mov	r17,r6
   10a78:	10002026 	beq	r2,zero,10afc <__sfvwrite_small_dev+0xb4>
   10a7c:	2940008f 	ldh	r5,2(r5)
   10a80:	28000f16 	blt	r5,zero,10ac0 <__sfvwrite_small_dev+0x78>
   10a84:	01c01b0e 	bge	zero,r7,10af4 <__sfvwrite_small_dev+0xac>
   10a88:	3821883a 	mov	r16,r7
   10a8c:	05010004 	movi	r20,1024
   10a90:	00000206 	br	10a9c <__sfvwrite_small_dev+0x54>
   10a94:	0400170e 	bge	zero,r16,10af4 <__sfvwrite_small_dev+0xac>
   10a98:	9140008f 	ldh	r5,2(r18)
   10a9c:	880d883a 	mov	r6,r17
   10aa0:	9809883a 	mov	r4,r19
   10aa4:	800f883a 	mov	r7,r16
   10aa8:	a400010e 	bge	r20,r16,10ab0 <__sfvwrite_small_dev+0x68>
   10aac:	01c10004 	movi	r7,1024
   10ab0:	0010b040 	call	10b04 <_write_r>
   10ab4:	88a3883a 	add	r17,r17,r2
   10ab8:	80a1c83a 	sub	r16,r16,r2
   10abc:	00bff516 	blt	zero,r2,10a94 <__sfvwrite_small_dev+0x4c>
   10ac0:	9080000b 	ldhu	r2,0(r18)
   10ac4:	00ffffc4 	movi	r3,-1
   10ac8:	10801014 	ori	r2,r2,64
   10acc:	9080000d 	sth	r2,0(r18)
   10ad0:	1805883a 	mov	r2,r3
   10ad4:	dfc00517 	ldw	ra,20(sp)
   10ad8:	dd000417 	ldw	r20,16(sp)
   10adc:	dcc00317 	ldw	r19,12(sp)
   10ae0:	dc800217 	ldw	r18,8(sp)
   10ae4:	dc400117 	ldw	r17,4(sp)
   10ae8:	dc000017 	ldw	r16,0(sp)
   10aec:	dec00604 	addi	sp,sp,24
   10af0:	f800283a 	ret
   10af4:	0007883a 	mov	r3,zero
   10af8:	003ff506 	br	10ad0 <__sfvwrite_small_dev+0x88>
   10afc:	00ffffc4 	movi	r3,-1
   10b00:	003ff306 	br	10ad0 <__sfvwrite_small_dev+0x88>

00010b04 <_write_r>:
   10b04:	defffd04 	addi	sp,sp,-12
   10b08:	dc000015 	stw	r16,0(sp)
   10b0c:	04000074 	movhi	r16,1
   10b10:	840ce804 	addi	r16,r16,13216
   10b14:	dc400115 	stw	r17,4(sp)
   10b18:	80000015 	stw	zero,0(r16)
   10b1c:	2023883a 	mov	r17,r4
   10b20:	2809883a 	mov	r4,r5
   10b24:	300b883a 	mov	r5,r6
   10b28:	380d883a 	mov	r6,r7
   10b2c:	dfc00215 	stw	ra,8(sp)
   10b30:	0010e480 	call	10e48 <write>
   10b34:	1007883a 	mov	r3,r2
   10b38:	00bfffc4 	movi	r2,-1
   10b3c:	18800626 	beq	r3,r2,10b58 <_write_r+0x54>
   10b40:	1805883a 	mov	r2,r3
   10b44:	dfc00217 	ldw	ra,8(sp)
   10b48:	dc400117 	ldw	r17,4(sp)
   10b4c:	dc000017 	ldw	r16,0(sp)
   10b50:	dec00304 	addi	sp,sp,12
   10b54:	f800283a 	ret
   10b58:	80800017 	ldw	r2,0(r16)
   10b5c:	103ff826 	beq	r2,zero,10b40 <_write_r+0x3c>
   10b60:	88800015 	stw	r2,0(r17)
   10b64:	1805883a 	mov	r2,r3
   10b68:	dfc00217 	ldw	ra,8(sp)
   10b6c:	dc400117 	ldw	r17,4(sp)
   10b70:	dc000017 	ldw	r16,0(sp)
   10b74:	dec00304 	addi	sp,sp,12
   10b78:	f800283a 	ret

00010b7c <udivmodsi4>:
   10b7c:	29001b2e 	bgeu	r5,r4,10bec <udivmodsi4+0x70>
   10b80:	28001a16 	blt	r5,zero,10bec <udivmodsi4+0x70>
   10b84:	00800044 	movi	r2,1
   10b88:	0007883a 	mov	r3,zero
   10b8c:	01c007c4 	movi	r7,31
   10b90:	00000306 	br	10ba0 <udivmodsi4+0x24>
   10b94:	19c01326 	beq	r3,r7,10be4 <udivmodsi4+0x68>
   10b98:	18c00044 	addi	r3,r3,1
   10b9c:	28000416 	blt	r5,zero,10bb0 <udivmodsi4+0x34>
   10ba0:	294b883a 	add	r5,r5,r5
   10ba4:	1085883a 	add	r2,r2,r2
   10ba8:	293ffa36 	bltu	r5,r4,10b94 <udivmodsi4+0x18>
   10bac:	10000d26 	beq	r2,zero,10be4 <udivmodsi4+0x68>
   10bb0:	0007883a 	mov	r3,zero
   10bb4:	21400236 	bltu	r4,r5,10bc0 <udivmodsi4+0x44>
   10bb8:	2149c83a 	sub	r4,r4,r5
   10bbc:	1886b03a 	or	r3,r3,r2
   10bc0:	1004d07a 	srli	r2,r2,1
   10bc4:	280ad07a 	srli	r5,r5,1
   10bc8:	103ffa1e 	bne	r2,zero,10bb4 <udivmodsi4+0x38>
   10bcc:	30000226 	beq	r6,zero,10bd8 <udivmodsi4+0x5c>
   10bd0:	2005883a 	mov	r2,r4
   10bd4:	f800283a 	ret
   10bd8:	1809883a 	mov	r4,r3
   10bdc:	2005883a 	mov	r2,r4
   10be0:	f800283a 	ret
   10be4:	0007883a 	mov	r3,zero
   10be8:	003ff806 	br	10bcc <udivmodsi4+0x50>
   10bec:	00800044 	movi	r2,1
   10bf0:	0007883a 	mov	r3,zero
   10bf4:	003fef06 	br	10bb4 <udivmodsi4+0x38>

00010bf8 <__divsi3>:
   10bf8:	defffe04 	addi	sp,sp,-8
   10bfc:	dc000015 	stw	r16,0(sp)
   10c00:	dfc00115 	stw	ra,4(sp)
   10c04:	0021883a 	mov	r16,zero
   10c08:	20000c16 	blt	r4,zero,10c3c <__divsi3+0x44>
   10c0c:	000d883a 	mov	r6,zero
   10c10:	28000e16 	blt	r5,zero,10c4c <__divsi3+0x54>
   10c14:	0010b7c0 	call	10b7c <udivmodsi4>
   10c18:	1007883a 	mov	r3,r2
   10c1c:	8005003a 	cmpeq	r2,r16,zero
   10c20:	1000011e 	bne	r2,zero,10c28 <__divsi3+0x30>
   10c24:	00c7c83a 	sub	r3,zero,r3
   10c28:	1805883a 	mov	r2,r3
   10c2c:	dfc00117 	ldw	ra,4(sp)
   10c30:	dc000017 	ldw	r16,0(sp)
   10c34:	dec00204 	addi	sp,sp,8
   10c38:	f800283a 	ret
   10c3c:	0109c83a 	sub	r4,zero,r4
   10c40:	04000044 	movi	r16,1
   10c44:	000d883a 	mov	r6,zero
   10c48:	283ff20e 	bge	r5,zero,10c14 <__divsi3+0x1c>
   10c4c:	014bc83a 	sub	r5,zero,r5
   10c50:	8021003a 	cmpeq	r16,r16,zero
   10c54:	003fef06 	br	10c14 <__divsi3+0x1c>

00010c58 <__modsi3>:
   10c58:	deffff04 	addi	sp,sp,-4
   10c5c:	dfc00015 	stw	ra,0(sp)
   10c60:	01800044 	movi	r6,1
   10c64:	2807883a 	mov	r3,r5
   10c68:	20000416 	blt	r4,zero,10c7c <__modsi3+0x24>
   10c6c:	28000c16 	blt	r5,zero,10ca0 <__modsi3+0x48>
   10c70:	dfc00017 	ldw	ra,0(sp)
   10c74:	dec00104 	addi	sp,sp,4
   10c78:	0010b7c1 	jmpi	10b7c <udivmodsi4>
   10c7c:	0109c83a 	sub	r4,zero,r4
   10c80:	28000b16 	blt	r5,zero,10cb0 <__modsi3+0x58>
   10c84:	180b883a 	mov	r5,r3
   10c88:	01800044 	movi	r6,1
   10c8c:	0010b7c0 	call	10b7c <udivmodsi4>
   10c90:	0085c83a 	sub	r2,zero,r2
   10c94:	dfc00017 	ldw	ra,0(sp)
   10c98:	dec00104 	addi	sp,sp,4
   10c9c:	f800283a 	ret
   10ca0:	014bc83a 	sub	r5,zero,r5
   10ca4:	dfc00017 	ldw	ra,0(sp)
   10ca8:	dec00104 	addi	sp,sp,4
   10cac:	0010b7c1 	jmpi	10b7c <udivmodsi4>
   10cb0:	0147c83a 	sub	r3,zero,r5
   10cb4:	003ff306 	br	10c84 <__modsi3+0x2c>

00010cb8 <__udivsi3>:
   10cb8:	000d883a 	mov	r6,zero
   10cbc:	0010b7c1 	jmpi	10b7c <udivmodsi4>

00010cc0 <__umodsi3>:
   10cc0:	01800044 	movi	r6,1
   10cc4:	0010b7c1 	jmpi	10b7c <udivmodsi4>

00010cc8 <__mulsi3>:
   10cc8:	20000a26 	beq	r4,zero,10cf4 <__mulsi3+0x2c>
   10ccc:	0007883a 	mov	r3,zero
   10cd0:	2080004c 	andi	r2,r4,1
   10cd4:	1005003a 	cmpeq	r2,r2,zero
   10cd8:	2008d07a 	srli	r4,r4,1
   10cdc:	1000011e 	bne	r2,zero,10ce4 <__mulsi3+0x1c>
   10ce0:	1947883a 	add	r3,r3,r5
   10ce4:	294b883a 	add	r5,r5,r5
   10ce8:	203ff91e 	bne	r4,zero,10cd0 <__mulsi3+0x8>
   10cec:	1805883a 	mov	r2,r3
   10cf0:	f800283a 	ret
   10cf4:	0007883a 	mov	r3,zero
   10cf8:	1805883a 	mov	r2,r3
   10cfc:	f800283a 	ret

00010d00 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10d00:	defffe04 	addi	sp,sp,-8
   10d04:	dfc00115 	stw	ra,4(sp)
   10d08:	df000015 	stw	fp,0(sp)
   10d0c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10d10:	01000074 	movhi	r4,1
   10d14:	210c3304 	addi	r4,r4,12492
   10d18:	01400074 	movhi	r5,1
   10d1c:	294b7e04 	addi	r5,r5,11768
   10d20:	01800074 	movhi	r6,1
   10d24:	318c3304 	addi	r6,r6,12492
   10d28:	0010d800 	call	10d80 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10d2c:	01000074 	movhi	r4,1
   10d30:	21000804 	addi	r4,r4,32
   10d34:	01400074 	movhi	r5,1
   10d38:	29400804 	addi	r5,r5,32
   10d3c:	01800074 	movhi	r6,1
   10d40:	31800804 	addi	r6,r6,32
   10d44:	0010d800 	call	10d80 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10d48:	01000074 	movhi	r4,1
   10d4c:	210ada04 	addi	r4,r4,11112
   10d50:	01400074 	movhi	r5,1
   10d54:	294ada04 	addi	r5,r5,11112
   10d58:	01800074 	movhi	r6,1
   10d5c:	318b7e04 	addi	r6,r6,11768
   10d60:	0010d800 	call	10d80 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10d64:	00117080 	call	11708 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10d68:	00118640 	call	11864 <alt_icache_flush_all>
}
   10d6c:	e037883a 	mov	sp,fp
   10d70:	dfc00117 	ldw	ra,4(sp)
   10d74:	df000017 	ldw	fp,0(sp)
   10d78:	dec00204 	addi	sp,sp,8
   10d7c:	f800283a 	ret

00010d80 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10d80:	defffc04 	addi	sp,sp,-16
   10d84:	df000315 	stw	fp,12(sp)
   10d88:	df000304 	addi	fp,sp,12
   10d8c:	e13ffd15 	stw	r4,-12(fp)
   10d90:	e17ffe15 	stw	r5,-8(fp)
   10d94:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10d98:	e0fffe17 	ldw	r3,-8(fp)
   10d9c:	e0bffd17 	ldw	r2,-12(fp)
   10da0:	18800e26 	beq	r3,r2,10ddc <alt_load_section+0x5c>
  {
    while( to != end )
   10da4:	00000a06 	br	10dd0 <alt_load_section+0x50>
    {
      *to++ = *from++;
   10da8:	e0bffd17 	ldw	r2,-12(fp)
   10dac:	10c00017 	ldw	r3,0(r2)
   10db0:	e0bffe17 	ldw	r2,-8(fp)
   10db4:	10c00015 	stw	r3,0(r2)
   10db8:	e0bffe17 	ldw	r2,-8(fp)
   10dbc:	10800104 	addi	r2,r2,4
   10dc0:	e0bffe15 	stw	r2,-8(fp)
   10dc4:	e0bffd17 	ldw	r2,-12(fp)
   10dc8:	10800104 	addi	r2,r2,4
   10dcc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10dd0:	e0fffe17 	ldw	r3,-8(fp)
   10dd4:	e0bfff17 	ldw	r2,-4(fp)
   10dd8:	18bff31e 	bne	r3,r2,10da8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   10ddc:	e037883a 	mov	sp,fp
   10de0:	df000017 	ldw	fp,0(sp)
   10de4:	dec00104 	addi	sp,sp,4
   10de8:	f800283a 	ret

00010dec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10dec:	defffd04 	addi	sp,sp,-12
   10df0:	dfc00215 	stw	ra,8(sp)
   10df4:	df000115 	stw	fp,4(sp)
   10df8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10dfc:	0009883a 	mov	r4,zero
   10e00:	0010fcc0 	call	10fcc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10e04:	00110000 	call	11000 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10e08:	01000074 	movhi	r4,1
   10e0c:	210af204 	addi	r4,r4,11208
   10e10:	01400074 	movhi	r5,1
   10e14:	294af204 	addi	r5,r5,11208
   10e18:	01800074 	movhi	r6,1
   10e1c:	318af204 	addi	r6,r6,11208
   10e20:	00119580 	call	11958 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10e24:	d120be17 	ldw	r4,-32008(gp)
   10e28:	d160bf17 	ldw	r5,-32004(gp)
   10e2c:	d1a0c017 	ldw	r6,-32000(gp)
   10e30:	001005c0 	call	1005c <main>
   10e34:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10e38:	01000044 	movi	r4,1
   10e3c:	00115a80 	call	115a8 <close>
  exit (result);
   10e40:	e13fff17 	ldw	r4,-4(fp)
   10e44:	00121580 	call	12158 <exit>

00010e48 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10e48:	defff704 	addi	sp,sp,-36
   10e4c:	dfc00815 	stw	ra,32(sp)
   10e50:	df000715 	stw	fp,28(sp)
   10e54:	df000704 	addi	fp,sp,28
   10e58:	e13ffb15 	stw	r4,-20(fp)
   10e5c:	e17ffc15 	stw	r5,-16(fp)
   10e60:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10e64:	e0bffb17 	ldw	r2,-20(fp)
   10e68:	1004803a 	cmplt	r2,r2,zero
   10e6c:	1000091e 	bne	r2,zero,10e94 <write+0x4c>
   10e70:	e13ffb17 	ldw	r4,-20(fp)
   10e74:	01400304 	movi	r5,12
   10e78:	0010cc80 	call	10cc8 <__mulsi3>
   10e7c:	1007883a 	mov	r3,r2
   10e80:	00800074 	movhi	r2,1
   10e84:	108bcb04 	addi	r2,r2,12076
   10e88:	1887883a 	add	r3,r3,r2
   10e8c:	e0ffff15 	stw	r3,-4(fp)
   10e90:	00000106 	br	10e98 <write+0x50>
   10e94:	e03fff15 	stw	zero,-4(fp)
   10e98:	e0bfff17 	ldw	r2,-4(fp)
   10e9c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   10ea0:	e0bffa17 	ldw	r2,-24(fp)
   10ea4:	1005003a 	cmpeq	r2,r2,zero
   10ea8:	1000241e 	bne	r2,zero,10f3c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10eac:	e0bffa17 	ldw	r2,-24(fp)
   10eb0:	10800217 	ldw	r2,8(r2)
   10eb4:	108000cc 	andi	r2,r2,3
   10eb8:	1005003a 	cmpeq	r2,r2,zero
   10ebc:	10001a1e 	bne	r2,zero,10f28 <write+0xe0>
   10ec0:	e0bffa17 	ldw	r2,-24(fp)
   10ec4:	10800017 	ldw	r2,0(r2)
   10ec8:	10800617 	ldw	r2,24(r2)
   10ecc:	1005003a 	cmpeq	r2,r2,zero
   10ed0:	1000151e 	bne	r2,zero,10f28 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10ed4:	e0bffa17 	ldw	r2,-24(fp)
   10ed8:	10800017 	ldw	r2,0(r2)
   10edc:	10800617 	ldw	r2,24(r2)
   10ee0:	e17ffc17 	ldw	r5,-16(fp)
   10ee4:	e1bffd17 	ldw	r6,-12(fp)
   10ee8:	e13ffa17 	ldw	r4,-24(fp)
   10eec:	103ee83a 	callr	r2
   10ef0:	e0bff915 	stw	r2,-28(fp)
   10ef4:	e0bff917 	ldw	r2,-28(fp)
   10ef8:	1004403a 	cmpge	r2,r2,zero
   10efc:	1000071e 	bne	r2,zero,10f1c <write+0xd4>
      {
        ALT_ERRNO = -rval;
   10f00:	0010f6c0 	call	10f6c <alt_get_errno>
   10f04:	e0fff917 	ldw	r3,-28(fp)
   10f08:	00c7c83a 	sub	r3,zero,r3
   10f0c:	10c00015 	stw	r3,0(r2)
        return -1;
   10f10:	00bfffc4 	movi	r2,-1
   10f14:	e0bffe15 	stw	r2,-8(fp)
   10f18:	00000e06 	br	10f54 <write+0x10c>
      }
      return rval;
   10f1c:	e0bff917 	ldw	r2,-28(fp)
   10f20:	e0bffe15 	stw	r2,-8(fp)
   10f24:	00000b06 	br	10f54 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10f28:	0010f6c0 	call	10f6c <alt_get_errno>
   10f2c:	1007883a 	mov	r3,r2
   10f30:	00800344 	movi	r2,13
   10f34:	18800015 	stw	r2,0(r3)
   10f38:	00000406 	br	10f4c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10f3c:	0010f6c0 	call	10f6c <alt_get_errno>
   10f40:	1007883a 	mov	r3,r2
   10f44:	00801444 	movi	r2,81
   10f48:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10f4c:	00bfffc4 	movi	r2,-1
   10f50:	e0bffe15 	stw	r2,-8(fp)
   10f54:	e0bffe17 	ldw	r2,-8(fp)
}
   10f58:	e037883a 	mov	sp,fp
   10f5c:	dfc00117 	ldw	ra,4(sp)
   10f60:	df000017 	ldw	fp,0(sp)
   10f64:	dec00204 	addi	sp,sp,8
   10f68:	f800283a 	ret

00010f6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10f6c:	defffd04 	addi	sp,sp,-12
   10f70:	dfc00215 	stw	ra,8(sp)
   10f74:	df000115 	stw	fp,4(sp)
   10f78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10f7c:	00800074 	movhi	r2,1
   10f80:	108c3204 	addi	r2,r2,12488
   10f84:	10800017 	ldw	r2,0(r2)
   10f88:	1005003a 	cmpeq	r2,r2,zero
   10f8c:	1000061e 	bne	r2,zero,10fa8 <alt_get_errno+0x3c>
   10f90:	00800074 	movhi	r2,1
   10f94:	108c3204 	addi	r2,r2,12488
   10f98:	10800017 	ldw	r2,0(r2)
   10f9c:	103ee83a 	callr	r2
   10fa0:	e0bfff15 	stw	r2,-4(fp)
   10fa4:	00000306 	br	10fb4 <alt_get_errno+0x48>
   10fa8:	00800074 	movhi	r2,1
   10fac:	108ce804 	addi	r2,r2,13216
   10fb0:	e0bfff15 	stw	r2,-4(fp)
   10fb4:	e0bfff17 	ldw	r2,-4(fp)
}
   10fb8:	e037883a 	mov	sp,fp
   10fbc:	dfc00117 	ldw	ra,4(sp)
   10fc0:	df000017 	ldw	fp,0(sp)
   10fc4:	dec00204 	addi	sp,sp,8
   10fc8:	f800283a 	ret

00010fcc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10fcc:	defffd04 	addi	sp,sp,-12
   10fd0:	dfc00215 	stw	ra,8(sp)
   10fd4:	df000115 	stw	fp,4(sp)
   10fd8:	df000104 	addi	fp,sp,4
   10fdc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, nios);
   10fe0:	0011d2c0 	call	11d2c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10fe4:	00800044 	movi	r2,1
   10fe8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10fec:	e037883a 	mov	sp,fp
   10ff0:	dfc00117 	ldw	ra,4(sp)
   10ff4:	df000017 	ldw	fp,0(sp)
   10ff8:	dec00204 	addi	sp,sp,8
   10ffc:	f800283a 	ret

00011000 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11000:	defffe04 	addi	sp,sp,-8
   11004:	dfc00115 	stw	ra,4(sp)
   11008:	df000015 	stw	fp,0(sp)
   1100c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
   11010:	01000074 	movhi	r4,1
   11014:	210bb604 	addi	r4,r4,11992
   11018:	001103c0 	call	1103c <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
   1101c:	0007883a 	mov	r3,zero
   11020:	00800044 	movi	r2,1
   11024:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   11028:	e037883a 	mov	sp,fp
   1102c:	dfc00117 	ldw	ra,4(sp)
   11030:	df000017 	ldw	fp,0(sp)
   11034:	dec00204 	addi	sp,sp,8
   11038:	f800283a 	ret

0001103c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1103c:	defffd04 	addi	sp,sp,-12
   11040:	dfc00215 	stw	ra,8(sp)
   11044:	df000115 	stw	fp,4(sp)
   11048:	df000104 	addi	fp,sp,4
   1104c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11050:	e13fff17 	ldw	r4,-4(fp)
   11054:	01400074 	movhi	r5,1
   11058:	294c2f04 	addi	r5,r5,12476
   1105c:	00117500 	call	11750 <alt_dev_llist_insert>
}
   11060:	e037883a 	mov	sp,fp
   11064:	dfc00117 	ldw	ra,4(sp)
   11068:	df000017 	ldw	fp,0(sp)
   1106c:	dec00204 	addi	sp,sp,8
   11070:	f800283a 	ret

00011074 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11074:	defffa04 	addi	sp,sp,-24
   11078:	dfc00515 	stw	ra,20(sp)
   1107c:	df000415 	stw	fp,16(sp)
   11080:	df000404 	addi	fp,sp,16
   11084:	e13ffd15 	stw	r4,-12(fp)
   11088:	e17ffe15 	stw	r5,-8(fp)
   1108c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11090:	e0bffd17 	ldw	r2,-12(fp)
   11094:	10800017 	ldw	r2,0(r2)
   11098:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1109c:	e0bffc17 	ldw	r2,-16(fp)
   110a0:	11000a04 	addi	r4,r2,40
   110a4:	e0bffd17 	ldw	r2,-12(fp)
   110a8:	11c00217 	ldw	r7,8(r2)
   110ac:	e17ffe17 	ldw	r5,-8(fp)
   110b0:	e1bfff17 	ldw	r6,-4(fp)
   110b4:	00111240 	call	11124 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   110b8:	e037883a 	mov	sp,fp
   110bc:	dfc00117 	ldw	ra,4(sp)
   110c0:	df000017 	ldw	fp,0(sp)
   110c4:	dec00204 	addi	sp,sp,8
   110c8:	f800283a 	ret

000110cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   110cc:	defffa04 	addi	sp,sp,-24
   110d0:	dfc00515 	stw	ra,20(sp)
   110d4:	df000415 	stw	fp,16(sp)
   110d8:	df000404 	addi	fp,sp,16
   110dc:	e13ffd15 	stw	r4,-12(fp)
   110e0:	e17ffe15 	stw	r5,-8(fp)
   110e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   110e8:	e0bffd17 	ldw	r2,-12(fp)
   110ec:	10800017 	ldw	r2,0(r2)
   110f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   110f4:	e0bffc17 	ldw	r2,-16(fp)
   110f8:	11000a04 	addi	r4,r2,40
   110fc:	e0bffd17 	ldw	r2,-12(fp)
   11100:	11c00217 	ldw	r7,8(r2)
   11104:	e17ffe17 	ldw	r5,-8(fp)
   11108:	e1bfff17 	ldw	r6,-4(fp)
   1110c:	00112280 	call	11228 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   11110:	e037883a 	mov	sp,fp
   11114:	dfc00117 	ldw	ra,4(sp)
   11118:	df000017 	ldw	fp,0(sp)
   1111c:	dec00204 	addi	sp,sp,8
   11120:	f800283a 	ret

00011124 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   11124:	defff604 	addi	sp,sp,-40
   11128:	df000915 	stw	fp,36(sp)
   1112c:	df000904 	addi	fp,sp,36
   11130:	e13ffb15 	stw	r4,-20(fp)
   11134:	e17ffc15 	stw	r5,-16(fp)
   11138:	e1bffd15 	stw	r6,-12(fp)
   1113c:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   11140:	e0bffb17 	ldw	r2,-20(fp)
   11144:	10800017 	ldw	r2,0(r2)
   11148:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   1114c:	e0bffc17 	ldw	r2,-16(fp)
   11150:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   11154:	e0bffd17 	ldw	r2,-12(fp)
   11158:	1007883a 	mov	r3,r2
   1115c:	e0bffc17 	ldw	r2,-16(fp)
   11160:	10c5883a 	add	r2,r2,r3
   11164:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   11168:	00001606 	br	111c4 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1116c:	e0bffa17 	ldw	r2,-24(fp)
   11170:	10800037 	ldwio	r2,0(r2)
   11174:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   11178:	e0bff717 	ldw	r2,-36(fp)
   1117c:	10a0000c 	andi	r2,r2,32768
   11180:	1005003a 	cmpeq	r2,r2,zero
   11184:	1000081e 	bne	r2,zero,111a8 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   11188:	e0bff717 	ldw	r2,-36(fp)
   1118c:	1007883a 	mov	r3,r2
   11190:	e0bff917 	ldw	r2,-28(fp)
   11194:	10c00005 	stb	r3,0(r2)
   11198:	e0bff917 	ldw	r2,-28(fp)
   1119c:	10800044 	addi	r2,r2,1
   111a0:	e0bff915 	stw	r2,-28(fp)
   111a4:	00000706 	br	111c4 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   111a8:	e0fff917 	ldw	r3,-28(fp)
   111ac:	e0bffc17 	ldw	r2,-16(fp)
   111b0:	1880071e 	bne	r3,r2,111d0 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   111b4:	e0bffe17 	ldw	r2,-8(fp)
   111b8:	1090000c 	andi	r2,r2,16384
   111bc:	1004c03a 	cmpne	r2,r2,zero
   111c0:	1000031e 	bne	r2,zero,111d0 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   111c4:	e0fff917 	ldw	r3,-28(fp)
   111c8:	e0bff817 	ldw	r2,-32(fp)
   111cc:	18bfe736 	bltu	r3,r2,1116c <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   111d0:	e0fff917 	ldw	r3,-28(fp)
   111d4:	e0bffc17 	ldw	r2,-16(fp)
   111d8:	18800526 	beq	r3,r2,111f0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   111dc:	e0fff917 	ldw	r3,-28(fp)
   111e0:	e0bffc17 	ldw	r2,-16(fp)
   111e4:	1887c83a 	sub	r3,r3,r2
   111e8:	e0ffff15 	stw	r3,-4(fp)
   111ec:	00000906 	br	11214 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   111f0:	e0bffe17 	ldw	r2,-8(fp)
   111f4:	1090000c 	andi	r2,r2,16384
   111f8:	1005003a 	cmpeq	r2,r2,zero
   111fc:	1000031e 	bne	r2,zero,1120c <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   11200:	00bffd44 	movi	r2,-11
   11204:	e0bfff15 	stw	r2,-4(fp)
   11208:	00000206 	br	11214 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   1120c:	00bffec4 	movi	r2,-5
   11210:	e0bfff15 	stw	r2,-4(fp)
   11214:	e0bfff17 	ldw	r2,-4(fp)
}
   11218:	e037883a 	mov	sp,fp
   1121c:	df000017 	ldw	fp,0(sp)
   11220:	dec00104 	addi	sp,sp,4
   11224:	f800283a 	ret

00011228 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11228:	defff904 	addi	sp,sp,-28
   1122c:	df000615 	stw	fp,24(sp)
   11230:	df000604 	addi	fp,sp,24
   11234:	e13ffc15 	stw	r4,-16(fp)
   11238:	e17ffd15 	stw	r5,-12(fp)
   1123c:	e1bffe15 	stw	r6,-8(fp)
   11240:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   11244:	e0bffc17 	ldw	r2,-16(fp)
   11248:	10800017 	ldw	r2,0(r2)
   1124c:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   11250:	e0bffe17 	ldw	r2,-8(fp)
   11254:	1007883a 	mov	r3,r2
   11258:	e0bffd17 	ldw	r2,-12(fp)
   1125c:	10c5883a 	add	r2,r2,r3
   11260:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   11264:	00001106 	br	112ac <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11268:	e0bffb17 	ldw	r2,-20(fp)
   1126c:	10800104 	addi	r2,r2,4
   11270:	10800037 	ldwio	r2,0(r2)
   11274:	10bfffec 	andhi	r2,r2,65535
   11278:	1005003a 	cmpeq	r2,r2,zero
   1127c:	10000b1e 	bne	r2,zero,112ac <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   11280:	e13ffb17 	ldw	r4,-20(fp)
   11284:	e0bffd17 	ldw	r2,-12(fp)
   11288:	10800003 	ldbu	r2,0(r2)
   1128c:	10c03fcc 	andi	r3,r2,255
   11290:	18c0201c 	xori	r3,r3,128
   11294:	18ffe004 	addi	r3,r3,-128
   11298:	e0bffd17 	ldw	r2,-12(fp)
   1129c:	10800044 	addi	r2,r2,1
   112a0:	e0bffd15 	stw	r2,-12(fp)
   112a4:	2005883a 	mov	r2,r4
   112a8:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   112ac:	e0fffd17 	ldw	r3,-12(fp)
   112b0:	e0bffa17 	ldw	r2,-24(fp)
   112b4:	18bfec36 	bltu	r3,r2,11268 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   112b8:	e0bffe17 	ldw	r2,-8(fp)
}
   112bc:	e037883a 	mov	sp,fp
   112c0:	df000017 	ldw	fp,0(sp)
   112c4:	dec00104 	addi	sp,sp,4
   112c8:	f800283a 	ret

000112cc <perf_print_formatted_report>:
 * second.
 */
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
   112cc:	deffef04 	addi	sp,sp,-68
   112d0:	dfc00f15 	stw	ra,60(sp)
   112d4:	df000e15 	stw	fp,56(sp)
   112d8:	df000e04 	addi	fp,sp,56
   112dc:	e13ffd15 	stw	r4,-12(fp)
   112e0:	e17ffe15 	stw	r5,-8(fp)
   112e4:	e1c00215 	stw	r7,8(fp)
   112e8:	e1bfff15 	stw	r6,-4(fp)
    va_list name_args;
    alt_u64 total_usec;
    alt_u64 total_clocks;
    alt_u64 section_clocks;
    char* section_name;
    int section_num = 1;
   112ec:	00800044 	movi	r2,1
   112f0:	e0bff415 	stw	r2,-48(fp)

    const char* separator =
      "+---------------+-----+------------+---------------+------------+\n";
   112f4:	00800074 	movhi	r2,1
   112f8:	108af804 	addi	r2,r2,11232
   112fc:	e0bff315 	stw	r2,-52(fp)
    
    const char* column_header =
      "| Section       |  %  | Time (usec)|  Time (clocks)|Occurrences |\n";
   11300:	00800074 	movhi	r2,1
   11304:	108b0904 	addi	r2,r2,11300
   11308:	e0bff215 	stw	r2,-56(fp)

    PERF_STOP_MEASURING (perf_base);
   1130c:	e0bffd17 	ldw	r2,-12(fp)
   11310:	10000035 	stwio	zero,0(r2)

    va_start (name_args, num_sections);
   11314:	e0800204 	addi	r2,fp,8
   11318:	e0bffc15 	stw	r2,-16(fp)

    total_clocks = perf_get_total_time (perf_base);
   1131c:	e13ffd17 	ldw	r4,-12(fp)
   11320:	0011dfc0 	call	11dfc <perf_get_total_time>
   11324:	1009883a 	mov	r4,r2
   11328:	180b883a 	mov	r5,r3
   1132c:	e13ff815 	stw	r4,-32(fp)
   11330:	e17ff915 	stw	r5,-28(fp)
    total_usec = total_clocks * 1000000 / clock_freq_hertz;
   11334:	e13ff817 	ldw	r4,-32(fp)
   11338:	e17ff917 	ldw	r5,-28(fp)
   1133c:	018003f4 	movhi	r6,15
   11340:	31909004 	addi	r6,r6,16960
   11344:	000f883a 	mov	r7,zero
   11348:	00123740 	call	12374 <__muldi3>
   1134c:	1009883a 	mov	r4,r2
   11350:	180b883a 	mov	r5,r3
   11354:	200d883a 	mov	r6,r4
   11358:	280f883a 	mov	r7,r5
   1135c:	e0bffe17 	ldw	r2,-8(fp)
   11360:	0007883a 	mov	r3,zero
   11364:	3009883a 	mov	r4,r6
   11368:	380b883a 	mov	r5,r7
   1136c:	100d883a 	mov	r6,r2
   11370:	180f883a 	mov	r7,r3
   11374:	00124980 	call	12498 <__udivdi3>
   11378:	1009883a 	mov	r4,r2
   1137c:	180b883a 	mov	r5,r3
   11380:	e13ffa15 	stw	r4,-24(fp)
   11384:	e17ffb15 	stw	r5,-20(fp)

    // Print the total at the top:
    printf("--Performance Counter Report--\n");
   11388:	01000074 	movhi	r4,1
   1138c:	210b1a04 	addi	r4,r4,11368
   11390:	00102d40 	call	102d4 <puts>
    printf("Total Time : %llu usec ", total_usec);            
   11394:	01000074 	movhi	r4,1
   11398:	210b2204 	addi	r4,r4,11400
   1139c:	e17ffa17 	ldw	r5,-24(fp)
   113a0:	e1bffb17 	ldw	r6,-20(fp)
   113a4:	00101ac0 	call	101ac <printf>
    printf("(%llu clock-cycles)\n", total_clocks);            
   113a8:	01000074 	movhi	r4,1
   113ac:	210b2804 	addi	r4,r4,11424
   113b0:	e17ff817 	ldw	r5,-32(fp)
   113b4:	e1bff917 	ldw	r6,-28(fp)
   113b8:	00101ac0 	call	101ac <printf>
    printf("%s", separator);
   113bc:	01000074 	movhi	r4,1
   113c0:	210b2e04 	addi	r4,r4,11448
   113c4:	e17ff317 	ldw	r5,-52(fp)
   113c8:	00101ac0 	call	101ac <printf>
    printf("%s", column_header);
   113cc:	01000074 	movhi	r4,1
   113d0:	210b2e04 	addi	r4,r4,11448
   113d4:	e17ff217 	ldw	r5,-56(fp)
   113d8:	00101ac0 	call	101ac <printf>
    printf("%s", separator);
   113dc:	01000074 	movhi	r4,1
   113e0:	210b2e04 	addi	r4,r4,11448
   113e4:	e17ff317 	ldw	r5,-52(fp)
   113e8:	00101ac0 	call	101ac <printf>

    section_name = va_arg(name_args, char*);
   113ec:	e0fffc17 	ldw	r3,-16(fp)
   113f0:	18800104 	addi	r2,r3,4
   113f4:	e0bffc15 	stw	r2,-16(fp)
   113f8:	1805883a 	mov	r2,r3
   113fc:	10800017 	ldw	r2,0(r2)
   11400:	e0bff515 	stw	r2,-44(fp)

    for (section_num = 1; section_num <= num_sections; section_num++)
   11404:	00800044 	movi	r2,1
   11408:	e0bff415 	stw	r2,-48(fp)
   1140c:	00005d06 	br	11584 <perf_print_formatted_report+0x2b8>
    {
        section_clocks = perf_get_section_time (perf_base, section_num);
   11410:	e13ffd17 	ldw	r4,-12(fp)
   11414:	e17ff417 	ldw	r5,-48(fp)
   11418:	0011d4c0 	call	11d4c <perf_get_section_time>
   1141c:	1009883a 	mov	r4,r2
   11420:	180b883a 	mov	r5,r3
   11424:	e13ff615 	stw	r4,-40(fp)
   11428:	e17ff715 	stw	r5,-36(fp)
        /* section name, small C library does not support left-justify, 
         * uses right-justify instead.
         */
        printf ("|%15s", section_name);
   1142c:	01000074 	movhi	r4,1
   11430:	210b2f04 	addi	r4,r4,11452
   11434:	e17ff517 	ldw	r5,-44(fp)
   11438:	00101ac0 	call	101ac <printf>

        /* section usage */
        if (total_clocks) 
   1143c:	e0bff817 	ldw	r2,-32(fp)
   11440:	e0fff917 	ldw	r3,-28(fp)
   11444:	10c4b03a 	or	r2,r2,r3
   11448:	1005003a 	cmpeq	r2,r2,zero
   1144c:	1000171e 	bne	r2,zero,114ac <perf_print_formatted_report+0x1e0>
        {
            printf ("|%4u ", (unsigned int)(section_clocks * 100 / total_clocks));
   11450:	e13ff617 	ldw	r4,-40(fp)
   11454:	e17ff717 	ldw	r5,-36(fp)
   11458:	01801904 	movi	r6,100
   1145c:	000f883a 	mov	r7,zero
   11460:	00123740 	call	12374 <__muldi3>
   11464:	1009883a 	mov	r4,r2
   11468:	180b883a 	mov	r5,r3
   1146c:	2005883a 	mov	r2,r4
   11470:	2807883a 	mov	r3,r5
   11474:	1009883a 	mov	r4,r2
   11478:	180b883a 	mov	r5,r3
   1147c:	e1bff817 	ldw	r6,-32(fp)
   11480:	e1fff917 	ldw	r7,-28(fp)
   11484:	00124980 	call	12498 <__udivdi3>
   11488:	1009883a 	mov	r4,r2
   1148c:	180b883a 	mov	r5,r3
   11490:	2005883a 	mov	r2,r4
   11494:	2807883a 	mov	r3,r5
   11498:	100b883a 	mov	r5,r2
   1149c:	01000074 	movhi	r4,1
   114a0:	210b3104 	addi	r4,r4,11460
   114a4:	00101ac0 	call	101ac <printf>
   114a8:	00000406 	br	114bc <perf_print_formatted_report+0x1f0>
        }
        else
        {
            printf ("|%4u ", 0);
   114ac:	01000074 	movhi	r4,1
   114b0:	210b3104 	addi	r4,r4,11460
   114b4:	000b883a 	mov	r5,zero
   114b8:	00101ac0 	call	101ac <printf>
        }        

        /* section usecs */
        printf ("|%11llu ", (alt_u64)(section_clocks * 1000000 / clock_freq_hertz));
   114bc:	e13ff617 	ldw	r4,-40(fp)
   114c0:	e17ff717 	ldw	r5,-36(fp)
   114c4:	018003f4 	movhi	r6,15
   114c8:	31909004 	addi	r6,r6,16960
   114cc:	000f883a 	mov	r7,zero
   114d0:	00123740 	call	12374 <__muldi3>
   114d4:	1009883a 	mov	r4,r2
   114d8:	180b883a 	mov	r5,r3
   114dc:	200d883a 	mov	r6,r4
   114e0:	280f883a 	mov	r7,r5
   114e4:	e0bffe17 	ldw	r2,-8(fp)
   114e8:	0007883a 	mov	r3,zero
   114ec:	3009883a 	mov	r4,r6
   114f0:	380b883a 	mov	r5,r7
   114f4:	100d883a 	mov	r6,r2
   114f8:	180f883a 	mov	r7,r3
   114fc:	00124980 	call	12498 <__udivdi3>
   11500:	1009883a 	mov	r4,r2
   11504:	180b883a 	mov	r5,r3
   11508:	2005883a 	mov	r2,r4
   1150c:	2807883a 	mov	r3,r5
   11510:	01000074 	movhi	r4,1
   11514:	210b3304 	addi	r4,r4,11468
   11518:	100b883a 	mov	r5,r2
   1151c:	180d883a 	mov	r6,r3
   11520:	00101ac0 	call	101ac <printf>

        /* section clocks */
        printf ("|%14u ", (unsigned int)section_clocks);
   11524:	e17ff617 	ldw	r5,-40(fp)
   11528:	01000074 	movhi	r4,1
   1152c:	210b3604 	addi	r4,r4,11480
   11530:	00101ac0 	call	101ac <printf>

        /* section occurrences */
        printf ("|%10u  |\n",
   11534:	e13ffd17 	ldw	r4,-12(fp)
   11538:	e17ff417 	ldw	r5,-48(fp)
   1153c:	0011e500 	call	11e50 <perf_get_num_starts>
   11540:	100b883a 	mov	r5,r2
   11544:	01000074 	movhi	r4,1
   11548:	210b3804 	addi	r4,r4,11488
   1154c:	00101ac0 	call	101ac <printf>
        (unsigned int) perf_get_num_starts (perf_base, section_num));

        printf ("%s", separator);
   11550:	01000074 	movhi	r4,1
   11554:	210b2e04 	addi	r4,r4,11448
   11558:	e17ff317 	ldw	r5,-52(fp)
   1155c:	00101ac0 	call	101ac <printf>

        section_name = va_arg(name_args, char*);
   11560:	e0fffc17 	ldw	r3,-16(fp)
   11564:	18800104 	addi	r2,r3,4
   11568:	e0bffc15 	stw	r2,-16(fp)
   1156c:	1805883a 	mov	r2,r3
   11570:	10800017 	ldw	r2,0(r2)
   11574:	e0bff515 	stw	r2,-44(fp)
    printf("%s", column_header);
    printf("%s", separator);

    section_name = va_arg(name_args, char*);

    for (section_num = 1; section_num <= num_sections; section_num++)
   11578:	e0bff417 	ldw	r2,-48(fp)
   1157c:	10800044 	addi	r2,r2,1
   11580:	e0bff415 	stw	r2,-48(fp)
   11584:	e0fff417 	ldw	r3,-48(fp)
   11588:	e0bfff17 	ldw	r2,-4(fp)
   1158c:	10ffa00e 	bge	r2,r3,11410 <perf_print_formatted_report+0x144>
        section_name = va_arg(name_args, char*);
    }

    va_end (name_args);

    return 0;
   11590:	0005883a 	mov	r2,zero
}
   11594:	e037883a 	mov	sp,fp
   11598:	dfc00117 	ldw	ra,4(sp)
   1159c:	df000017 	ldw	fp,0(sp)
   115a0:	dec00304 	addi	sp,sp,12
   115a4:	f800283a 	ret

000115a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   115a8:	defff804 	addi	sp,sp,-32
   115ac:	dfc00715 	stw	ra,28(sp)
   115b0:	df000615 	stw	fp,24(sp)
   115b4:	df000604 	addi	fp,sp,24
   115b8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   115bc:	e0bffc17 	ldw	r2,-16(fp)
   115c0:	1004803a 	cmplt	r2,r2,zero
   115c4:	1000091e 	bne	r2,zero,115ec <close+0x44>
   115c8:	e13ffc17 	ldw	r4,-16(fp)
   115cc:	01400304 	movi	r5,12
   115d0:	0010cc80 	call	10cc8 <__mulsi3>
   115d4:	1007883a 	mov	r3,r2
   115d8:	00800074 	movhi	r2,1
   115dc:	108bcb04 	addi	r2,r2,12076
   115e0:	1887883a 	add	r3,r3,r2
   115e4:	e0ffff15 	stw	r3,-4(fp)
   115e8:	00000106 	br	115f0 <close+0x48>
   115ec:	e03fff15 	stw	zero,-4(fp)
   115f0:	e0bfff17 	ldw	r2,-4(fp)
   115f4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   115f8:	e0bffb17 	ldw	r2,-20(fp)
   115fc:	1005003a 	cmpeq	r2,r2,zero
   11600:	10001d1e 	bne	r2,zero,11678 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11604:	e0bffb17 	ldw	r2,-20(fp)
   11608:	10800017 	ldw	r2,0(r2)
   1160c:	10800417 	ldw	r2,16(r2)
   11610:	1005003a 	cmpeq	r2,r2,zero
   11614:	1000071e 	bne	r2,zero,11634 <close+0x8c>
   11618:	e0bffb17 	ldw	r2,-20(fp)
   1161c:	10800017 	ldw	r2,0(r2)
   11620:	10800417 	ldw	r2,16(r2)
   11624:	e13ffb17 	ldw	r4,-20(fp)
   11628:	103ee83a 	callr	r2
   1162c:	e0bffe15 	stw	r2,-8(fp)
   11630:	00000106 	br	11638 <close+0x90>
   11634:	e03ffe15 	stw	zero,-8(fp)
   11638:	e0bffe17 	ldw	r2,-8(fp)
   1163c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11640:	e13ffc17 	ldw	r4,-16(fp)
   11644:	0011cb40 	call	11cb4 <alt_release_fd>
    if (rval < 0)
   11648:	e0bffa17 	ldw	r2,-24(fp)
   1164c:	1004403a 	cmpge	r2,r2,zero
   11650:	1000071e 	bne	r2,zero,11670 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   11654:	00116a80 	call	116a8 <alt_get_errno>
   11658:	e0fffa17 	ldw	r3,-24(fp)
   1165c:	00c7c83a 	sub	r3,zero,r3
   11660:	10c00015 	stw	r3,0(r2)
      return -1;
   11664:	00bfffc4 	movi	r2,-1
   11668:	e0bffd15 	stw	r2,-12(fp)
   1166c:	00000806 	br	11690 <close+0xe8>
    }
    return 0;
   11670:	e03ffd15 	stw	zero,-12(fp)
   11674:	00000606 	br	11690 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11678:	00116a80 	call	116a8 <alt_get_errno>
   1167c:	1007883a 	mov	r3,r2
   11680:	00801444 	movi	r2,81
   11684:	18800015 	stw	r2,0(r3)
    return -1;
   11688:	00bfffc4 	movi	r2,-1
   1168c:	e0bffd15 	stw	r2,-12(fp)
   11690:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   11694:	e037883a 	mov	sp,fp
   11698:	dfc00117 	ldw	ra,4(sp)
   1169c:	df000017 	ldw	fp,0(sp)
   116a0:	dec00204 	addi	sp,sp,8
   116a4:	f800283a 	ret

000116a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   116a8:	defffd04 	addi	sp,sp,-12
   116ac:	dfc00215 	stw	ra,8(sp)
   116b0:	df000115 	stw	fp,4(sp)
   116b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   116b8:	00800074 	movhi	r2,1
   116bc:	108c3204 	addi	r2,r2,12488
   116c0:	10800017 	ldw	r2,0(r2)
   116c4:	1005003a 	cmpeq	r2,r2,zero
   116c8:	1000061e 	bne	r2,zero,116e4 <alt_get_errno+0x3c>
   116cc:	00800074 	movhi	r2,1
   116d0:	108c3204 	addi	r2,r2,12488
   116d4:	10800017 	ldw	r2,0(r2)
   116d8:	103ee83a 	callr	r2
   116dc:	e0bfff15 	stw	r2,-4(fp)
   116e0:	00000306 	br	116f0 <alt_get_errno+0x48>
   116e4:	00800074 	movhi	r2,1
   116e8:	108ce804 	addi	r2,r2,13216
   116ec:	e0bfff15 	stw	r2,-4(fp)
   116f0:	e0bfff17 	ldw	r2,-4(fp)
}
   116f4:	e037883a 	mov	sp,fp
   116f8:	dfc00117 	ldw	ra,4(sp)
   116fc:	df000017 	ldw	fp,0(sp)
   11700:	dec00204 	addi	sp,sp,8
   11704:	f800283a 	ret

00011708 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11708:	deffff04 	addi	sp,sp,-4
   1170c:	df000015 	stw	fp,0(sp)
   11710:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11714:	e037883a 	mov	sp,fp
   11718:	df000017 	ldw	fp,0(sp)
   1171c:	dec00104 	addi	sp,sp,4
   11720:	f800283a 	ret

00011724 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11724:	defffc04 	addi	sp,sp,-16
   11728:	df000315 	stw	fp,12(sp)
   1172c:	df000304 	addi	fp,sp,12
   11730:	e13ffd15 	stw	r4,-12(fp)
   11734:	e17ffe15 	stw	r5,-8(fp)
   11738:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1173c:	e0bfff17 	ldw	r2,-4(fp)
}
   11740:	e037883a 	mov	sp,fp
   11744:	df000017 	ldw	fp,0(sp)
   11748:	dec00104 	addi	sp,sp,4
   1174c:	f800283a 	ret

00011750 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11750:	defff904 	addi	sp,sp,-28
   11754:	dfc00615 	stw	ra,24(sp)
   11758:	df000515 	stw	fp,20(sp)
   1175c:	df000504 	addi	fp,sp,20
   11760:	e13ffd15 	stw	r4,-12(fp)
   11764:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11768:	e0bffd17 	ldw	r2,-12(fp)
   1176c:	1005003a 	cmpeq	r2,r2,zero
   11770:	1000041e 	bne	r2,zero,11784 <alt_dev_llist_insert+0x34>
   11774:	e0bffd17 	ldw	r2,-12(fp)
   11778:	10800217 	ldw	r2,8(r2)
   1177c:	1004c03a 	cmpne	r2,r2,zero
   11780:	1000071e 	bne	r2,zero,117a0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   11784:	00118040 	call	11804 <alt_get_errno>
   11788:	1007883a 	mov	r3,r2
   1178c:	00800584 	movi	r2,22
   11790:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11794:	00bffa84 	movi	r2,-22
   11798:	e0bfff15 	stw	r2,-4(fp)
   1179c:	00001306 	br	117ec <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   117a0:	e0fffd17 	ldw	r3,-12(fp)
   117a4:	e0bffe17 	ldw	r2,-8(fp)
   117a8:	e0bffb15 	stw	r2,-20(fp)
   117ac:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   117b0:	e0fffc17 	ldw	r3,-16(fp)
   117b4:	e0bffb17 	ldw	r2,-20(fp)
   117b8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   117bc:	e0bffb17 	ldw	r2,-20(fp)
   117c0:	10c00017 	ldw	r3,0(r2)
   117c4:	e0bffc17 	ldw	r2,-16(fp)
   117c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   117cc:	e0bffb17 	ldw	r2,-20(fp)
   117d0:	10c00017 	ldw	r3,0(r2)
   117d4:	e0bffc17 	ldw	r2,-16(fp)
   117d8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   117dc:	e0fffb17 	ldw	r3,-20(fp)
   117e0:	e0bffc17 	ldw	r2,-16(fp)
   117e4:	18800015 	stw	r2,0(r3)

  return 0;  
   117e8:	e03fff15 	stw	zero,-4(fp)
   117ec:	e0bfff17 	ldw	r2,-4(fp)
}
   117f0:	e037883a 	mov	sp,fp
   117f4:	dfc00117 	ldw	ra,4(sp)
   117f8:	df000017 	ldw	fp,0(sp)
   117fc:	dec00204 	addi	sp,sp,8
   11800:	f800283a 	ret

00011804 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11804:	defffd04 	addi	sp,sp,-12
   11808:	dfc00215 	stw	ra,8(sp)
   1180c:	df000115 	stw	fp,4(sp)
   11810:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11814:	00800074 	movhi	r2,1
   11818:	108c3204 	addi	r2,r2,12488
   1181c:	10800017 	ldw	r2,0(r2)
   11820:	1005003a 	cmpeq	r2,r2,zero
   11824:	1000061e 	bne	r2,zero,11840 <alt_get_errno+0x3c>
   11828:	00800074 	movhi	r2,1
   1182c:	108c3204 	addi	r2,r2,12488
   11830:	10800017 	ldw	r2,0(r2)
   11834:	103ee83a 	callr	r2
   11838:	e0bfff15 	stw	r2,-4(fp)
   1183c:	00000306 	br	1184c <alt_get_errno+0x48>
   11840:	00800074 	movhi	r2,1
   11844:	108ce804 	addi	r2,r2,13216
   11848:	e0bfff15 	stw	r2,-4(fp)
   1184c:	e0bfff17 	ldw	r2,-4(fp)
}
   11850:	e037883a 	mov	sp,fp
   11854:	dfc00117 	ldw	ra,4(sp)
   11858:	df000017 	ldw	fp,0(sp)
   1185c:	dec00204 	addi	sp,sp,8
   11860:	f800283a 	ret

00011864 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11864:	deffff04 	addi	sp,sp,-4
   11868:	df000015 	stw	fp,0(sp)
   1186c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11870:	e037883a 	mov	sp,fp
   11874:	df000017 	ldw	fp,0(sp)
   11878:	dec00104 	addi	sp,sp,4
   1187c:	f800283a 	ret

00011880 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11880:	defff804 	addi	sp,sp,-32
   11884:	dfc00715 	stw	ra,28(sp)
   11888:	df000615 	stw	fp,24(sp)
   1188c:	dc000515 	stw	r16,20(sp)
   11890:	df000504 	addi	fp,sp,20
   11894:	e13ffc15 	stw	r4,-16(fp)
   11898:	e17ffd15 	stw	r5,-12(fp)
   1189c:	e1bffe15 	stw	r6,-8(fp)
   118a0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   118a4:	e13ffd17 	ldw	r4,-12(fp)
   118a8:	e17ffe17 	ldw	r5,-8(fp)
   118ac:	e1bfff17 	ldw	r6,-4(fp)
   118b0:	0011ac80 	call	11ac8 <open>
   118b4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   118b8:	e0bffb17 	ldw	r2,-20(fp)
   118bc:	1004803a 	cmplt	r2,r2,zero
   118c0:	10001f1e 	bne	r2,zero,11940 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   118c4:	e13ffb17 	ldw	r4,-20(fp)
   118c8:	04000074 	movhi	r16,1
   118cc:	840bcb04 	addi	r16,r16,12076
   118d0:	01400304 	movi	r5,12
   118d4:	0010cc80 	call	10cc8 <__mulsi3>
   118d8:	1405883a 	add	r2,r2,r16
   118dc:	10c00017 	ldw	r3,0(r2)
   118e0:	e0bffc17 	ldw	r2,-16(fp)
   118e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   118e8:	e13ffb17 	ldw	r4,-20(fp)
   118ec:	04000074 	movhi	r16,1
   118f0:	840bcb04 	addi	r16,r16,12076
   118f4:	01400304 	movi	r5,12
   118f8:	0010cc80 	call	10cc8 <__mulsi3>
   118fc:	1405883a 	add	r2,r2,r16
   11900:	10800104 	addi	r2,r2,4
   11904:	10c00017 	ldw	r3,0(r2)
   11908:	e0bffc17 	ldw	r2,-16(fp)
   1190c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11910:	e13ffb17 	ldw	r4,-20(fp)
   11914:	04000074 	movhi	r16,1
   11918:	840bcb04 	addi	r16,r16,12076
   1191c:	01400304 	movi	r5,12
   11920:	0010cc80 	call	10cc8 <__mulsi3>
   11924:	1405883a 	add	r2,r2,r16
   11928:	10800204 	addi	r2,r2,8
   1192c:	10c00017 	ldw	r3,0(r2)
   11930:	e0bffc17 	ldw	r2,-16(fp)
   11934:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11938:	e13ffb17 	ldw	r4,-20(fp)
   1193c:	0011cb40 	call	11cb4 <alt_release_fd>
  }
} 
   11940:	e037883a 	mov	sp,fp
   11944:	dfc00217 	ldw	ra,8(sp)
   11948:	df000117 	ldw	fp,4(sp)
   1194c:	dc000017 	ldw	r16,0(sp)
   11950:	dec00304 	addi	sp,sp,12
   11954:	f800283a 	ret

00011958 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11958:	defffb04 	addi	sp,sp,-20
   1195c:	dfc00415 	stw	ra,16(sp)
   11960:	df000315 	stw	fp,12(sp)
   11964:	df000304 	addi	fp,sp,12
   11968:	e13ffd15 	stw	r4,-12(fp)
   1196c:	e17ffe15 	stw	r5,-8(fp)
   11970:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11974:	01000074 	movhi	r4,1
   11978:	210bce04 	addi	r4,r4,12088
   1197c:	e17ffd17 	ldw	r5,-12(fp)
   11980:	01800044 	movi	r6,1
   11984:	01c07fc4 	movi	r7,511
   11988:	00118800 	call	11880 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1198c:	01000074 	movhi	r4,1
   11990:	210bcb04 	addi	r4,r4,12076
   11994:	e17ffe17 	ldw	r5,-8(fp)
   11998:	000d883a 	mov	r6,zero
   1199c:	01c07fc4 	movi	r7,511
   119a0:	00118800 	call	11880 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   119a4:	01000074 	movhi	r4,1
   119a8:	210bd104 	addi	r4,r4,12100
   119ac:	e17fff17 	ldw	r5,-4(fp)
   119b0:	01800044 	movi	r6,1
   119b4:	01c07fc4 	movi	r7,511
   119b8:	00118800 	call	11880 <alt_open_fd>
}  
   119bc:	e037883a 	mov	sp,fp
   119c0:	dfc00117 	ldw	ra,4(sp)
   119c4:	df000017 	ldw	fp,0(sp)
   119c8:	dec00204 	addi	sp,sp,8
   119cc:	f800283a 	ret

000119d0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   119d0:	defffa04 	addi	sp,sp,-24
   119d4:	dfc00515 	stw	ra,20(sp)
   119d8:	df000415 	stw	fp,16(sp)
   119dc:	dc000315 	stw	r16,12(sp)
   119e0:	df000304 	addi	fp,sp,12
   119e4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   119e8:	e0bffe17 	ldw	r2,-8(fp)
   119ec:	10800217 	ldw	r2,8(r2)
   119f0:	10d00034 	orhi	r3,r2,16384
   119f4:	e0bffe17 	ldw	r2,-8(fp)
   119f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   119fc:	e03ffd15 	stw	zero,-12(fp)
   11a00:	00002306 	br	11a90 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11a04:	e13ffd17 	ldw	r4,-12(fp)
   11a08:	04000074 	movhi	r16,1
   11a0c:	840bcb04 	addi	r16,r16,12076
   11a10:	01400304 	movi	r5,12
   11a14:	0010cc80 	call	10cc8 <__mulsi3>
   11a18:	1405883a 	add	r2,r2,r16
   11a1c:	10c00017 	ldw	r3,0(r2)
   11a20:	e0bffe17 	ldw	r2,-8(fp)
   11a24:	10800017 	ldw	r2,0(r2)
   11a28:	1880161e 	bne	r3,r2,11a84 <alt_file_locked+0xb4>
   11a2c:	e13ffd17 	ldw	r4,-12(fp)
   11a30:	04000074 	movhi	r16,1
   11a34:	840bcb04 	addi	r16,r16,12076
   11a38:	01400304 	movi	r5,12
   11a3c:	0010cc80 	call	10cc8 <__mulsi3>
   11a40:	1405883a 	add	r2,r2,r16
   11a44:	10800204 	addi	r2,r2,8
   11a48:	10800017 	ldw	r2,0(r2)
   11a4c:	1004403a 	cmpge	r2,r2,zero
   11a50:	10000c1e 	bne	r2,zero,11a84 <alt_file_locked+0xb4>
   11a54:	e13ffd17 	ldw	r4,-12(fp)
   11a58:	01400304 	movi	r5,12
   11a5c:	0010cc80 	call	10cc8 <__mulsi3>
   11a60:	1007883a 	mov	r3,r2
   11a64:	00800074 	movhi	r2,1
   11a68:	108bcb04 	addi	r2,r2,12076
   11a6c:	1887883a 	add	r3,r3,r2
   11a70:	e0bffe17 	ldw	r2,-8(fp)
   11a74:	18800326 	beq	r3,r2,11a84 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11a78:	00bffcc4 	movi	r2,-13
   11a7c:	e0bfff15 	stw	r2,-4(fp)
   11a80:	00000a06 	br	11aac <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11a84:	e0bffd17 	ldw	r2,-12(fp)
   11a88:	10800044 	addi	r2,r2,1
   11a8c:	e0bffd15 	stw	r2,-12(fp)
   11a90:	00800074 	movhi	r2,1
   11a94:	108c3104 	addi	r2,r2,12484
   11a98:	10800017 	ldw	r2,0(r2)
   11a9c:	1007883a 	mov	r3,r2
   11aa0:	e0bffd17 	ldw	r2,-12(fp)
   11aa4:	18bfd72e 	bgeu	r3,r2,11a04 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11aa8:	e03fff15 	stw	zero,-4(fp)
   11aac:	e0bfff17 	ldw	r2,-4(fp)
}
   11ab0:	e037883a 	mov	sp,fp
   11ab4:	dfc00217 	ldw	ra,8(sp)
   11ab8:	df000117 	ldw	fp,4(sp)
   11abc:	dc000017 	ldw	r16,0(sp)
   11ac0:	dec00304 	addi	sp,sp,12
   11ac4:	f800283a 	ret

00011ac8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11ac8:	defff404 	addi	sp,sp,-48
   11acc:	dfc00b15 	stw	ra,44(sp)
   11ad0:	df000a15 	stw	fp,40(sp)
   11ad4:	df000a04 	addi	fp,sp,40
   11ad8:	e13ffb15 	stw	r4,-20(fp)
   11adc:	e17ffc15 	stw	r5,-16(fp)
   11ae0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11ae4:	00bfffc4 	movi	r2,-1
   11ae8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   11aec:	00bffb44 	movi	r2,-19
   11af0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   11af4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11af8:	e13ffb17 	ldw	r4,-20(fp)
   11afc:	01400074 	movhi	r5,1
   11b00:	294c2f04 	addi	r5,r5,12476
   11b04:	0011ed40 	call	11ed4 <alt_find_dev>
   11b08:	e0bffa15 	stw	r2,-24(fp)
   11b0c:	e0bffa17 	ldw	r2,-24(fp)
   11b10:	1004c03a 	cmpne	r2,r2,zero
   11b14:	1000051e 	bne	r2,zero,11b2c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11b18:	e13ffb17 	ldw	r4,-20(fp)
   11b1c:	0011f680 	call	11f68 <alt_find_file>
   11b20:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   11b24:	00800044 	movi	r2,1
   11b28:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11b2c:	e0bffa17 	ldw	r2,-24(fp)
   11b30:	1005003a 	cmpeq	r2,r2,zero
   11b34:	1000311e 	bne	r2,zero,11bfc <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11b38:	e13ffa17 	ldw	r4,-24(fp)
   11b3c:	00120880 	call	12088 <alt_get_fd>
   11b40:	e0bff815 	stw	r2,-32(fp)
   11b44:	e0bff817 	ldw	r2,-32(fp)
   11b48:	1004403a 	cmpge	r2,r2,zero
   11b4c:	1000031e 	bne	r2,zero,11b5c <open+0x94>
    {
      status = index;
   11b50:	e0bff817 	ldw	r2,-32(fp)
   11b54:	e0bff715 	stw	r2,-36(fp)
   11b58:	00002a06 	br	11c04 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   11b5c:	e13ff817 	ldw	r4,-32(fp)
   11b60:	01400304 	movi	r5,12
   11b64:	0010cc80 	call	10cc8 <__mulsi3>
   11b68:	1007883a 	mov	r3,r2
   11b6c:	00800074 	movhi	r2,1
   11b70:	108bcb04 	addi	r2,r2,12076
   11b74:	1885883a 	add	r2,r3,r2
   11b78:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11b7c:	e0fffc17 	ldw	r3,-16(fp)
   11b80:	00900034 	movhi	r2,16384
   11b84:	10bfffc4 	addi	r2,r2,-1
   11b88:	1886703a 	and	r3,r3,r2
   11b8c:	e0bff917 	ldw	r2,-28(fp)
   11b90:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11b94:	e0bff617 	ldw	r2,-40(fp)
   11b98:	1004c03a 	cmpne	r2,r2,zero
   11b9c:	1000061e 	bne	r2,zero,11bb8 <open+0xf0>
   11ba0:	e13ff917 	ldw	r4,-28(fp)
   11ba4:	00119d00 	call	119d0 <alt_file_locked>
   11ba8:	e0bff715 	stw	r2,-36(fp)
   11bac:	e0bff717 	ldw	r2,-36(fp)
   11bb0:	1004803a 	cmplt	r2,r2,zero
   11bb4:	1000131e 	bne	r2,zero,11c04 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11bb8:	e0bffa17 	ldw	r2,-24(fp)
   11bbc:	10800317 	ldw	r2,12(r2)
   11bc0:	1005003a 	cmpeq	r2,r2,zero
   11bc4:	1000091e 	bne	r2,zero,11bec <open+0x124>
   11bc8:	e0bffa17 	ldw	r2,-24(fp)
   11bcc:	10800317 	ldw	r2,12(r2)
   11bd0:	e13ff917 	ldw	r4,-28(fp)
   11bd4:	e17ffb17 	ldw	r5,-20(fp)
   11bd8:	e1bffc17 	ldw	r6,-16(fp)
   11bdc:	e1fffd17 	ldw	r7,-12(fp)
   11be0:	103ee83a 	callr	r2
   11be4:	e0bfff15 	stw	r2,-4(fp)
   11be8:	00000106 	br	11bf0 <open+0x128>
   11bec:	e03fff15 	stw	zero,-4(fp)
   11bf0:	e0bfff17 	ldw	r2,-4(fp)
   11bf4:	e0bff715 	stw	r2,-36(fp)
   11bf8:	00000206 	br	11c04 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11bfc:	00bffb44 	movi	r2,-19
   11c00:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11c04:	e0bff717 	ldw	r2,-36(fp)
   11c08:	1004403a 	cmpge	r2,r2,zero
   11c0c:	1000091e 	bne	r2,zero,11c34 <open+0x16c>
  {
    alt_release_fd (index);  
   11c10:	e13ff817 	ldw	r4,-32(fp)
   11c14:	0011cb40 	call	11cb4 <alt_release_fd>
    ALT_ERRNO = -status;
   11c18:	0011c540 	call	11c54 <alt_get_errno>
   11c1c:	e0fff717 	ldw	r3,-36(fp)
   11c20:	00c7c83a 	sub	r3,zero,r3
   11c24:	10c00015 	stw	r3,0(r2)
    return -1;
   11c28:	00bfffc4 	movi	r2,-1
   11c2c:	e0bffe15 	stw	r2,-8(fp)
   11c30:	00000206 	br	11c3c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   11c34:	e0bff817 	ldw	r2,-32(fp)
   11c38:	e0bffe15 	stw	r2,-8(fp)
   11c3c:	e0bffe17 	ldw	r2,-8(fp)
}
   11c40:	e037883a 	mov	sp,fp
   11c44:	dfc00117 	ldw	ra,4(sp)
   11c48:	df000017 	ldw	fp,0(sp)
   11c4c:	dec00204 	addi	sp,sp,8
   11c50:	f800283a 	ret

00011c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11c54:	defffd04 	addi	sp,sp,-12
   11c58:	dfc00215 	stw	ra,8(sp)
   11c5c:	df000115 	stw	fp,4(sp)
   11c60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11c64:	00800074 	movhi	r2,1
   11c68:	108c3204 	addi	r2,r2,12488
   11c6c:	10800017 	ldw	r2,0(r2)
   11c70:	1005003a 	cmpeq	r2,r2,zero
   11c74:	1000061e 	bne	r2,zero,11c90 <alt_get_errno+0x3c>
   11c78:	00800074 	movhi	r2,1
   11c7c:	108c3204 	addi	r2,r2,12488
   11c80:	10800017 	ldw	r2,0(r2)
   11c84:	103ee83a 	callr	r2
   11c88:	e0bfff15 	stw	r2,-4(fp)
   11c8c:	00000306 	br	11c9c <alt_get_errno+0x48>
   11c90:	00800074 	movhi	r2,1
   11c94:	108ce804 	addi	r2,r2,13216
   11c98:	e0bfff15 	stw	r2,-4(fp)
   11c9c:	e0bfff17 	ldw	r2,-4(fp)
}
   11ca0:	e037883a 	mov	sp,fp
   11ca4:	dfc00117 	ldw	ra,4(sp)
   11ca8:	df000017 	ldw	fp,0(sp)
   11cac:	dec00204 	addi	sp,sp,8
   11cb0:	f800283a 	ret

00011cb4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11cb4:	defffc04 	addi	sp,sp,-16
   11cb8:	dfc00315 	stw	ra,12(sp)
   11cbc:	df000215 	stw	fp,8(sp)
   11cc0:	dc000115 	stw	r16,4(sp)
   11cc4:	df000104 	addi	fp,sp,4
   11cc8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   11ccc:	e0bfff17 	ldw	r2,-4(fp)
   11cd0:	108000d0 	cmplti	r2,r2,3
   11cd4:	10000f1e 	bne	r2,zero,11d14 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   11cd8:	e13fff17 	ldw	r4,-4(fp)
   11cdc:	04000074 	movhi	r16,1
   11ce0:	840bcb04 	addi	r16,r16,12076
   11ce4:	01400304 	movi	r5,12
   11ce8:	0010cc80 	call	10cc8 <__mulsi3>
   11cec:	1405883a 	add	r2,r2,r16
   11cf0:	10800204 	addi	r2,r2,8
   11cf4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   11cf8:	e13fff17 	ldw	r4,-4(fp)
   11cfc:	04000074 	movhi	r16,1
   11d00:	840bcb04 	addi	r16,r16,12076
   11d04:	01400304 	movi	r5,12
   11d08:	0010cc80 	call	10cc8 <__mulsi3>
   11d0c:	1405883a 	add	r2,r2,r16
   11d10:	10000015 	stw	zero,0(r2)
  }
}
   11d14:	e037883a 	mov	sp,fp
   11d18:	dfc00217 	ldw	ra,8(sp)
   11d1c:	df000117 	ldw	fp,4(sp)
   11d20:	dc000017 	ldw	r16,0(sp)
   11d24:	dec00304 	addi	sp,sp,12
   11d28:	f800283a 	ret

00011d2c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   11d2c:	deffff04 	addi	sp,sp,-4
   11d30:	df000015 	stw	fp,0(sp)
   11d34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11d38:	000170fa 	wrctl	ienable,zero
}
   11d3c:	e037883a 	mov	sp,fp
   11d40:	df000017 	ldw	fp,0(sp)
   11d44:	dec00104 	addi	sp,sp,4
   11d48:	f800283a 	ret

00011d4c <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
   11d4c:	defff904 	addi	sp,sp,-28
   11d50:	df000615 	stw	fp,24(sp)
   11d54:	df000604 	addi	fp,sp,24
   11d58:	e13ffe15 	stw	r4,-8(fp)
   11d5c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
   11d60:	e03ffa15 	stw	zero,-24(fp)
   11d64:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
   11d68:	e0bffe17 	ldw	r2,-8(fp)
   11d6c:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
   11d70:	e0bfff17 	ldw	r2,-4(fp)
   11d74:	1004913a 	slli	r2,r2,4
   11d78:	1007883a 	mov	r3,r2
   11d7c:	e0bffe17 	ldw	r2,-8(fp)
   11d80:	1885883a 	add	r2,r3,r2
   11d84:	10800037 	ldwio	r2,0(r2)
   11d88:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
   11d8c:	e0bfff17 	ldw	r2,-4(fp)
   11d90:	1004913a 	slli	r2,r2,4
   11d94:	1007883a 	mov	r3,r2
   11d98:	e0bffe17 	ldw	r2,-8(fp)
   11d9c:	1885883a 	add	r2,r3,r2
   11da0:	10800104 	addi	r2,r2,4
   11da4:	10800037 	ldwio	r2,0(r2)
   11da8:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   11dac:	e0bffc17 	ldw	r2,-16(fp)
   11db0:	0007883a 	mov	r3,zero
   11db4:	100a983a 	sll	r5,r2,zero
   11db8:	0009883a 	mov	r4,zero
   11dbc:	e0bffd17 	ldw	r2,-12(fp)
   11dc0:	0007883a 	mov	r3,zero
   11dc4:	208cb03a 	or	r6,r4,r2
   11dc8:	e1bffa15 	stw	r6,-24(fp)
   11dcc:	28c4b03a 	or	r2,r5,r3
   11dd0:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
   11dd4:	e17ffa17 	ldw	r5,-24(fp)
   11dd8:	e1bffb17 	ldw	r6,-20(fp)
   11ddc:	2807883a 	mov	r3,r5
   11de0:	3009883a 	mov	r4,r6
}
   11de4:	1805883a 	mov	r2,r3
   11de8:	2007883a 	mov	r3,r4
   11dec:	e037883a 	mov	sp,fp
   11df0:	df000017 	ldw	fp,0(sp)
   11df4:	dec00104 	addi	sp,sp,4
   11df8:	f800283a 	ret

00011dfc <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
   11dfc:	defffd04 	addi	sp,sp,-12
   11e00:	dfc00215 	stw	ra,8(sp)
   11e04:	df000115 	stw	fp,4(sp)
   11e08:	df000104 	addi	fp,sp,4
   11e0c:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
   11e10:	e13fff17 	ldw	r4,-4(fp)
   11e14:	000b883a 	mov	r5,zero
   11e18:	0011d4c0 	call	11d4c <perf_get_section_time>
   11e1c:	1009883a 	mov	r4,r2
   11e20:	180b883a 	mov	r5,r3
   11e24:	200d883a 	mov	r6,r4
   11e28:	280f883a 	mov	r7,r5
   11e2c:	3007883a 	mov	r3,r6
   11e30:	3809883a 	mov	r4,r7
}
   11e34:	1805883a 	mov	r2,r3
   11e38:	2007883a 	mov	r3,r4
   11e3c:	e037883a 	mov	sp,fp
   11e40:	dfc00117 	ldw	ra,4(sp)
   11e44:	df000017 	ldw	fp,0(sp)
   11e48:	dec00204 	addi	sp,sp,8
   11e4c:	f800283a 	ret

00011e50 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
   11e50:	defffd04 	addi	sp,sp,-12
   11e54:	df000215 	stw	fp,8(sp)
   11e58:	df000204 	addi	fp,sp,8
   11e5c:	e13ffe15 	stw	r4,-8(fp)
   11e60:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
   11e64:	e0bfff17 	ldw	r2,-4(fp)
   11e68:	1004913a 	slli	r2,r2,4
   11e6c:	1007883a 	mov	r3,r2
   11e70:	e0bffe17 	ldw	r2,-8(fp)
   11e74:	1885883a 	add	r2,r3,r2
   11e78:	10800204 	addi	r2,r2,8
   11e7c:	10800037 	ldwio	r2,0(r2)
}
   11e80:	e037883a 	mov	sp,fp
   11e84:	df000017 	ldw	fp,0(sp)
   11e88:	dec00104 	addi	sp,sp,4
   11e8c:	f800283a 	ret

00011e90 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
   11e90:	deffff04 	addi	sp,sp,-4
   11e94:	df000015 	stw	fp,0(sp)
   11e98:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
   11e9c:	0005883a 	mov	r2,zero
#else
    return (void*)0;
#endif
}
   11ea0:	e037883a 	mov	sp,fp
   11ea4:	df000017 	ldw	fp,0(sp)
   11ea8:	dec00104 	addi	sp,sp,4
   11eac:	f800283a 	ret

00011eb0 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
   11eb0:	deffff04 	addi	sp,sp,-4
   11eb4:	df000015 	stw	fp,0(sp)
   11eb8:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
   11ebc:	0080bef4 	movhi	r2,763
   11ec0:	10bc2004 	addi	r2,r2,-3968
}
   11ec4:	e037883a 	mov	sp,fp
   11ec8:	df000017 	ldw	fp,0(sp)
   11ecc:	dec00104 	addi	sp,sp,4
   11ed0:	f800283a 	ret

00011ed4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11ed4:	defff904 	addi	sp,sp,-28
   11ed8:	dfc00615 	stw	ra,24(sp)
   11edc:	df000515 	stw	fp,20(sp)
   11ee0:	df000504 	addi	fp,sp,20
   11ee4:	e13ffd15 	stw	r4,-12(fp)
   11ee8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11eec:	e0bffe17 	ldw	r2,-8(fp)
   11ef0:	10800017 	ldw	r2,0(r2)
   11ef4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11ef8:	e13ffd17 	ldw	r4,-12(fp)
   11efc:	00102e80 	call	102e8 <strlen>
   11f00:	10800044 	addi	r2,r2,1
   11f04:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11f08:	00000d06 	br	11f40 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11f0c:	e0bffc17 	ldw	r2,-16(fp)
   11f10:	11000217 	ldw	r4,8(r2)
   11f14:	e1bffb17 	ldw	r6,-20(fp)
   11f18:	e17ffd17 	ldw	r5,-12(fp)
   11f1c:	00121780 	call	12178 <memcmp>
   11f20:	1004c03a 	cmpne	r2,r2,zero
   11f24:	1000031e 	bne	r2,zero,11f34 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11f28:	e0bffc17 	ldw	r2,-16(fp)
   11f2c:	e0bfff15 	stw	r2,-4(fp)
   11f30:	00000706 	br	11f50 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11f34:	e0bffc17 	ldw	r2,-16(fp)
   11f38:	10800017 	ldw	r2,0(r2)
   11f3c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11f40:	e0fffe17 	ldw	r3,-8(fp)
   11f44:	e0bffc17 	ldw	r2,-16(fp)
   11f48:	10fff01e 	bne	r2,r3,11f0c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11f4c:	e03fff15 	stw	zero,-4(fp)
   11f50:	e0bfff17 	ldw	r2,-4(fp)
}
   11f54:	e037883a 	mov	sp,fp
   11f58:	dfc00117 	ldw	ra,4(sp)
   11f5c:	df000017 	ldw	fp,0(sp)
   11f60:	dec00204 	addi	sp,sp,8
   11f64:	f800283a 	ret

00011f68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11f68:	defffa04 	addi	sp,sp,-24
   11f6c:	dfc00515 	stw	ra,20(sp)
   11f70:	df000415 	stw	fp,16(sp)
   11f74:	df000404 	addi	fp,sp,16
   11f78:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11f7c:	00800074 	movhi	r2,1
   11f80:	108c2d04 	addi	r2,r2,12468
   11f84:	10800017 	ldw	r2,0(r2)
   11f88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11f8c:	00003306 	br	1205c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   11f90:	e0bffd17 	ldw	r2,-12(fp)
   11f94:	11000217 	ldw	r4,8(r2)
   11f98:	00102e80 	call	102e8 <strlen>
   11f9c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   11fa0:	e0bffd17 	ldw	r2,-12(fp)
   11fa4:	10c00217 	ldw	r3,8(r2)
   11fa8:	e0bffc17 	ldw	r2,-16(fp)
   11fac:	1885883a 	add	r2,r3,r2
   11fb0:	10bfffc4 	addi	r2,r2,-1
   11fb4:	10800003 	ldbu	r2,0(r2)
   11fb8:	10803fcc 	andi	r2,r2,255
   11fbc:	1080201c 	xori	r2,r2,128
   11fc0:	10bfe004 	addi	r2,r2,-128
   11fc4:	10800bd8 	cmpnei	r2,r2,47
   11fc8:	1000031e 	bne	r2,zero,11fd8 <alt_find_file+0x70>
    {
      len -= 1;
   11fcc:	e0bffc17 	ldw	r2,-16(fp)
   11fd0:	10bfffc4 	addi	r2,r2,-1
   11fd4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11fd8:	e0bffc17 	ldw	r2,-16(fp)
   11fdc:	1007883a 	mov	r3,r2
   11fe0:	e0bffe17 	ldw	r2,-8(fp)
   11fe4:	1885883a 	add	r2,r3,r2
   11fe8:	10800003 	ldbu	r2,0(r2)
   11fec:	10803fcc 	andi	r2,r2,255
   11ff0:	1080201c 	xori	r2,r2,128
   11ff4:	10bfe004 	addi	r2,r2,-128
   11ff8:	10800be0 	cmpeqi	r2,r2,47
   11ffc:	10000a1e 	bne	r2,zero,12028 <alt_find_file+0xc0>
   12000:	e0bffc17 	ldw	r2,-16(fp)
   12004:	1007883a 	mov	r3,r2
   12008:	e0bffe17 	ldw	r2,-8(fp)
   1200c:	1885883a 	add	r2,r3,r2
   12010:	10800003 	ldbu	r2,0(r2)
   12014:	10803fcc 	andi	r2,r2,255
   12018:	1080201c 	xori	r2,r2,128
   1201c:	10bfe004 	addi	r2,r2,-128
   12020:	1004c03a 	cmpne	r2,r2,zero
   12024:	10000a1e 	bne	r2,zero,12050 <alt_find_file+0xe8>
   12028:	e0bffd17 	ldw	r2,-12(fp)
   1202c:	11000217 	ldw	r4,8(r2)
   12030:	e1bffc17 	ldw	r6,-16(fp)
   12034:	e17ffe17 	ldw	r5,-8(fp)
   12038:	00121780 	call	12178 <memcmp>
   1203c:	1004c03a 	cmpne	r2,r2,zero
   12040:	1000031e 	bne	r2,zero,12050 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12044:	e0bffd17 	ldw	r2,-12(fp)
   12048:	e0bfff15 	stw	r2,-4(fp)
   1204c:	00000806 	br	12070 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   12050:	e0bffd17 	ldw	r2,-12(fp)
   12054:	10800017 	ldw	r2,0(r2)
   12058:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1205c:	00c00074 	movhi	r3,1
   12060:	18cc2d04 	addi	r3,r3,12468
   12064:	e0bffd17 	ldw	r2,-12(fp)
   12068:	10ffc91e 	bne	r2,r3,11f90 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1206c:	e03fff15 	stw	zero,-4(fp)
   12070:	e0bfff17 	ldw	r2,-4(fp)
}
   12074:	e037883a 	mov	sp,fp
   12078:	dfc00117 	ldw	ra,4(sp)
   1207c:	df000017 	ldw	fp,0(sp)
   12080:	dec00204 	addi	sp,sp,8
   12084:	f800283a 	ret

00012088 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12088:	defffa04 	addi	sp,sp,-24
   1208c:	dfc00515 	stw	ra,20(sp)
   12090:	df000415 	stw	fp,16(sp)
   12094:	dc000315 	stw	r16,12(sp)
   12098:	df000304 	addi	fp,sp,12
   1209c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   120a0:	00bffa04 	movi	r2,-24
   120a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   120a8:	e03ffe15 	stw	zero,-8(fp)
   120ac:	00002006 	br	12130 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   120b0:	e13ffe17 	ldw	r4,-8(fp)
   120b4:	04000074 	movhi	r16,1
   120b8:	840bcb04 	addi	r16,r16,12076
   120bc:	01400304 	movi	r5,12
   120c0:	0010cc80 	call	10cc8 <__mulsi3>
   120c4:	1405883a 	add	r2,r2,r16
   120c8:	10800017 	ldw	r2,0(r2)
   120cc:	1004c03a 	cmpne	r2,r2,zero
   120d0:	1000141e 	bne	r2,zero,12124 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   120d4:	e13ffe17 	ldw	r4,-8(fp)
   120d8:	04000074 	movhi	r16,1
   120dc:	840bcb04 	addi	r16,r16,12076
   120e0:	01400304 	movi	r5,12
   120e4:	0010cc80 	call	10cc8 <__mulsi3>
   120e8:	1407883a 	add	r3,r2,r16
   120ec:	e0bfff17 	ldw	r2,-4(fp)
   120f0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   120f4:	00800074 	movhi	r2,1
   120f8:	108c3104 	addi	r2,r2,12484
   120fc:	10c00017 	ldw	r3,0(r2)
   12100:	e0bffe17 	ldw	r2,-8(fp)
   12104:	1880040e 	bge	r3,r2,12118 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   12108:	00c00074 	movhi	r3,1
   1210c:	18cc3104 	addi	r3,r3,12484
   12110:	e0bffe17 	ldw	r2,-8(fp)
   12114:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   12118:	e0bffe17 	ldw	r2,-8(fp)
   1211c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   12120:	00000606 	br	1213c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12124:	e0bffe17 	ldw	r2,-8(fp)
   12128:	10800044 	addi	r2,r2,1
   1212c:	e0bffe15 	stw	r2,-8(fp)
   12130:	e0bffe17 	ldw	r2,-8(fp)
   12134:	10800810 	cmplti	r2,r2,32
   12138:	103fdd1e 	bne	r2,zero,120b0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1213c:	e0bffd17 	ldw	r2,-12(fp)
}
   12140:	e037883a 	mov	sp,fp
   12144:	dfc00217 	ldw	ra,8(sp)
   12148:	df000117 	ldw	fp,4(sp)
   1214c:	dc000017 	ldw	r16,0(sp)
   12150:	dec00304 	addi	sp,sp,12
   12154:	f800283a 	ret

00012158 <exit>:
   12158:	defffe04 	addi	sp,sp,-8
   1215c:	dc400015 	stw	r17,0(sp)
   12160:	000b883a 	mov	r5,zero
   12164:	2023883a 	mov	r17,r4
   12168:	dfc00115 	stw	ra,4(sp)
   1216c:	00121b80 	call	121b8 <__call_exitprocs>
   12170:	8809883a 	mov	r4,r17
   12174:	0012b440 	call	12b44 <_exit>

00012178 <memcmp>:
   12178:	31ffffc4 	addi	r7,r6,-1
   1217c:	3000061e 	bne	r6,zero,12198 <memcmp+0x20>
   12180:	00000a06 	br	121ac <memcmp+0x34>
   12184:	39ffffc4 	addi	r7,r7,-1
   12188:	00bfffc4 	movi	r2,-1
   1218c:	21000044 	addi	r4,r4,1
   12190:	29400044 	addi	r5,r5,1
   12194:	38800526 	beq	r7,r2,121ac <memcmp+0x34>
   12198:	20c00003 	ldbu	r3,0(r4)
   1219c:	28800003 	ldbu	r2,0(r5)
   121a0:	18bff826 	beq	r3,r2,12184 <memcmp+0xc>
   121a4:	1885c83a 	sub	r2,r3,r2
   121a8:	f800283a 	ret
   121ac:	0005883a 	mov	r2,zero
   121b0:	f800283a 	ret

000121b4 <register_fini>:
   121b4:	f800283a 	ret

000121b8 <__call_exitprocs>:
   121b8:	defff304 	addi	sp,sp,-52
   121bc:	00800074 	movhi	r2,1
   121c0:	108c2c04 	addi	r2,r2,12464
   121c4:	df000b15 	stw	fp,44(sp)
   121c8:	17000017 	ldw	fp,0(r2)
   121cc:	00800034 	movhi	r2,0
   121d0:	10800004 	addi	r2,r2,0
   121d4:	1005003a 	cmpeq	r2,r2,zero
   121d8:	d8800215 	stw	r2,8(sp)
   121dc:	e0800c04 	addi	r2,fp,48
   121e0:	dd800915 	stw	r22,36(sp)
   121e4:	dd400815 	stw	r21,32(sp)
   121e8:	dfc00c15 	stw	ra,48(sp)
   121ec:	ddc00a15 	stw	r23,40(sp)
   121f0:	dd000715 	stw	r20,28(sp)
   121f4:	dcc00615 	stw	r19,24(sp)
   121f8:	dc800515 	stw	r18,20(sp)
   121fc:	dc400415 	stw	r17,16(sp)
   12200:	dc000315 	stw	r16,12(sp)
   12204:	282d883a 	mov	r22,r5
   12208:	d9000115 	stw	r4,4(sp)
   1220c:	d8800015 	stw	r2,0(sp)
   12210:	282b003a 	cmpeq	r21,r5,zero
   12214:	e4400c17 	ldw	r17,48(fp)
   12218:	88001226 	beq	r17,zero,12264 <__call_exitprocs+0xac>
   1221c:	ddc00017 	ldw	r23,0(sp)
   12220:	88800117 	ldw	r2,4(r17)
   12224:	8c802217 	ldw	r18,136(r17)
   12228:	143fffc4 	addi	r16,r2,-1
   1222c:	80000b16 	blt	r16,zero,1225c <__call_exitprocs+0xa4>
   12230:	9027003a 	cmpeq	r19,r18,zero
   12234:	a800171e 	bne	r21,zero,12294 <__call_exitprocs+0xdc>
   12238:	9800051e 	bne	r19,zero,12250 <__call_exitprocs+0x98>
   1223c:	8409883a 	add	r4,r16,r16
   12240:	2105883a 	add	r2,r4,r4
   12244:	1485883a 	add	r2,r2,r18
   12248:	10c02017 	ldw	r3,128(r2)
   1224c:	b0c01226 	beq	r22,r3,12298 <__call_exitprocs+0xe0>
   12250:	843fffc4 	addi	r16,r16,-1
   12254:	00bfffc4 	movi	r2,-1
   12258:	80bff61e 	bne	r16,r2,12234 <__call_exitprocs+0x7c>
   1225c:	d8800217 	ldw	r2,8(sp)
   12260:	10003226 	beq	r2,zero,1232c <__call_exitprocs+0x174>
   12264:	dfc00c17 	ldw	ra,48(sp)
   12268:	df000b17 	ldw	fp,44(sp)
   1226c:	ddc00a17 	ldw	r23,40(sp)
   12270:	dd800917 	ldw	r22,36(sp)
   12274:	dd400817 	ldw	r21,32(sp)
   12278:	dd000717 	ldw	r20,28(sp)
   1227c:	dcc00617 	ldw	r19,24(sp)
   12280:	dc800517 	ldw	r18,20(sp)
   12284:	dc400417 	ldw	r17,16(sp)
   12288:	dc000317 	ldw	r16,12(sp)
   1228c:	dec00d04 	addi	sp,sp,52
   12290:	f800283a 	ret
   12294:	8409883a 	add	r4,r16,r16
   12298:	88c00117 	ldw	r3,4(r17)
   1229c:	2105883a 	add	r2,r4,r4
   122a0:	1445883a 	add	r2,r2,r17
   122a4:	18ffffc4 	addi	r3,r3,-1
   122a8:	11800217 	ldw	r6,8(r2)
   122ac:	1c001826 	beq	r3,r16,12310 <__call_exitprocs+0x158>
   122b0:	10000215 	stw	zero,8(r2)
   122b4:	303fe626 	beq	r6,zero,12250 <__call_exitprocs+0x98>
   122b8:	8d000117 	ldw	r20,4(r17)
   122bc:	9800121e 	bne	r19,zero,12308 <__call_exitprocs+0x150>
   122c0:	00c00044 	movi	r3,1
   122c4:	1c06983a 	sll	r3,r3,r16
   122c8:	90804017 	ldw	r2,256(r18)
   122cc:	1884703a 	and	r2,r3,r2
   122d0:	10000d26 	beq	r2,zero,12308 <__call_exitprocs+0x150>
   122d4:	90804117 	ldw	r2,260(r18)
   122d8:	1884703a 	and	r2,r3,r2
   122dc:	10000e1e 	bne	r2,zero,12318 <__call_exitprocs+0x160>
   122e0:	2105883a 	add	r2,r4,r4
   122e4:	1485883a 	add	r2,r2,r18
   122e8:	11400017 	ldw	r5,0(r2)
   122ec:	d9000117 	ldw	r4,4(sp)
   122f0:	303ee83a 	callr	r6
   122f4:	88800117 	ldw	r2,4(r17)
   122f8:	a0bfc61e 	bne	r20,r2,12214 <__call_exitprocs+0x5c>
   122fc:	b8800017 	ldw	r2,0(r23)
   12300:	147fd326 	beq	r2,r17,12250 <__call_exitprocs+0x98>
   12304:	003fc306 	br	12214 <__call_exitprocs+0x5c>
   12308:	303ee83a 	callr	r6
   1230c:	003ff906 	br	122f4 <__call_exitprocs+0x13c>
   12310:	8c000115 	stw	r16,4(r17)
   12314:	003fe706 	br	122b4 <__call_exitprocs+0xfc>
   12318:	2105883a 	add	r2,r4,r4
   1231c:	1485883a 	add	r2,r2,r18
   12320:	11000017 	ldw	r4,0(r2)
   12324:	303ee83a 	callr	r6
   12328:	003ff206 	br	122f4 <__call_exitprocs+0x13c>
   1232c:	88800117 	ldw	r2,4(r17)
   12330:	10000b1e 	bne	r2,zero,12360 <__call_exitprocs+0x1a8>
   12334:	89000017 	ldw	r4,0(r17)
   12338:	20000a26 	beq	r4,zero,12364 <__call_exitprocs+0x1ac>
   1233c:	b9000015 	stw	r4,0(r23)
   12340:	90000226 	beq	r18,zero,1234c <__call_exitprocs+0x194>
   12344:	9009883a 	mov	r4,r18
   12348:	00000000 	call	0 <__alt_mem_ram-0x10000>
   1234c:	8809883a 	mov	r4,r17
   12350:	00000000 	call	0 <__alt_mem_ram-0x10000>
   12354:	bc400017 	ldw	r17,0(r23)
   12358:	883fb11e 	bne	r17,zero,12220 <__call_exitprocs+0x68>
   1235c:	003fc106 	br	12264 <__call_exitprocs+0xac>
   12360:	89000017 	ldw	r4,0(r17)
   12364:	882f883a 	mov	r23,r17
   12368:	2023883a 	mov	r17,r4
   1236c:	883fac1e 	bne	r17,zero,12220 <__call_exitprocs+0x68>
   12370:	003fbc06 	br	12264 <__call_exitprocs+0xac>

00012374 <__muldi3>:
   12374:	defff204 	addi	sp,sp,-56
   12378:	df000c15 	stw	fp,48(sp)
   1237c:	3038d43a 	srli	fp,r6,16
   12380:	dd000815 	stw	r20,32(sp)
   12384:	dc400515 	stw	r17,20(sp)
   12388:	2028d43a 	srli	r20,r4,16
   1238c:	247fffcc 	andi	r17,r4,65535
   12390:	dc000415 	stw	r16,16(sp)
   12394:	343fffcc 	andi	r16,r6,65535
   12398:	dcc00715 	stw	r19,28(sp)
   1239c:	d9000015 	stw	r4,0(sp)
   123a0:	2827883a 	mov	r19,r5
   123a4:	8809883a 	mov	r4,r17
   123a8:	d9400115 	stw	r5,4(sp)
   123ac:	800b883a 	mov	r5,r16
   123b0:	d9800215 	stw	r6,8(sp)
   123b4:	dfc00d15 	stw	ra,52(sp)
   123b8:	d9c00315 	stw	r7,12(sp)
   123bc:	dd800a15 	stw	r22,40(sp)
   123c0:	dd400915 	stw	r21,36(sp)
   123c4:	302d883a 	mov	r22,r6
   123c8:	ddc00b15 	stw	r23,44(sp)
   123cc:	dc800615 	stw	r18,24(sp)
   123d0:	0010cc80 	call	10cc8 <__mulsi3>
   123d4:	8809883a 	mov	r4,r17
   123d8:	e00b883a 	mov	r5,fp
   123dc:	102b883a 	mov	r21,r2
   123e0:	0010cc80 	call	10cc8 <__mulsi3>
   123e4:	800b883a 	mov	r5,r16
   123e8:	a009883a 	mov	r4,r20
   123ec:	1023883a 	mov	r17,r2
   123f0:	0010cc80 	call	10cc8 <__mulsi3>
   123f4:	a009883a 	mov	r4,r20
   123f8:	e00b883a 	mov	r5,fp
   123fc:	1021883a 	mov	r16,r2
   12400:	0010cc80 	call	10cc8 <__mulsi3>
   12404:	a8ffffcc 	andi	r3,r21,65535
   12408:	a82ad43a 	srli	r21,r21,16
   1240c:	8c23883a 	add	r17,r17,r16
   12410:	1011883a 	mov	r8,r2
   12414:	ac6b883a 	add	r21,r21,r17
   12418:	a804943a 	slli	r2,r21,16
   1241c:	b009883a 	mov	r4,r22
   12420:	980b883a 	mov	r5,r19
   12424:	10c7883a 	add	r3,r2,r3
   12428:	a812d43a 	srli	r9,r21,16
   1242c:	180d883a 	mov	r6,r3
   12430:	ac00022e 	bgeu	r21,r16,1243c <__muldi3+0xc8>
   12434:	00800074 	movhi	r2,1
   12438:	4091883a 	add	r8,r8,r2
   1243c:	4267883a 	add	r19,r8,r9
   12440:	302d883a 	mov	r22,r6
   12444:	0010cc80 	call	10cc8 <__mulsi3>
   12448:	d9400317 	ldw	r5,12(sp)
   1244c:	d9000017 	ldw	r4,0(sp)
   12450:	1023883a 	mov	r17,r2
   12454:	0010cc80 	call	10cc8 <__mulsi3>
   12458:	14cb883a 	add	r5,r2,r19
   1245c:	894b883a 	add	r5,r17,r5
   12460:	b005883a 	mov	r2,r22
   12464:	2807883a 	mov	r3,r5
   12468:	dfc00d17 	ldw	ra,52(sp)
   1246c:	df000c17 	ldw	fp,48(sp)
   12470:	ddc00b17 	ldw	r23,44(sp)
   12474:	dd800a17 	ldw	r22,40(sp)
   12478:	dd400917 	ldw	r21,36(sp)
   1247c:	dd000817 	ldw	r20,32(sp)
   12480:	dcc00717 	ldw	r19,28(sp)
   12484:	dc800617 	ldw	r18,24(sp)
   12488:	dc400517 	ldw	r17,20(sp)
   1248c:	dc000417 	ldw	r16,16(sp)
   12490:	dec00e04 	addi	sp,sp,56
   12494:	f800283a 	ret

00012498 <__udivdi3>:
   12498:	defff104 	addi	sp,sp,-60
   1249c:	0015883a 	mov	r10,zero
   124a0:	2005883a 	mov	r2,r4
   124a4:	3011883a 	mov	r8,r6
   124a8:	df000d15 	stw	fp,52(sp)
   124ac:	dd400a15 	stw	r21,40(sp)
   124b0:	dcc00815 	stw	r19,32(sp)
   124b4:	dfc00e15 	stw	ra,56(sp)
   124b8:	ddc00c15 	stw	r23,48(sp)
   124bc:	dd800b15 	stw	r22,44(sp)
   124c0:	dd000915 	stw	r20,36(sp)
   124c4:	dc800715 	stw	r18,28(sp)
   124c8:	dc400615 	stw	r17,24(sp)
   124cc:	dc000515 	stw	r16,20(sp)
   124d0:	da800315 	stw	r10,12(sp)
   124d4:	4027883a 	mov	r19,r8
   124d8:	1039883a 	mov	fp,r2
   124dc:	282b883a 	mov	r21,r5
   124e0:	da800415 	stw	r10,16(sp)
   124e4:	3800401e 	bne	r7,zero,125e8 <__udivdi3+0x150>
   124e8:	2a006536 	bltu	r5,r8,12680 <__udivdi3+0x1e8>
   124ec:	4000b526 	beq	r8,zero,127c4 <__udivdi3+0x32c>
   124f0:	00bfffd4 	movui	r2,65535
   124f4:	14c0ad36 	bltu	r2,r19,127ac <__udivdi3+0x314>
   124f8:	00803fc4 	movi	r2,255
   124fc:	14c15e36 	bltu	r2,r19,12a78 <__udivdi3+0x5e0>
   12500:	000b883a 	mov	r5,zero
   12504:	0005883a 	mov	r2,zero
   12508:	9884d83a 	srl	r2,r19,r2
   1250c:	01000074 	movhi	r4,1
   12510:	210b3e04 	addi	r4,r4,11512
   12514:	01800804 	movi	r6,32
   12518:	1105883a 	add	r2,r2,r4
   1251c:	10c00003 	ldbu	r3,0(r2)
   12520:	28c7883a 	add	r3,r5,r3
   12524:	30e9c83a 	sub	r20,r6,r3
   12528:	a0010a1e 	bne	r20,zero,12954 <__udivdi3+0x4bc>
   1252c:	982ed43a 	srli	r23,r19,16
   12530:	acebc83a 	sub	r21,r21,r19
   12534:	9dbfffcc 	andi	r22,r19,65535
   12538:	05000044 	movi	r20,1
   1253c:	a809883a 	mov	r4,r21
   12540:	b80b883a 	mov	r5,r23
   12544:	0010cb80 	call	10cb8 <__udivsi3>
   12548:	100b883a 	mov	r5,r2
   1254c:	b009883a 	mov	r4,r22
   12550:	1021883a 	mov	r16,r2
   12554:	0010cc80 	call	10cc8 <__mulsi3>
   12558:	a809883a 	mov	r4,r21
   1255c:	b80b883a 	mov	r5,r23
   12560:	1023883a 	mov	r17,r2
   12564:	0010cc00 	call	10cc0 <__umodsi3>
   12568:	1004943a 	slli	r2,r2,16
   1256c:	e006d43a 	srli	r3,fp,16
   12570:	10c4b03a 	or	r2,r2,r3
   12574:	1440042e 	bgeu	r2,r17,12588 <__udivdi3+0xf0>
   12578:	14c5883a 	add	r2,r2,r19
   1257c:	843fffc4 	addi	r16,r16,-1
   12580:	14c00136 	bltu	r2,r19,12588 <__udivdi3+0xf0>
   12584:	14415c36 	bltu	r2,r17,12af8 <__udivdi3+0x660>
   12588:	1463c83a 	sub	r17,r2,r17
   1258c:	8809883a 	mov	r4,r17
   12590:	b80b883a 	mov	r5,r23
   12594:	0010cb80 	call	10cb8 <__udivsi3>
   12598:	100b883a 	mov	r5,r2
   1259c:	b009883a 	mov	r4,r22
   125a0:	102b883a 	mov	r21,r2
   125a4:	0010cc80 	call	10cc8 <__mulsi3>
   125a8:	8809883a 	mov	r4,r17
   125ac:	b80b883a 	mov	r5,r23
   125b0:	1025883a 	mov	r18,r2
   125b4:	0010cc00 	call	10cc0 <__umodsi3>
   125b8:	1004943a 	slli	r2,r2,16
   125bc:	e0ffffcc 	andi	r3,fp,65535
   125c0:	10c4b03a 	or	r2,r2,r3
   125c4:	1480042e 	bgeu	r2,r18,125d8 <__udivdi3+0x140>
   125c8:	9885883a 	add	r2,r19,r2
   125cc:	ad7fffc4 	addi	r21,r21,-1
   125d0:	14c00136 	bltu	r2,r19,125d8 <__udivdi3+0x140>
   125d4:	14813c36 	bltu	r2,r18,12ac8 <__udivdi3+0x630>
   125d8:	8004943a 	slli	r2,r16,16
   125dc:	a009883a 	mov	r4,r20
   125e0:	a884b03a 	or	r2,r21,r2
   125e4:	00001506 	br	1263c <__udivdi3+0x1a4>
   125e8:	380d883a 	mov	r6,r7
   125ec:	29c06c36 	bltu	r5,r7,127a0 <__udivdi3+0x308>
   125f0:	00bfffd4 	movui	r2,65535
   125f4:	11c06436 	bltu	r2,r7,12788 <__udivdi3+0x2f0>
   125f8:	00803fc4 	movi	r2,255
   125fc:	11c11836 	bltu	r2,r7,12a60 <__udivdi3+0x5c8>
   12600:	000b883a 	mov	r5,zero
   12604:	0005883a 	mov	r2,zero
   12608:	3084d83a 	srl	r2,r6,r2
   1260c:	01000074 	movhi	r4,1
   12610:	210b3e04 	addi	r4,r4,11512
   12614:	01c00804 	movi	r7,32
   12618:	1105883a 	add	r2,r2,r4
   1261c:	10c00003 	ldbu	r3,0(r2)
   12620:	28c7883a 	add	r3,r5,r3
   12624:	38edc83a 	sub	r22,r7,r3
   12628:	b000731e 	bne	r22,zero,127f8 <__udivdi3+0x360>
   1262c:	35400136 	bltu	r6,r21,12634 <__udivdi3+0x19c>
   12630:	e4c05b36 	bltu	fp,r19,127a0 <__udivdi3+0x308>
   12634:	00800044 	movi	r2,1
   12638:	0009883a 	mov	r4,zero
   1263c:	d8800315 	stw	r2,12(sp)
   12640:	d9400317 	ldw	r5,12(sp)
   12644:	2007883a 	mov	r3,r4
   12648:	d9000415 	stw	r4,16(sp)
   1264c:	2805883a 	mov	r2,r5
   12650:	dfc00e17 	ldw	ra,56(sp)
   12654:	df000d17 	ldw	fp,52(sp)
   12658:	ddc00c17 	ldw	r23,48(sp)
   1265c:	dd800b17 	ldw	r22,44(sp)
   12660:	dd400a17 	ldw	r21,40(sp)
   12664:	dd000917 	ldw	r20,36(sp)
   12668:	dcc00817 	ldw	r19,32(sp)
   1266c:	dc800717 	ldw	r18,28(sp)
   12670:	dc400617 	ldw	r17,24(sp)
   12674:	dc000517 	ldw	r16,20(sp)
   12678:	dec00f04 	addi	sp,sp,60
   1267c:	f800283a 	ret
   12680:	00bfffd4 	movui	r2,65535
   12684:	12005636 	bltu	r2,r8,127e0 <__udivdi3+0x348>
   12688:	00803fc4 	movi	r2,255
   1268c:	12010036 	bltu	r2,r8,12a90 <__udivdi3+0x5f8>
   12690:	000b883a 	mov	r5,zero
   12694:	0005883a 	mov	r2,zero
   12698:	9884d83a 	srl	r2,r19,r2
   1269c:	01000074 	movhi	r4,1
   126a0:	210b3e04 	addi	r4,r4,11512
   126a4:	01800804 	movi	r6,32
   126a8:	1105883a 	add	r2,r2,r4
   126ac:	10c00003 	ldbu	r3,0(r2)
   126b0:	28c7883a 	add	r3,r5,r3
   126b4:	30cbc83a 	sub	r5,r6,r3
   126b8:	28000626 	beq	r5,zero,126d4 <__udivdi3+0x23c>
   126bc:	3145c83a 	sub	r2,r6,r5
   126c0:	e084d83a 	srl	r2,fp,r2
   126c4:	a946983a 	sll	r3,r21,r5
   126c8:	e178983a 	sll	fp,fp,r5
   126cc:	9966983a 	sll	r19,r19,r5
   126d0:	18aab03a 	or	r21,r3,r2
   126d4:	982ed43a 	srli	r23,r19,16
   126d8:	a809883a 	mov	r4,r21
   126dc:	9cbfffcc 	andi	r18,r19,65535
   126e0:	b80b883a 	mov	r5,r23
   126e4:	0010cb80 	call	10cb8 <__udivsi3>
   126e8:	100b883a 	mov	r5,r2
   126ec:	9009883a 	mov	r4,r18
   126f0:	1021883a 	mov	r16,r2
   126f4:	0010cc80 	call	10cc8 <__mulsi3>
   126f8:	a809883a 	mov	r4,r21
   126fc:	b80b883a 	mov	r5,r23
   12700:	1023883a 	mov	r17,r2
   12704:	0010cc00 	call	10cc0 <__umodsi3>
   12708:	1004943a 	slli	r2,r2,16
   1270c:	e006d43a 	srli	r3,fp,16
   12710:	10c4b03a 	or	r2,r2,r3
   12714:	1440042e 	bgeu	r2,r17,12728 <__udivdi3+0x290>
   12718:	14c5883a 	add	r2,r2,r19
   1271c:	843fffc4 	addi	r16,r16,-1
   12720:	14c00136 	bltu	r2,r19,12728 <__udivdi3+0x290>
   12724:	1440ea36 	bltu	r2,r17,12ad0 <__udivdi3+0x638>
   12728:	1463c83a 	sub	r17,r2,r17
   1272c:	8809883a 	mov	r4,r17
   12730:	b80b883a 	mov	r5,r23
   12734:	0010cb80 	call	10cb8 <__udivsi3>
   12738:	100b883a 	mov	r5,r2
   1273c:	9009883a 	mov	r4,r18
   12740:	102b883a 	mov	r21,r2
   12744:	0010cc80 	call	10cc8 <__mulsi3>
   12748:	8809883a 	mov	r4,r17
   1274c:	b80b883a 	mov	r5,r23
   12750:	1025883a 	mov	r18,r2
   12754:	0010cc00 	call	10cc0 <__umodsi3>
   12758:	1004943a 	slli	r2,r2,16
   1275c:	e0ffffcc 	andi	r3,fp,65535
   12760:	10c4b03a 	or	r2,r2,r3
   12764:	1480042e 	bgeu	r2,r18,12778 <__udivdi3+0x2e0>
   12768:	9885883a 	add	r2,r19,r2
   1276c:	ad7fffc4 	addi	r21,r21,-1
   12770:	14c00136 	bltu	r2,r19,12778 <__udivdi3+0x2e0>
   12774:	1480d936 	bltu	r2,r18,12adc <__udivdi3+0x644>
   12778:	8004943a 	slli	r2,r16,16
   1277c:	0009883a 	mov	r4,zero
   12780:	a884b03a 	or	r2,r21,r2
   12784:	003fad06 	br	1263c <__udivdi3+0x1a4>
   12788:	00804034 	movhi	r2,256
   1278c:	10bfffc4 	addi	r2,r2,-1
   12790:	11c0b636 	bltu	r2,r7,12a6c <__udivdi3+0x5d4>
   12794:	01400404 	movi	r5,16
   12798:	2805883a 	mov	r2,r5
   1279c:	003f9a06 	br	12608 <__udivdi3+0x170>
   127a0:	0005883a 	mov	r2,zero
   127a4:	0009883a 	mov	r4,zero
   127a8:	003fa406 	br	1263c <__udivdi3+0x1a4>
   127ac:	00804034 	movhi	r2,256
   127b0:	10bfffc4 	addi	r2,r2,-1
   127b4:	14c0b336 	bltu	r2,r19,12a84 <__udivdi3+0x5ec>
   127b8:	01400404 	movi	r5,16
   127bc:	2805883a 	mov	r2,r5
   127c0:	003f5106 	br	12508 <__udivdi3+0x70>
   127c4:	01000044 	movi	r4,1
   127c8:	000b883a 	mov	r5,zero
   127cc:	0010cb80 	call	10cb8 <__udivsi3>
   127d0:	1027883a 	mov	r19,r2
   127d4:	00bfffd4 	movui	r2,65535
   127d8:	14fff436 	bltu	r2,r19,127ac <__udivdi3+0x314>
   127dc:	003f4606 	br	124f8 <__udivdi3+0x60>
   127e0:	00804034 	movhi	r2,256
   127e4:	10bfffc4 	addi	r2,r2,-1
   127e8:	1200ac36 	bltu	r2,r8,12a9c <__udivdi3+0x604>
   127ec:	01400404 	movi	r5,16
   127f0:	2805883a 	mov	r2,r5
   127f4:	003fa806 	br	12698 <__udivdi3+0x200>
   127f8:	3d85c83a 	sub	r2,r7,r22
   127fc:	3588983a 	sll	r4,r6,r22
   12800:	9886d83a 	srl	r3,r19,r2
   12804:	a8a2d83a 	srl	r17,r21,r2
   12808:	e084d83a 	srl	r2,fp,r2
   1280c:	20eeb03a 	or	r23,r4,r3
   12810:	b824d43a 	srli	r18,r23,16
   12814:	ad86983a 	sll	r3,r21,r22
   12818:	8809883a 	mov	r4,r17
   1281c:	900b883a 	mov	r5,r18
   12820:	1886b03a 	or	r3,r3,r2
   12824:	d8c00115 	stw	r3,4(sp)
   12828:	bc3fffcc 	andi	r16,r23,65535
   1282c:	0010cb80 	call	10cb8 <__udivsi3>
   12830:	100b883a 	mov	r5,r2
   12834:	8009883a 	mov	r4,r16
   12838:	1029883a 	mov	r20,r2
   1283c:	0010cc80 	call	10cc8 <__mulsi3>
   12840:	900b883a 	mov	r5,r18
   12844:	8809883a 	mov	r4,r17
   12848:	102b883a 	mov	r21,r2
   1284c:	0010cc00 	call	10cc0 <__umodsi3>
   12850:	d9400117 	ldw	r5,4(sp)
   12854:	1004943a 	slli	r2,r2,16
   12858:	9da6983a 	sll	r19,r19,r22
   1285c:	2806d43a 	srli	r3,r5,16
   12860:	10c4b03a 	or	r2,r2,r3
   12864:	1540032e 	bgeu	r2,r21,12874 <__udivdi3+0x3dc>
   12868:	15c5883a 	add	r2,r2,r23
   1286c:	a53fffc4 	addi	r20,r20,-1
   12870:	15c0912e 	bgeu	r2,r23,12ab8 <__udivdi3+0x620>
   12874:	1563c83a 	sub	r17,r2,r21
   12878:	8809883a 	mov	r4,r17
   1287c:	900b883a 	mov	r5,r18
   12880:	0010cb80 	call	10cb8 <__udivsi3>
   12884:	100b883a 	mov	r5,r2
   12888:	8009883a 	mov	r4,r16
   1288c:	102b883a 	mov	r21,r2
   12890:	0010cc80 	call	10cc8 <__mulsi3>
   12894:	8809883a 	mov	r4,r17
   12898:	900b883a 	mov	r5,r18
   1289c:	1021883a 	mov	r16,r2
   128a0:	0010cc00 	call	10cc0 <__umodsi3>
   128a4:	da800117 	ldw	r10,4(sp)
   128a8:	1004943a 	slli	r2,r2,16
   128ac:	50ffffcc 	andi	r3,r10,65535
   128b0:	10c6b03a 	or	r3,r2,r3
   128b4:	1c00032e 	bgeu	r3,r16,128c4 <__udivdi3+0x42c>
   128b8:	1dc7883a 	add	r3,r3,r23
   128bc:	ad7fffc4 	addi	r21,r21,-1
   128c0:	1dc0792e 	bgeu	r3,r23,12aa8 <__udivdi3+0x610>
   128c4:	a004943a 	slli	r2,r20,16
   128c8:	982ed43a 	srli	r23,r19,16
   128cc:	9cffffcc 	andi	r19,r19,65535
   128d0:	a8a4b03a 	or	r18,r21,r2
   128d4:	947fffcc 	andi	r17,r18,65535
   128d8:	902ad43a 	srli	r21,r18,16
   128dc:	8809883a 	mov	r4,r17
   128e0:	980b883a 	mov	r5,r19
   128e4:	1c21c83a 	sub	r16,r3,r16
   128e8:	0010cc80 	call	10cc8 <__mulsi3>
   128ec:	8809883a 	mov	r4,r17
   128f0:	b80b883a 	mov	r5,r23
   128f4:	1029883a 	mov	r20,r2
   128f8:	0010cc80 	call	10cc8 <__mulsi3>
   128fc:	980b883a 	mov	r5,r19
   12900:	a809883a 	mov	r4,r21
   12904:	1023883a 	mov	r17,r2
   12908:	0010cc80 	call	10cc8 <__mulsi3>
   1290c:	a809883a 	mov	r4,r21
   12910:	b80b883a 	mov	r5,r23
   12914:	1027883a 	mov	r19,r2
   12918:	0010cc80 	call	10cc8 <__mulsi3>
   1291c:	1009883a 	mov	r4,r2
   12920:	a004d43a 	srli	r2,r20,16
   12924:	8ce3883a 	add	r17,r17,r19
   12928:	1447883a 	add	r3,r2,r17
   1292c:	1cc0022e 	bgeu	r3,r19,12938 <__udivdi3+0x4a0>
   12930:	00800074 	movhi	r2,1
   12934:	2089883a 	add	r4,r4,r2
   12938:	1804d43a 	srli	r2,r3,16
   1293c:	2085883a 	add	r2,r4,r2
   12940:	80804436 	bltu	r16,r2,12a54 <__udivdi3+0x5bc>
   12944:	80803e26 	beq	r16,r2,12a40 <__udivdi3+0x5a8>
   12948:	9005883a 	mov	r2,r18
   1294c:	0009883a 	mov	r4,zero
   12950:	003f3a06 	br	1263c <__udivdi3+0x1a4>
   12954:	9d26983a 	sll	r19,r19,r20
   12958:	3505c83a 	sub	r2,r6,r20
   1295c:	a8a2d83a 	srl	r17,r21,r2
   12960:	982ed43a 	srli	r23,r19,16
   12964:	e084d83a 	srl	r2,fp,r2
   12968:	ad06983a 	sll	r3,r21,r20
   1296c:	8809883a 	mov	r4,r17
   12970:	b80b883a 	mov	r5,r23
   12974:	1886b03a 	or	r3,r3,r2
   12978:	d8c00015 	stw	r3,0(sp)
   1297c:	9dbfffcc 	andi	r22,r19,65535
   12980:	0010cb80 	call	10cb8 <__udivsi3>
   12984:	100b883a 	mov	r5,r2
   12988:	b009883a 	mov	r4,r22
   1298c:	d8800215 	stw	r2,8(sp)
   12990:	0010cc80 	call	10cc8 <__mulsi3>
   12994:	8809883a 	mov	r4,r17
   12998:	b80b883a 	mov	r5,r23
   1299c:	102b883a 	mov	r21,r2
   129a0:	0010cc00 	call	10cc0 <__umodsi3>
   129a4:	d9000017 	ldw	r4,0(sp)
   129a8:	1004943a 	slli	r2,r2,16
   129ac:	2006d43a 	srli	r3,r4,16
   129b0:	10c4b03a 	or	r2,r2,r3
   129b4:	1540052e 	bgeu	r2,r21,129cc <__udivdi3+0x534>
   129b8:	d9400217 	ldw	r5,8(sp)
   129bc:	14c5883a 	add	r2,r2,r19
   129c0:	297fffc4 	addi	r5,r5,-1
   129c4:	d9400215 	stw	r5,8(sp)
   129c8:	14c0462e 	bgeu	r2,r19,12ae4 <__udivdi3+0x64c>
   129cc:	1563c83a 	sub	r17,r2,r21
   129d0:	8809883a 	mov	r4,r17
   129d4:	b80b883a 	mov	r5,r23
   129d8:	0010cb80 	call	10cb8 <__udivsi3>
   129dc:	100b883a 	mov	r5,r2
   129e0:	b009883a 	mov	r4,r22
   129e4:	1025883a 	mov	r18,r2
   129e8:	0010cc80 	call	10cc8 <__mulsi3>
   129ec:	8809883a 	mov	r4,r17
   129f0:	b80b883a 	mov	r5,r23
   129f4:	1021883a 	mov	r16,r2
   129f8:	0010cc00 	call	10cc0 <__umodsi3>
   129fc:	da800017 	ldw	r10,0(sp)
   12a00:	1004943a 	slli	r2,r2,16
   12a04:	50ffffcc 	andi	r3,r10,65535
   12a08:	10c6b03a 	or	r3,r2,r3
   12a0c:	1c00062e 	bgeu	r3,r16,12a28 <__udivdi3+0x590>
   12a10:	1cc7883a 	add	r3,r3,r19
   12a14:	94bfffc4 	addi	r18,r18,-1
   12a18:	1cc00336 	bltu	r3,r19,12a28 <__udivdi3+0x590>
   12a1c:	1c00022e 	bgeu	r3,r16,12a28 <__udivdi3+0x590>
   12a20:	94bfffc4 	addi	r18,r18,-1
   12a24:	1cc7883a 	add	r3,r3,r19
   12a28:	d9000217 	ldw	r4,8(sp)
   12a2c:	e538983a 	sll	fp,fp,r20
   12a30:	1c2bc83a 	sub	r21,r3,r16
   12a34:	2004943a 	slli	r2,r4,16
   12a38:	90a8b03a 	or	r20,r18,r2
   12a3c:	003ebf06 	br	1253c <__udivdi3+0xa4>
   12a40:	1804943a 	slli	r2,r3,16
   12a44:	e588983a 	sll	r4,fp,r22
   12a48:	a0ffffcc 	andi	r3,r20,65535
   12a4c:	10c5883a 	add	r2,r2,r3
   12a50:	20bfbd2e 	bgeu	r4,r2,12948 <__udivdi3+0x4b0>
   12a54:	90bfffc4 	addi	r2,r18,-1
   12a58:	0009883a 	mov	r4,zero
   12a5c:	003ef706 	br	1263c <__udivdi3+0x1a4>
   12a60:	01400204 	movi	r5,8
   12a64:	2805883a 	mov	r2,r5
   12a68:	003ee706 	br	12608 <__udivdi3+0x170>
   12a6c:	01400604 	movi	r5,24
   12a70:	2805883a 	mov	r2,r5
   12a74:	003ee406 	br	12608 <__udivdi3+0x170>
   12a78:	01400204 	movi	r5,8
   12a7c:	2805883a 	mov	r2,r5
   12a80:	003ea106 	br	12508 <__udivdi3+0x70>
   12a84:	01400604 	movi	r5,24
   12a88:	2805883a 	mov	r2,r5
   12a8c:	003e9e06 	br	12508 <__udivdi3+0x70>
   12a90:	01400204 	movi	r5,8
   12a94:	2805883a 	mov	r2,r5
   12a98:	003eff06 	br	12698 <__udivdi3+0x200>
   12a9c:	01400604 	movi	r5,24
   12aa0:	2805883a 	mov	r2,r5
   12aa4:	003efc06 	br	12698 <__udivdi3+0x200>
   12aa8:	1c3f862e 	bgeu	r3,r16,128c4 <__udivdi3+0x42c>
   12aac:	1dc7883a 	add	r3,r3,r23
   12ab0:	ad7fffc4 	addi	r21,r21,-1
   12ab4:	003f8306 	br	128c4 <__udivdi3+0x42c>
   12ab8:	157f6e2e 	bgeu	r2,r21,12874 <__udivdi3+0x3dc>
   12abc:	a53fffc4 	addi	r20,r20,-1
   12ac0:	15c5883a 	add	r2,r2,r23
   12ac4:	003f6b06 	br	12874 <__udivdi3+0x3dc>
   12ac8:	ad7fffc4 	addi	r21,r21,-1
   12acc:	003ec206 	br	125d8 <__udivdi3+0x140>
   12ad0:	843fffc4 	addi	r16,r16,-1
   12ad4:	14c5883a 	add	r2,r2,r19
   12ad8:	003f1306 	br	12728 <__udivdi3+0x290>
   12adc:	ad7fffc4 	addi	r21,r21,-1
   12ae0:	003f2506 	br	12778 <__udivdi3+0x2e0>
   12ae4:	157fb92e 	bgeu	r2,r21,129cc <__udivdi3+0x534>
   12ae8:	297fffc4 	addi	r5,r5,-1
   12aec:	14c5883a 	add	r2,r2,r19
   12af0:	d9400215 	stw	r5,8(sp)
   12af4:	003fb506 	br	129cc <__udivdi3+0x534>
   12af8:	843fffc4 	addi	r16,r16,-1
   12afc:	14c5883a 	add	r2,r2,r19
   12b00:	003ea106 	br	12588 <__udivdi3+0xf0>

00012b04 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   12b04:	defffd04 	addi	sp,sp,-12
   12b08:	df000215 	stw	fp,8(sp)
   12b0c:	df000204 	addi	fp,sp,8
   12b10:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   12b14:	e0bfff17 	ldw	r2,-4(fp)
   12b18:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12b1c:	e0bffe17 	ldw	r2,-8(fp)
   12b20:	1005003a 	cmpeq	r2,r2,zero
   12b24:	1000021e 	bne	r2,zero,12b30 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   12b28:	002af070 	cmpltui	zero,zero,43969
   12b2c:	00000106 	br	12b34 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   12b30:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   12b34:	e037883a 	mov	sp,fp
   12b38:	df000017 	ldw	fp,0(sp)
   12b3c:	dec00104 	addi	sp,sp,4
   12b40:	f800283a 	ret

00012b44 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12b44:	defffd04 	addi	sp,sp,-12
   12b48:	dfc00215 	stw	ra,8(sp)
   12b4c:	df000115 	stw	fp,4(sp)
   12b50:	df000104 	addi	fp,sp,4
   12b54:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   12b58:	e13fff17 	ldw	r4,-4(fp)
   12b5c:	0012b040 	call	12b04 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12b60:	003fff06 	br	12b60 <_exit+0x1c>
   12b64:	000121b4 	movhi	zero,1158
