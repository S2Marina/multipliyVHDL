
multiplicador.elf:     file format elf32-littlenios2
multiplicador.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002d30 memsz 0x00002d30 flags r-x
    LOAD off    0x00003d50 vaddr 0x00012d50 paddr 0x00013024 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x000042f8 vaddr 0x000132f8 paddr 0x000132f8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002ac8  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  00012ae8  00012ae8  00003ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  00012d50  00013024  00003d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  000132f8  000132f8  000042f8  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000004a8  00000000  00000000  00004050  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000070d  00000000  00000000  000044f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009998  00000000  00000000  00004c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002186  00000000  00000000  0000e59d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005f29  00000000  00000000  00010723  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000008a4  00000000  00000000  0001664c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000dcf  00000000  00000000  00016ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000023c5  00000000  00000000  00017cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0001a084  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000390  00000000  00000000  0001a098  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001bc1d  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0001bc20  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001bc24  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001bc25  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0001bc26  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0001bc2a  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0001bc2e  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  0001bc32  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  0001bc36  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  0001bc3a  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000005  00000000  00000000  0001bc3e  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000056  00000000  00000000  0001bc43  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0002f312  00000000  00000000  0001bc99  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .text	00000000 .text
00012ae8 l    d  .rodata	00000000 .rodata
00012d50 l    d  .rwdata	00000000 .rwdata
000132f8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000101c4 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00012d50 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010a58 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00010c5c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00010e48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012e30 l     O .rwdata	0000002c jtag
00010f18 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_close.c
00011584 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011600 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000116e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001175c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000118ac l     F .text	000000f8 alt_file_locked
00011b30 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00012134 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00012a84 l     F .text	00000040 alt_sim_halt
00010cc8 g     F .text	0000005c alt_main
00012090 g     F .text	00000090 _puts_r
00013024 g       *ABS*	00000000 __flash_rwdata_start
0001012c g     F .text	00000054 printf
00011d8c g     F .text	00000024 alt_get_cpu_freq
000111a8 g     F .text	000002dc perf_print_formatted_report
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000132f8 g     O .bss	00000004 errno
00013300 g     O .bss	00000004 alt_argv
0001b004 g       *ABS*	00000000 _gp
00012e84 g     O .rwdata	00000180 alt_fd_list
00011db0 g     F .text	00000094 alt_find_dev
00011834 g     F .text	00000078 alt_io_redirect
00012120 g     F .text	00000014 puts
00011000 g     F .text	00000104 altera_avalon_jtag_uart_read
00010180 g     F .text	00000044 _printf_r
00010b94 g     F .text	00000008 __udivsi3
00011d2c g     F .text	00000040 perf_get_num_starts
00010000 g       *ABS*	00000000 __alt_mem_ram
0001301c g     O .rwdata	00000004 alt_max_fd
00013008 g     O .rwdata	00000004 _global_impure_ptr
00013308 g       *ABS*	00000000 __bss_end
00012418 g     F .text	0000066c __udivdi3
00012e5c g     O .rwdata	00000028 alt_dev_null
000115e4 g     F .text	0000001c alt_dcache_flush_all
00013024 g       *ABS*	00000000 __ram_rwdata_end
00013014 g     O .rwdata	00000008 alt_dev_list
00010d24 g     F .text	00000124 write
00012d50 g       *ABS*	00000000 __ram_rodata_end
00010b9c g     F .text	00000008 __umodsi3
00013308 g       *ABS*	00000000 end
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00011104 g     F .text	000000a4 altera_avalon_jtag_uart_write
00010244 g     F .text	0000069c ___vfprintf_internal_r
00012138 g     F .text	000001bc __call_exitprocs
00010020 g     F .text	0000003c _start
00010edc g     F .text	0000003c alt_sys_init
00010ba4 g     F .text	00000038 __mulsi3
00012d50 g       *ABS*	00000000 __ram_rwdata_start
00012ae8 g       *ABS*	00000000 __ram_rodata_start
00010f50 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00011f64 g     F .text	000000d0 alt_get_fd
00011c28 g     F .text	000000b0 perf_get_section_time
00012054 g     F .text	0000003c memcmp
00013308 g       *ABS*	00000000 __alt_stack_base
00011cd8 g     F .text	00000054 perf_get_total_time
00011e44 g     F .text	00000120 alt_find_file
0001162c g     F .text	000000b4 alt_dev_llist_insert
00010904 g     F .text	000000bc __sfvwrite_small_dev
000132f8 g       *ABS*	00000000 __bss_start
0001005c g     F .text	000000d0 main
00013304 g     O .bss	00000004 alt_envp
00010fa8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00013020 g     O .rwdata	00000004 alt_errno
00010ad4 g     F .text	00000060 __divsi3
00012ae8 g       *ABS*	00000000 __flash_rodata_start
00010ea8 g     F .text	00000034 alt_irq_init
00011b90 g     F .text	00000078 alt_release_fd
00012c50 g     O .rodata	00000100 __clz_tab
000109e0 g     F .text	00000078 _write_r
00013004 g     O .rwdata	00000004 _impure_ptr
000132fc g     O .bss	00000004 alt_argc
0001300c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00013024 g       *ABS*	00000000 _edata
00013308 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00011d6c g     F .text	00000020 alt_get_performance_counter_base
00011c08 g     F .text	00000020 altera_nios2_qsys_irq_init
00012034 g     F .text	00000020 exit
00010b34 g     F .text	00000060 __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
00012ac4 g     F .text	00000020 _exit
000122f4 g     F .text	00000124 __muldi3
000109c0 g     F .text	00000020 strlen
000119a4 g     F .text	0000018c open
00011740 g     F .text	0000001c alt_icache_flush_all
000108e0 g     F .text	00000024 __vfprintf_internal
00011484 g     F .text	00000100 close
00010bdc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00010020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee80014 	ori	sp,sp,40960

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6ac0114 	ori	gp,gp,45060
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	108cbe14 	ori	r2,r2,13048

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18ccc214 	ori	r3,r3,13064

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0010bdc0 	call	10bdc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0010cc80 	call	10cc8 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <main>:
#include <stdio.h>
#include "system.h"
#include "altera_avalon_performance_counter.h"

int main()
{
   1005c:	defffa04 	addi	sp,sp,-24
   10060:	dfc00515 	stw	ra,20(sp)
   10064:	df000415 	stw	fp,16(sp)
   10068:	df000404 	addi	fp,sp,16
	int i, resp =0;
   1006c:	e03ffe15 	stw	zero,-8(fp)

	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
   10070:	0007883a 	mov	r3,zero
   10074:	00800044 	movi	r2,1
   10078:	18800035 	stwio	r2,0(r3)
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
   1007c:	00800104 	movi	r2,4
   10080:	10000035 	stwio	zero,0(r2)

	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
   10084:	00800504 	movi	r2,20
   10088:	10000035 	stwio	zero,0(r2)

	int M = 63;
   1008c:	00800fc4 	movi	r2,63
   10090:	e0bffd15 	stw	r2,-12(fp)
	int m = 63;
   10094:	00800fc4 	movi	r2,63
   10098:	e0bffc15 	stw	r2,-16(fp)

	for(i=1;i<=m;i++){
   1009c:	00800044 	movi	r2,1
   100a0:	e0bfff15 	stw	r2,-4(fp)
   100a4:	00000706 	br	100c4 <main+0x68>
		resp += M;
   100a8:	e0fffe17 	ldw	r3,-8(fp)
   100ac:	e0bffd17 	ldw	r2,-12(fp)
   100b0:	1885883a 	add	r2,r3,r2
   100b4:	e0bffe15 	stw	r2,-8(fp)
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

	int M = 63;
	int m = 63;

	for(i=1;i<=m;i++){
   100b8:	e0bfff17 	ldw	r2,-4(fp)
   100bc:	10800044 	addi	r2,r2,1
   100c0:	e0bfff15 	stw	r2,-4(fp)
   100c4:	e0ffff17 	ldw	r3,-4(fp)
   100c8:	e0bffc17 	ldw	r2,-16(fp)
   100cc:	10fff60e 	bge	r2,r3,100a8 <main+0x4c>
		resp += M;
	}

	PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
   100d0:	00800404 	movi	r2,16
   100d4:	10000035 	stwio	zero,0(r2)
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
   100d8:	0005883a 	mov	r2,zero
   100dc:	10000035 	stwio	zero,0(r2)

	printf("Resultado da multiplicacao %i x %i = %i\n", m, M, resp);
   100e0:	01000074 	movhi	r4,1
   100e4:	210aba04 	addi	r4,r4,10984
   100e8:	e17ffc17 	ldw	r5,-16(fp)
   100ec:	e1bffd17 	ldw	r6,-12(fp)
   100f0:	e1fffe17 	ldw	r7,-8(fp)
   100f4:	001012c0 	call	1012c <printf>

	perf_print_formatted_report((void*) PERFORMANCE_COUNTER_0_BASE, ALT_CPU_FREQ, 1, "TOTAL");
   100f8:	0009883a 	mov	r4,zero
   100fc:	0140bef4 	movhi	r5,763
   10100:	297c2004 	addi	r5,r5,-3968
   10104:	01800044 	movi	r6,1
   10108:	01c00074 	movhi	r7,1
   1010c:	39cac504 	addi	r7,r7,11028
   10110:	00111a80 	call	111a8 <perf_print_formatted_report>

	return 0;
   10114:	0005883a 	mov	r2,zero
}
   10118:	e037883a 	mov	sp,fp
   1011c:	dfc00117 	ldw	ra,4(sp)
   10120:	df000017 	ldw	fp,0(sp)
   10124:	dec00204 	addi	sp,sp,8
   10128:	f800283a 	ret

0001012c <printf>:
   1012c:	defffb04 	addi	sp,sp,-20
   10130:	dfc00115 	stw	ra,4(sp)
   10134:	d9400215 	stw	r5,8(sp)
   10138:	d9800315 	stw	r6,12(sp)
   1013c:	d9c00415 	stw	r7,16(sp)
   10140:	00800074 	movhi	r2,1
   10144:	108c0104 	addi	r2,r2,12292
   10148:	11400017 	ldw	r5,0(r2)
   1014c:	d8800204 	addi	r2,sp,8
   10150:	d8800015 	stw	r2,0(sp)
   10154:	29c00217 	ldw	r7,8(r5)
   10158:	100d883a 	mov	r6,r2
   1015c:	00800074 	movhi	r2,1
   10160:	10824104 	addi	r2,r2,2308
   10164:	200b883a 	mov	r5,r4
   10168:	38800115 	stw	r2,4(r7)
   1016c:	3809883a 	mov	r4,r7
   10170:	00108e00 	call	108e0 <__vfprintf_internal>
   10174:	dfc00117 	ldw	ra,4(sp)
   10178:	dec00504 	addi	sp,sp,20
   1017c:	f800283a 	ret

00010180 <_printf_r>:
   10180:	defffc04 	addi	sp,sp,-16
   10184:	dfc00115 	stw	ra,4(sp)
   10188:	d9800215 	stw	r6,8(sp)
   1018c:	d9c00315 	stw	r7,12(sp)
   10190:	22000217 	ldw	r8,8(r4)
   10194:	d8800204 	addi	r2,sp,8
   10198:	d8800015 	stw	r2,0(sp)
   1019c:	100f883a 	mov	r7,r2
   101a0:	00800074 	movhi	r2,1
   101a4:	10824104 	addi	r2,r2,2308
   101a8:	280d883a 	mov	r6,r5
   101ac:	40800115 	stw	r2,4(r8)
   101b0:	400b883a 	mov	r5,r8
   101b4:	00102440 	call	10244 <___vfprintf_internal_r>
   101b8:	dfc00117 	ldw	ra,4(sp)
   101bc:	dec00404 	addi	sp,sp,16
   101c0:	f800283a 	ret

000101c4 <print_repeat>:
   101c4:	defffb04 	addi	sp,sp,-20
   101c8:	dc800315 	stw	r18,12(sp)
   101cc:	dc400215 	stw	r17,8(sp)
   101d0:	dc000115 	stw	r16,4(sp)
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	2025883a 	mov	r18,r4
   101dc:	2823883a 	mov	r17,r5
   101e0:	3821883a 	mov	r16,r7
   101e4:	d9800005 	stb	r6,0(sp)
   101e8:	9009883a 	mov	r4,r18
   101ec:	880b883a 	mov	r5,r17
   101f0:	d80d883a 	mov	r6,sp
   101f4:	01c00044 	movi	r7,1
   101f8:	04000b0e 	bge	zero,r16,10228 <print_repeat+0x64>
   101fc:	88c00117 	ldw	r3,4(r17)
   10200:	843fffc4 	addi	r16,r16,-1
   10204:	183ee83a 	callr	r3
   10208:	103ff726 	beq	r2,zero,101e8 <print_repeat+0x24>
   1020c:	00bfffc4 	movi	r2,-1
   10210:	dfc00417 	ldw	ra,16(sp)
   10214:	dc800317 	ldw	r18,12(sp)
   10218:	dc400217 	ldw	r17,8(sp)
   1021c:	dc000117 	ldw	r16,4(sp)
   10220:	dec00504 	addi	sp,sp,20
   10224:	f800283a 	ret
   10228:	0005883a 	mov	r2,zero
   1022c:	dfc00417 	ldw	ra,16(sp)
   10230:	dc800317 	ldw	r18,12(sp)
   10234:	dc400217 	ldw	r17,8(sp)
   10238:	dc000117 	ldw	r16,4(sp)
   1023c:	dec00504 	addi	sp,sp,20
   10240:	f800283a 	ret

00010244 <___vfprintf_internal_r>:
   10244:	deffe304 	addi	sp,sp,-116
   10248:	df001b15 	stw	fp,108(sp)
   1024c:	ddc01a15 	stw	r23,104(sp)
   10250:	dd001715 	stw	r20,92(sp)
   10254:	dc801515 	stw	r18,84(sp)
   10258:	dc001315 	stw	r16,76(sp)
   1025c:	dfc01c15 	stw	ra,112(sp)
   10260:	dd801915 	stw	r22,100(sp)
   10264:	dd401815 	stw	r21,96(sp)
   10268:	dcc01615 	stw	r19,88(sp)
   1026c:	dc401415 	stw	r17,80(sp)
   10270:	d9001015 	stw	r4,64(sp)
   10274:	2829883a 	mov	r20,r5
   10278:	d9c01115 	stw	r7,68(sp)
   1027c:	3025883a 	mov	r18,r6
   10280:	0021883a 	mov	r16,zero
   10284:	d8000f15 	stw	zero,60(sp)
   10288:	d8000e15 	stw	zero,56(sp)
   1028c:	0039883a 	mov	fp,zero
   10290:	d8000915 	stw	zero,36(sp)
   10294:	d8000d15 	stw	zero,52(sp)
   10298:	d8000c15 	stw	zero,48(sp)
   1029c:	d8000b15 	stw	zero,44(sp)
   102a0:	002f883a 	mov	r23,zero
   102a4:	91400003 	ldbu	r5,0(r18)
   102a8:	01c00044 	movi	r7,1
   102ac:	94800044 	addi	r18,r18,1
   102b0:	29003fcc 	andi	r4,r5,255
   102b4:	2100201c 	xori	r4,r4,128
   102b8:	213fe004 	addi	r4,r4,-128
   102bc:	20001526 	beq	r4,zero,10314 <___vfprintf_internal_r+0xd0>
   102c0:	81c03526 	beq	r16,r7,10398 <___vfprintf_internal_r+0x154>
   102c4:	3c002016 	blt	r7,r16,10348 <___vfprintf_internal_r+0x104>
   102c8:	803ff61e 	bne	r16,zero,102a4 <___vfprintf_internal_r+0x60>
   102cc:	00800944 	movi	r2,37
   102d0:	2081501e 	bne	r4,r2,10814 <___vfprintf_internal_r+0x5d0>
   102d4:	073fffc4 	movi	fp,-1
   102d8:	00800284 	movi	r2,10
   102dc:	d9c00c15 	stw	r7,48(sp)
   102e0:	d8000f15 	stw	zero,60(sp)
   102e4:	d8000e15 	stw	zero,56(sp)
   102e8:	df000915 	stw	fp,36(sp)
   102ec:	d8800d15 	stw	r2,52(sp)
   102f0:	d8000b15 	stw	zero,44(sp)
   102f4:	91400003 	ldbu	r5,0(r18)
   102f8:	3821883a 	mov	r16,r7
   102fc:	94800044 	addi	r18,r18,1
   10300:	29003fcc 	andi	r4,r5,255
   10304:	2100201c 	xori	r4,r4,128
   10308:	213fe004 	addi	r4,r4,-128
   1030c:	01c00044 	movi	r7,1
   10310:	203feb1e 	bne	r4,zero,102c0 <___vfprintf_internal_r+0x7c>
   10314:	b805883a 	mov	r2,r23
   10318:	dfc01c17 	ldw	ra,112(sp)
   1031c:	df001b17 	ldw	fp,108(sp)
   10320:	ddc01a17 	ldw	r23,104(sp)
   10324:	dd801917 	ldw	r22,100(sp)
   10328:	dd401817 	ldw	r21,96(sp)
   1032c:	dd001717 	ldw	r20,92(sp)
   10330:	dcc01617 	ldw	r19,88(sp)
   10334:	dc801517 	ldw	r18,84(sp)
   10338:	dc401417 	ldw	r17,80(sp)
   1033c:	dc001317 	ldw	r16,76(sp)
   10340:	dec01d04 	addi	sp,sp,116
   10344:	f800283a 	ret
   10348:	00800084 	movi	r2,2
   1034c:	80801726 	beq	r16,r2,103ac <___vfprintf_internal_r+0x168>
   10350:	008000c4 	movi	r2,3
   10354:	80bfd31e 	bne	r16,r2,102a4 <___vfprintf_internal_r+0x60>
   10358:	2c7ff404 	addi	r17,r5,-48
   1035c:	88c03fcc 	andi	r3,r17,255
   10360:	00800244 	movi	r2,9
   10364:	10c02136 	bltu	r2,r3,103ec <___vfprintf_internal_r+0x1a8>
   10368:	d8c00917 	ldw	r3,36(sp)
   1036c:	18012716 	blt	r3,zero,1080c <___vfprintf_internal_r+0x5c8>
   10370:	d9000917 	ldw	r4,36(sp)
   10374:	01400284 	movi	r5,10
   10378:	0010ba40 	call	10ba4 <__mulsi3>
   1037c:	1007883a 	mov	r3,r2
   10380:	88803fcc 	andi	r2,r17,255
   10384:	1080201c 	xori	r2,r2,128
   10388:	10bfe004 	addi	r2,r2,-128
   1038c:	1887883a 	add	r3,r3,r2
   10390:	d8c00915 	stw	r3,36(sp)
   10394:	003fc306 	br	102a4 <___vfprintf_internal_r+0x60>
   10398:	00800c04 	movi	r2,48
   1039c:	2080b326 	beq	r4,r2,1066c <___vfprintf_internal_r+0x428>
   103a0:	00800944 	movi	r2,37
   103a4:	20812726 	beq	r4,r2,10844 <___vfprintf_internal_r+0x600>
   103a8:	04000084 	movi	r16,2
   103ac:	2c7ff404 	addi	r17,r5,-48
   103b0:	88c03fcc 	andi	r3,r17,255
   103b4:	00800244 	movi	r2,9
   103b8:	10c00a36 	bltu	r2,r3,103e4 <___vfprintf_internal_r+0x1a0>
   103bc:	e000b416 	blt	fp,zero,10690 <___vfprintf_internal_r+0x44c>
   103c0:	e009883a 	mov	r4,fp
   103c4:	01400284 	movi	r5,10
   103c8:	0010ba40 	call	10ba4 <__mulsi3>
   103cc:	1007883a 	mov	r3,r2
   103d0:	88803fcc 	andi	r2,r17,255
   103d4:	1080201c 	xori	r2,r2,128
   103d8:	10bfe004 	addi	r2,r2,-128
   103dc:	18b9883a 	add	fp,r3,r2
   103e0:	003fb006 	br	102a4 <___vfprintf_internal_r+0x60>
   103e4:	00800b84 	movi	r2,46
   103e8:	2080a326 	beq	r4,r2,10678 <___vfprintf_internal_r+0x434>
   103ec:	00801b04 	movi	r2,108
   103f0:	2080a326 	beq	r4,r2,10680 <___vfprintf_internal_r+0x43c>
   103f4:	d8c00917 	ldw	r3,36(sp)
   103f8:	1800a716 	blt	r3,zero,10698 <___vfprintf_internal_r+0x454>
   103fc:	d8000f15 	stw	zero,60(sp)
   10400:	28bfea04 	addi	r2,r5,-88
   10404:	10803fcc 	andi	r2,r2,255
   10408:	00c00804 	movi	r3,32
   1040c:	18802836 	bltu	r3,r2,104b0 <___vfprintf_internal_r+0x26c>
   10410:	1085883a 	add	r2,r2,r2
   10414:	1085883a 	add	r2,r2,r2
   10418:	00c00074 	movhi	r3,1
   1041c:	18c10b04 	addi	r3,r3,1068
   10420:	10c5883a 	add	r2,r2,r3
   10424:	11000017 	ldw	r4,0(r2)
   10428:	2000683a 	jmp	r4
   1042c:	000104b8 	rdprs	zero,zero,1042
   10430:	000104b0 	cmpltui	zero,zero,1042
   10434:	000104b0 	cmpltui	zero,zero,1042
   10438:	000104b0 	cmpltui	zero,zero,1042
   1043c:	000104b0 	cmpltui	zero,zero,1042
   10440:	000104b0 	cmpltui	zero,zero,1042
   10444:	000104b0 	cmpltui	zero,zero,1042
   10448:	000104b0 	cmpltui	zero,zero,1042
   1044c:	000104b0 	cmpltui	zero,zero,1042
   10450:	000104b0 	cmpltui	zero,zero,1042
   10454:	000104b0 	cmpltui	zero,zero,1042
   10458:	000106e4 	muli	zero,zero,1051
   1045c:	000104cc 	andi	zero,zero,1043
   10460:	000104b0 	cmpltui	zero,zero,1042
   10464:	000104b0 	cmpltui	zero,zero,1042
   10468:	000104b0 	cmpltui	zero,zero,1042
   1046c:	000104b0 	cmpltui	zero,zero,1042
   10470:	000104cc 	andi	zero,zero,1043
   10474:	000104b0 	cmpltui	zero,zero,1042
   10478:	000104b0 	cmpltui	zero,zero,1042
   1047c:	000104b0 	cmpltui	zero,zero,1042
   10480:	000104b0 	cmpltui	zero,zero,1042
   10484:	000104b0 	cmpltui	zero,zero,1042
   10488:	0001074c 	andi	zero,zero,1053
   1048c:	000104b0 	cmpltui	zero,zero,1042
   10490:	000104b0 	cmpltui	zero,zero,1042
   10494:	000104b0 	cmpltui	zero,zero,1042
   10498:	0001075c 	xori	zero,zero,1053
   1049c:	000104b0 	cmpltui	zero,zero,1042
   104a0:	00010630 	cmpltui	zero,zero,1048
   104a4:	000104b0 	cmpltui	zero,zero,1042
   104a8:	000104b0 	cmpltui	zero,zero,1042
   104ac:	00010628 	cmpgeui	zero,zero,1048
   104b0:	0021883a 	mov	r16,zero
   104b4:	003f7b06 	br	102a4 <___vfprintf_internal_r+0x60>
   104b8:	00c00404 	movi	r3,16
   104bc:	00800044 	movi	r2,1
   104c0:	d8c00d15 	stw	r3,52(sp)
   104c4:	d8000c15 	stw	zero,48(sp)
   104c8:	d8800b15 	stw	r2,44(sp)
   104cc:	d8c00e17 	ldw	r3,56(sp)
   104d0:	1805003a 	cmpeq	r2,r3,zero
   104d4:	10005a1e 	bne	r2,zero,10640 <___vfprintf_internal_r+0x3fc>
   104d8:	d8800c17 	ldw	r2,48(sp)
   104dc:	1000781e 	bne	r2,zero,106c0 <___vfprintf_internal_r+0x47c>
   104e0:	d8801117 	ldw	r2,68(sp)
   104e4:	d8000a15 	stw	zero,40(sp)
   104e8:	14400017 	ldw	r17,0(r2)
   104ec:	11c00104 	addi	r7,r2,4
   104f0:	d9c01115 	stw	r7,68(sp)
   104f4:	88005a26 	beq	r17,zero,10660 <___vfprintf_internal_r+0x41c>
   104f8:	d8c00b17 	ldw	r3,44(sp)
   104fc:	dcc00044 	addi	r19,sp,1
   10500:	05800244 	movi	r22,9
   10504:	182b003a 	cmpeq	r21,r3,zero
   10508:	dcc01215 	stw	r19,72(sp)
   1050c:	00000506 	br	10524 <___vfprintf_internal_r+0x2e0>
   10510:	21000c04 	addi	r4,r4,48
   10514:	99000005 	stb	r4,0(r19)
   10518:	9cc00044 	addi	r19,r19,1
   1051c:	80000f26 	beq	r16,zero,1055c <___vfprintf_internal_r+0x318>
   10520:	8023883a 	mov	r17,r16
   10524:	d9400d17 	ldw	r5,52(sp)
   10528:	8809883a 	mov	r4,r17
   1052c:	0010b940 	call	10b94 <__udivsi3>
   10530:	d9000d17 	ldw	r4,52(sp)
   10534:	100b883a 	mov	r5,r2
   10538:	1021883a 	mov	r16,r2
   1053c:	0010ba40 	call	10ba4 <__mulsi3>
   10540:	8889c83a 	sub	r4,r17,r2
   10544:	b13ff20e 	bge	r22,r4,10510 <___vfprintf_internal_r+0x2cc>
   10548:	a8009f1e 	bne	r21,zero,107c8 <___vfprintf_internal_r+0x584>
   1054c:	21000dc4 	addi	r4,r4,55
   10550:	99000005 	stb	r4,0(r19)
   10554:	9cc00044 	addi	r19,r19,1
   10558:	803ff11e 	bne	r16,zero,10520 <___vfprintf_internal_r+0x2dc>
   1055c:	d8801217 	ldw	r2,72(sp)
   10560:	98a3c83a 	sub	r17,r19,r2
   10564:	d8c00917 	ldw	r3,36(sp)
   10568:	1c4bc83a 	sub	r5,r3,r17
   1056c:	0140130e 	bge	zero,r5,105bc <___vfprintf_internal_r+0x378>
   10570:	d8c00044 	addi	r3,sp,1
   10574:	18800804 	addi	r2,r3,32
   10578:	9880102e 	bgeu	r19,r2,105bc <___vfprintf_internal_r+0x378>
   1057c:	00800c04 	movi	r2,48
   10580:	28ffffc4 	addi	r3,r5,-1
   10584:	98800005 	stb	r2,0(r19)
   10588:	99000044 	addi	r4,r19,1
   1058c:	00c0080e 	bge	zero,r3,105b0 <___vfprintf_internal_r+0x36c>
   10590:	d8c00044 	addi	r3,sp,1
   10594:	18800804 	addi	r2,r3,32
   10598:	2080052e 	bgeu	r4,r2,105b0 <___vfprintf_internal_r+0x36c>
   1059c:	00800c04 	movi	r2,48
   105a0:	20800005 	stb	r2,0(r4)
   105a4:	21000044 	addi	r4,r4,1
   105a8:	9945883a 	add	r2,r19,r5
   105ac:	20bff81e 	bne	r4,r2,10590 <___vfprintf_internal_r+0x34c>
   105b0:	d8801217 	ldw	r2,72(sp)
   105b4:	2027883a 	mov	r19,r4
   105b8:	20a3c83a 	sub	r17,r4,r2
   105bc:	d8c00a17 	ldw	r3,40(sp)
   105c0:	1c45883a 	add	r2,r3,r17
   105c4:	e0a1c83a 	sub	r16,fp,r2
   105c8:	d8800f17 	ldw	r2,60(sp)
   105cc:	10008026 	beq	r2,zero,107d0 <___vfprintf_internal_r+0x58c>
   105d0:	1805003a 	cmpeq	r2,r3,zero
   105d4:	1000ae26 	beq	r2,zero,10890 <___vfprintf_internal_r+0x64c>
   105d8:	0400a516 	blt	zero,r16,10870 <___vfprintf_internal_r+0x62c>
   105dc:	b805883a 	mov	r2,r23
   105e0:	0440950e 	bge	zero,r17,10838 <___vfprintf_internal_r+0x5f4>
   105e4:	102f883a 	mov	r23,r2
   105e8:	1461883a 	add	r16,r2,r17
   105ec:	00000206 	br	105f8 <___vfprintf_internal_r+0x3b4>
   105f0:	bdc00044 	addi	r23,r23,1
   105f4:	85ffae26 	beq	r16,r23,104b0 <___vfprintf_internal_r+0x26c>
   105f8:	9cffffc4 	addi	r19,r19,-1
   105fc:	98800003 	ldbu	r2,0(r19)
   10600:	a0c00117 	ldw	r3,4(r20)
   10604:	d9001017 	ldw	r4,64(sp)
   10608:	d8800005 	stb	r2,0(sp)
   1060c:	a00b883a 	mov	r5,r20
   10610:	d80d883a 	mov	r6,sp
   10614:	01c00044 	movi	r7,1
   10618:	183ee83a 	callr	r3
   1061c:	103ff426 	beq	r2,zero,105f0 <___vfprintf_internal_r+0x3ac>
   10620:	05ffffc4 	movi	r23,-1
   10624:	003f3b06 	br	10314 <___vfprintf_internal_r+0xd0>
   10628:	00c00404 	movi	r3,16
   1062c:	d8c00d15 	stw	r3,52(sp)
   10630:	d8000c15 	stw	zero,48(sp)
   10634:	d8c00e17 	ldw	r3,56(sp)
   10638:	1805003a 	cmpeq	r2,r3,zero
   1063c:	103fa626 	beq	r2,zero,104d8 <___vfprintf_internal_r+0x294>
   10640:	d8c00c17 	ldw	r3,48(sp)
   10644:	1800171e 	bne	r3,zero,106a4 <___vfprintf_internal_r+0x460>
   10648:	d8c01117 	ldw	r3,68(sp)
   1064c:	d8000a15 	stw	zero,40(sp)
   10650:	1c400017 	ldw	r17,0(r3)
   10654:	19c00104 	addi	r7,r3,4
   10658:	d9c01115 	stw	r7,68(sp)
   1065c:	883fa61e 	bne	r17,zero,104f8 <___vfprintf_internal_r+0x2b4>
   10660:	dcc00044 	addi	r19,sp,1
   10664:	dcc01215 	stw	r19,72(sp)
   10668:	003fbe06 	br	10564 <___vfprintf_internal_r+0x320>
   1066c:	04000084 	movi	r16,2
   10670:	d9c00f15 	stw	r7,60(sp)
   10674:	003f0b06 	br	102a4 <___vfprintf_internal_r+0x60>
   10678:	040000c4 	movi	r16,3
   1067c:	003f0906 	br	102a4 <___vfprintf_internal_r+0x60>
   10680:	00800044 	movi	r2,1
   10684:	040000c4 	movi	r16,3
   10688:	d8800e15 	stw	r2,56(sp)
   1068c:	003f0506 	br	102a4 <___vfprintf_internal_r+0x60>
   10690:	0007883a 	mov	r3,zero
   10694:	003f4e06 	br	103d0 <___vfprintf_internal_r+0x18c>
   10698:	00800044 	movi	r2,1
   1069c:	d8800915 	stw	r2,36(sp)
   106a0:	003f5706 	br	10400 <___vfprintf_internal_r+0x1bc>
   106a4:	d8801117 	ldw	r2,68(sp)
   106a8:	14400017 	ldw	r17,0(r2)
   106ac:	10800104 	addi	r2,r2,4
   106b0:	d8801115 	stw	r2,68(sp)
   106b4:	88000716 	blt	r17,zero,106d4 <___vfprintf_internal_r+0x490>
   106b8:	d8000a15 	stw	zero,40(sp)
   106bc:	003f8d06 	br	104f4 <___vfprintf_internal_r+0x2b0>
   106c0:	d8c01117 	ldw	r3,68(sp)
   106c4:	1c400017 	ldw	r17,0(r3)
   106c8:	18c00104 	addi	r3,r3,4
   106cc:	d8c01115 	stw	r3,68(sp)
   106d0:	883ff90e 	bge	r17,zero,106b8 <___vfprintf_internal_r+0x474>
   106d4:	00800044 	movi	r2,1
   106d8:	0463c83a 	sub	r17,zero,r17
   106dc:	d8800a15 	stw	r2,40(sp)
   106e0:	003f8406 	br	104f4 <___vfprintf_internal_r+0x2b0>
   106e4:	04000044 	movi	r16,1
   106e8:	8700080e 	bge	r16,fp,1070c <___vfprintf_internal_r+0x4c8>
   106ec:	d9001017 	ldw	r4,64(sp)
   106f0:	a00b883a 	mov	r5,r20
   106f4:	01800804 	movi	r6,32
   106f8:	e1ffffc4 	addi	r7,fp,-1
   106fc:	00101c40 	call	101c4 <print_repeat>
   10700:	103fc71e 	bne	r2,zero,10620 <___vfprintf_internal_r+0x3dc>
   10704:	e5c5883a 	add	r2,fp,r23
   10708:	15ffffc4 	addi	r23,r2,-1
   1070c:	d8c01117 	ldw	r3,68(sp)
   10710:	d9001017 	ldw	r4,64(sp)
   10714:	800f883a 	mov	r7,r16
   10718:	18800017 	ldw	r2,0(r3)
   1071c:	a0c00117 	ldw	r3,4(r20)
   10720:	a00b883a 	mov	r5,r20
   10724:	d8800005 	stb	r2,0(sp)
   10728:	d80d883a 	mov	r6,sp
   1072c:	183ee83a 	callr	r3
   10730:	103fbb1e 	bne	r2,zero,10620 <___vfprintf_internal_r+0x3dc>
   10734:	d8801117 	ldw	r2,68(sp)
   10738:	bdc00044 	addi	r23,r23,1
   1073c:	0021883a 	mov	r16,zero
   10740:	10800104 	addi	r2,r2,4
   10744:	d8801115 	stw	r2,68(sp)
   10748:	003ed606 	br	102a4 <___vfprintf_internal_r+0x60>
   1074c:	00800204 	movi	r2,8
   10750:	d8800d15 	stw	r2,52(sp)
   10754:	d8000c15 	stw	zero,48(sp)
   10758:	003fb606 	br	10634 <___vfprintf_internal_r+0x3f0>
   1075c:	d8c01117 	ldw	r3,68(sp)
   10760:	1cc00017 	ldw	r19,0(r3)
   10764:	9809883a 	mov	r4,r19
   10768:	00109c00 	call	109c0 <strlen>
   1076c:	e0a1c83a 	sub	r16,fp,r2
   10770:	1023883a 	mov	r17,r2
   10774:	0400070e 	bge	zero,r16,10794 <___vfprintf_internal_r+0x550>
   10778:	d9001017 	ldw	r4,64(sp)
   1077c:	a00b883a 	mov	r5,r20
   10780:	01800804 	movi	r6,32
   10784:	800f883a 	mov	r7,r16
   10788:	00101c40 	call	101c4 <print_repeat>
   1078c:	103fa41e 	bne	r2,zero,10620 <___vfprintf_internal_r+0x3dc>
   10790:	bc2f883a 	add	r23,r23,r16
   10794:	a0c00117 	ldw	r3,4(r20)
   10798:	d9001017 	ldw	r4,64(sp)
   1079c:	980d883a 	mov	r6,r19
   107a0:	a00b883a 	mov	r5,r20
   107a4:	880f883a 	mov	r7,r17
   107a8:	183ee83a 	callr	r3
   107ac:	103f9c1e 	bne	r2,zero,10620 <___vfprintf_internal_r+0x3dc>
   107b0:	d8801117 	ldw	r2,68(sp)
   107b4:	bc6f883a 	add	r23,r23,r17
   107b8:	0021883a 	mov	r16,zero
   107bc:	10800104 	addi	r2,r2,4
   107c0:	d8801115 	stw	r2,68(sp)
   107c4:	003eb706 	br	102a4 <___vfprintf_internal_r+0x60>
   107c8:	210015c4 	addi	r4,r4,87
   107cc:	003f5106 	br	10514 <___vfprintf_internal_r+0x2d0>
   107d0:	04003b16 	blt	zero,r16,108c0 <___vfprintf_internal_r+0x67c>
   107d4:	d8c00a17 	ldw	r3,40(sp)
   107d8:	1805003a 	cmpeq	r2,r3,zero
   107dc:	103f7f1e 	bne	r2,zero,105dc <___vfprintf_internal_r+0x398>
   107e0:	a0c00117 	ldw	r3,4(r20)
   107e4:	d9001017 	ldw	r4,64(sp)
   107e8:	00800b44 	movi	r2,45
   107ec:	d8800005 	stb	r2,0(sp)
   107f0:	a00b883a 	mov	r5,r20
   107f4:	d80d883a 	mov	r6,sp
   107f8:	01c00044 	movi	r7,1
   107fc:	183ee83a 	callr	r3
   10800:	103f871e 	bne	r2,zero,10620 <___vfprintf_internal_r+0x3dc>
   10804:	b8800044 	addi	r2,r23,1
   10808:	003f7506 	br	105e0 <___vfprintf_internal_r+0x39c>
   1080c:	0007883a 	mov	r3,zero
   10810:	003edb06 	br	10380 <___vfprintf_internal_r+0x13c>
   10814:	a0c00117 	ldw	r3,4(r20)
   10818:	d9001017 	ldw	r4,64(sp)
   1081c:	d9400005 	stb	r5,0(sp)
   10820:	d80d883a 	mov	r6,sp
   10824:	a00b883a 	mov	r5,r20
   10828:	183ee83a 	callr	r3
   1082c:	103f7c1e 	bne	r2,zero,10620 <___vfprintf_internal_r+0x3dc>
   10830:	bdc00044 	addi	r23,r23,1
   10834:	003e9b06 	br	102a4 <___vfprintf_internal_r+0x60>
   10838:	102f883a 	mov	r23,r2
   1083c:	0021883a 	mov	r16,zero
   10840:	003e9806 	br	102a4 <___vfprintf_internal_r+0x60>
   10844:	a0c00117 	ldw	r3,4(r20)
   10848:	d9000005 	stb	r4,0(sp)
   1084c:	d9001017 	ldw	r4,64(sp)
   10850:	a00b883a 	mov	r5,r20
   10854:	d80d883a 	mov	r6,sp
   10858:	800f883a 	mov	r7,r16
   1085c:	183ee83a 	callr	r3
   10860:	103f6f1e 	bne	r2,zero,10620 <___vfprintf_internal_r+0x3dc>
   10864:	bc2f883a 	add	r23,r23,r16
   10868:	0021883a 	mov	r16,zero
   1086c:	003e8d06 	br	102a4 <___vfprintf_internal_r+0x60>
   10870:	d9001017 	ldw	r4,64(sp)
   10874:	a00b883a 	mov	r5,r20
   10878:	01800c04 	movi	r6,48
   1087c:	800f883a 	mov	r7,r16
   10880:	00101c40 	call	101c4 <print_repeat>
   10884:	103f661e 	bne	r2,zero,10620 <___vfprintf_internal_r+0x3dc>
   10888:	bc05883a 	add	r2,r23,r16
   1088c:	003f5406 	br	105e0 <___vfprintf_internal_r+0x39c>
   10890:	a0c00117 	ldw	r3,4(r20)
   10894:	d9001017 	ldw	r4,64(sp)
   10898:	00800b44 	movi	r2,45
   1089c:	d8800005 	stb	r2,0(sp)
   108a0:	a00b883a 	mov	r5,r20
   108a4:	d80d883a 	mov	r6,sp
   108a8:	01c00044 	movi	r7,1
   108ac:	183ee83a 	callr	r3
   108b0:	103f5b1e 	bne	r2,zero,10620 <___vfprintf_internal_r+0x3dc>
   108b4:	bdc00044 	addi	r23,r23,1
   108b8:	043f480e 	bge	zero,r16,105dc <___vfprintf_internal_r+0x398>
   108bc:	003fec06 	br	10870 <___vfprintf_internal_r+0x62c>
   108c0:	d9001017 	ldw	r4,64(sp)
   108c4:	a00b883a 	mov	r5,r20
   108c8:	01800804 	movi	r6,32
   108cc:	800f883a 	mov	r7,r16
   108d0:	00101c40 	call	101c4 <print_repeat>
   108d4:	103f521e 	bne	r2,zero,10620 <___vfprintf_internal_r+0x3dc>
   108d8:	bc2f883a 	add	r23,r23,r16
   108dc:	003fbd06 	br	107d4 <___vfprintf_internal_r+0x590>

000108e0 <__vfprintf_internal>:
   108e0:	00800074 	movhi	r2,1
   108e4:	108c0104 	addi	r2,r2,12292
   108e8:	2013883a 	mov	r9,r4
   108ec:	11000017 	ldw	r4,0(r2)
   108f0:	2805883a 	mov	r2,r5
   108f4:	300f883a 	mov	r7,r6
   108f8:	480b883a 	mov	r5,r9
   108fc:	100d883a 	mov	r6,r2
   10900:	00102441 	jmpi	10244 <___vfprintf_internal_r>

00010904 <__sfvwrite_small_dev>:
   10904:	2880000b 	ldhu	r2,0(r5)
   10908:	defffa04 	addi	sp,sp,-24
   1090c:	dcc00315 	stw	r19,12(sp)
   10910:	1080020c 	andi	r2,r2,8
   10914:	dc800215 	stw	r18,8(sp)
   10918:	dc400115 	stw	r17,4(sp)
   1091c:	dfc00515 	stw	ra,20(sp)
   10920:	dd000415 	stw	r20,16(sp)
   10924:	dc000015 	stw	r16,0(sp)
   10928:	2825883a 	mov	r18,r5
   1092c:	2027883a 	mov	r19,r4
   10930:	3023883a 	mov	r17,r6
   10934:	10002026 	beq	r2,zero,109b8 <__sfvwrite_small_dev+0xb4>
   10938:	2940008f 	ldh	r5,2(r5)
   1093c:	28000f16 	blt	r5,zero,1097c <__sfvwrite_small_dev+0x78>
   10940:	01c01b0e 	bge	zero,r7,109b0 <__sfvwrite_small_dev+0xac>
   10944:	3821883a 	mov	r16,r7
   10948:	05010004 	movi	r20,1024
   1094c:	00000206 	br	10958 <__sfvwrite_small_dev+0x54>
   10950:	0400170e 	bge	zero,r16,109b0 <__sfvwrite_small_dev+0xac>
   10954:	9140008f 	ldh	r5,2(r18)
   10958:	880d883a 	mov	r6,r17
   1095c:	9809883a 	mov	r4,r19
   10960:	800f883a 	mov	r7,r16
   10964:	a400010e 	bge	r20,r16,1096c <__sfvwrite_small_dev+0x68>
   10968:	01c10004 	movi	r7,1024
   1096c:	00109e00 	call	109e0 <_write_r>
   10970:	88a3883a 	add	r17,r17,r2
   10974:	80a1c83a 	sub	r16,r16,r2
   10978:	00bff516 	blt	zero,r2,10950 <__sfvwrite_small_dev+0x4c>
   1097c:	9080000b 	ldhu	r2,0(r18)
   10980:	00ffffc4 	movi	r3,-1
   10984:	10801014 	ori	r2,r2,64
   10988:	9080000d 	sth	r2,0(r18)
   1098c:	1805883a 	mov	r2,r3
   10990:	dfc00517 	ldw	ra,20(sp)
   10994:	dd000417 	ldw	r20,16(sp)
   10998:	dcc00317 	ldw	r19,12(sp)
   1099c:	dc800217 	ldw	r18,8(sp)
   109a0:	dc400117 	ldw	r17,4(sp)
   109a4:	dc000017 	ldw	r16,0(sp)
   109a8:	dec00604 	addi	sp,sp,24
   109ac:	f800283a 	ret
   109b0:	0007883a 	mov	r3,zero
   109b4:	003ff506 	br	1098c <__sfvwrite_small_dev+0x88>
   109b8:	00ffffc4 	movi	r3,-1
   109bc:	003ff306 	br	1098c <__sfvwrite_small_dev+0x88>

000109c0 <strlen>:
   109c0:	20800007 	ldb	r2,0(r4)
   109c4:	10000526 	beq	r2,zero,109dc <strlen+0x1c>
   109c8:	2007883a 	mov	r3,r4
   109cc:	18c00044 	addi	r3,r3,1
   109d0:	18800007 	ldb	r2,0(r3)
   109d4:	103ffd1e 	bne	r2,zero,109cc <strlen+0xc>
   109d8:	1905c83a 	sub	r2,r3,r4
   109dc:	f800283a 	ret

000109e0 <_write_r>:
   109e0:	defffd04 	addi	sp,sp,-12
   109e4:	dc000015 	stw	r16,0(sp)
   109e8:	04000074 	movhi	r16,1
   109ec:	840cbe04 	addi	r16,r16,13048
   109f0:	dc400115 	stw	r17,4(sp)
   109f4:	80000015 	stw	zero,0(r16)
   109f8:	2023883a 	mov	r17,r4
   109fc:	2809883a 	mov	r4,r5
   10a00:	300b883a 	mov	r5,r6
   10a04:	380d883a 	mov	r6,r7
   10a08:	dfc00215 	stw	ra,8(sp)
   10a0c:	0010d240 	call	10d24 <write>
   10a10:	1007883a 	mov	r3,r2
   10a14:	00bfffc4 	movi	r2,-1
   10a18:	18800626 	beq	r3,r2,10a34 <_write_r+0x54>
   10a1c:	1805883a 	mov	r2,r3
   10a20:	dfc00217 	ldw	ra,8(sp)
   10a24:	dc400117 	ldw	r17,4(sp)
   10a28:	dc000017 	ldw	r16,0(sp)
   10a2c:	dec00304 	addi	sp,sp,12
   10a30:	f800283a 	ret
   10a34:	80800017 	ldw	r2,0(r16)
   10a38:	103ff826 	beq	r2,zero,10a1c <_write_r+0x3c>
   10a3c:	88800015 	stw	r2,0(r17)
   10a40:	1805883a 	mov	r2,r3
   10a44:	dfc00217 	ldw	ra,8(sp)
   10a48:	dc400117 	ldw	r17,4(sp)
   10a4c:	dc000017 	ldw	r16,0(sp)
   10a50:	dec00304 	addi	sp,sp,12
   10a54:	f800283a 	ret

00010a58 <udivmodsi4>:
   10a58:	29001b2e 	bgeu	r5,r4,10ac8 <udivmodsi4+0x70>
   10a5c:	28001a16 	blt	r5,zero,10ac8 <udivmodsi4+0x70>
   10a60:	00800044 	movi	r2,1
   10a64:	0007883a 	mov	r3,zero
   10a68:	01c007c4 	movi	r7,31
   10a6c:	00000306 	br	10a7c <udivmodsi4+0x24>
   10a70:	19c01326 	beq	r3,r7,10ac0 <udivmodsi4+0x68>
   10a74:	18c00044 	addi	r3,r3,1
   10a78:	28000416 	blt	r5,zero,10a8c <udivmodsi4+0x34>
   10a7c:	294b883a 	add	r5,r5,r5
   10a80:	1085883a 	add	r2,r2,r2
   10a84:	293ffa36 	bltu	r5,r4,10a70 <udivmodsi4+0x18>
   10a88:	10000d26 	beq	r2,zero,10ac0 <udivmodsi4+0x68>
   10a8c:	0007883a 	mov	r3,zero
   10a90:	21400236 	bltu	r4,r5,10a9c <udivmodsi4+0x44>
   10a94:	2149c83a 	sub	r4,r4,r5
   10a98:	1886b03a 	or	r3,r3,r2
   10a9c:	1004d07a 	srli	r2,r2,1
   10aa0:	280ad07a 	srli	r5,r5,1
   10aa4:	103ffa1e 	bne	r2,zero,10a90 <udivmodsi4+0x38>
   10aa8:	30000226 	beq	r6,zero,10ab4 <udivmodsi4+0x5c>
   10aac:	2005883a 	mov	r2,r4
   10ab0:	f800283a 	ret
   10ab4:	1809883a 	mov	r4,r3
   10ab8:	2005883a 	mov	r2,r4
   10abc:	f800283a 	ret
   10ac0:	0007883a 	mov	r3,zero
   10ac4:	003ff806 	br	10aa8 <udivmodsi4+0x50>
   10ac8:	00800044 	movi	r2,1
   10acc:	0007883a 	mov	r3,zero
   10ad0:	003fef06 	br	10a90 <udivmodsi4+0x38>

00010ad4 <__divsi3>:
   10ad4:	defffe04 	addi	sp,sp,-8
   10ad8:	dc000015 	stw	r16,0(sp)
   10adc:	dfc00115 	stw	ra,4(sp)
   10ae0:	0021883a 	mov	r16,zero
   10ae4:	20000c16 	blt	r4,zero,10b18 <__divsi3+0x44>
   10ae8:	000d883a 	mov	r6,zero
   10aec:	28000e16 	blt	r5,zero,10b28 <__divsi3+0x54>
   10af0:	0010a580 	call	10a58 <udivmodsi4>
   10af4:	1007883a 	mov	r3,r2
   10af8:	8005003a 	cmpeq	r2,r16,zero
   10afc:	1000011e 	bne	r2,zero,10b04 <__divsi3+0x30>
   10b00:	00c7c83a 	sub	r3,zero,r3
   10b04:	1805883a 	mov	r2,r3
   10b08:	dfc00117 	ldw	ra,4(sp)
   10b0c:	dc000017 	ldw	r16,0(sp)
   10b10:	dec00204 	addi	sp,sp,8
   10b14:	f800283a 	ret
   10b18:	0109c83a 	sub	r4,zero,r4
   10b1c:	04000044 	movi	r16,1
   10b20:	000d883a 	mov	r6,zero
   10b24:	283ff20e 	bge	r5,zero,10af0 <__divsi3+0x1c>
   10b28:	014bc83a 	sub	r5,zero,r5
   10b2c:	8021003a 	cmpeq	r16,r16,zero
   10b30:	003fef06 	br	10af0 <__divsi3+0x1c>

00010b34 <__modsi3>:
   10b34:	deffff04 	addi	sp,sp,-4
   10b38:	dfc00015 	stw	ra,0(sp)
   10b3c:	01800044 	movi	r6,1
   10b40:	2807883a 	mov	r3,r5
   10b44:	20000416 	blt	r4,zero,10b58 <__modsi3+0x24>
   10b48:	28000c16 	blt	r5,zero,10b7c <__modsi3+0x48>
   10b4c:	dfc00017 	ldw	ra,0(sp)
   10b50:	dec00104 	addi	sp,sp,4
   10b54:	0010a581 	jmpi	10a58 <udivmodsi4>
   10b58:	0109c83a 	sub	r4,zero,r4
   10b5c:	28000b16 	blt	r5,zero,10b8c <__modsi3+0x58>
   10b60:	180b883a 	mov	r5,r3
   10b64:	01800044 	movi	r6,1
   10b68:	0010a580 	call	10a58 <udivmodsi4>
   10b6c:	0085c83a 	sub	r2,zero,r2
   10b70:	dfc00017 	ldw	ra,0(sp)
   10b74:	dec00104 	addi	sp,sp,4
   10b78:	f800283a 	ret
   10b7c:	014bc83a 	sub	r5,zero,r5
   10b80:	dfc00017 	ldw	ra,0(sp)
   10b84:	dec00104 	addi	sp,sp,4
   10b88:	0010a581 	jmpi	10a58 <udivmodsi4>
   10b8c:	0147c83a 	sub	r3,zero,r5
   10b90:	003ff306 	br	10b60 <__modsi3+0x2c>

00010b94 <__udivsi3>:
   10b94:	000d883a 	mov	r6,zero
   10b98:	0010a581 	jmpi	10a58 <udivmodsi4>

00010b9c <__umodsi3>:
   10b9c:	01800044 	movi	r6,1
   10ba0:	0010a581 	jmpi	10a58 <udivmodsi4>

00010ba4 <__mulsi3>:
   10ba4:	20000a26 	beq	r4,zero,10bd0 <__mulsi3+0x2c>
   10ba8:	0007883a 	mov	r3,zero
   10bac:	2080004c 	andi	r2,r4,1
   10bb0:	1005003a 	cmpeq	r2,r2,zero
   10bb4:	2008d07a 	srli	r4,r4,1
   10bb8:	1000011e 	bne	r2,zero,10bc0 <__mulsi3+0x1c>
   10bbc:	1947883a 	add	r3,r3,r5
   10bc0:	294b883a 	add	r5,r5,r5
   10bc4:	203ff91e 	bne	r4,zero,10bac <__mulsi3+0x8>
   10bc8:	1805883a 	mov	r2,r3
   10bcc:	f800283a 	ret
   10bd0:	0007883a 	mov	r3,zero
   10bd4:	1805883a 	mov	r2,r3
   10bd8:	f800283a 	ret

00010bdc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10bdc:	defffe04 	addi	sp,sp,-8
   10be0:	dfc00115 	stw	ra,4(sp)
   10be4:	df000015 	stw	fp,0(sp)
   10be8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10bec:	01000074 	movhi	r4,1
   10bf0:	210c0904 	addi	r4,r4,12324
   10bf4:	01400074 	movhi	r5,1
   10bf8:	294b5404 	addi	r5,r5,11600
   10bfc:	01800074 	movhi	r6,1
   10c00:	318c0904 	addi	r6,r6,12324
   10c04:	0010c5c0 	call	10c5c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10c08:	01000074 	movhi	r4,1
   10c0c:	21000804 	addi	r4,r4,32
   10c10:	01400074 	movhi	r5,1
   10c14:	29400804 	addi	r5,r5,32
   10c18:	01800074 	movhi	r6,1
   10c1c:	31800804 	addi	r6,r6,32
   10c20:	0010c5c0 	call	10c5c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10c24:	01000074 	movhi	r4,1
   10c28:	210aba04 	addi	r4,r4,10984
   10c2c:	01400074 	movhi	r5,1
   10c30:	294aba04 	addi	r5,r5,10984
   10c34:	01800074 	movhi	r6,1
   10c38:	318b5404 	addi	r6,r6,11600
   10c3c:	0010c5c0 	call	10c5c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10c40:	00115e40 	call	115e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10c44:	00117400 	call	11740 <alt_icache_flush_all>
}
   10c48:	e037883a 	mov	sp,fp
   10c4c:	dfc00117 	ldw	ra,4(sp)
   10c50:	df000017 	ldw	fp,0(sp)
   10c54:	dec00204 	addi	sp,sp,8
   10c58:	f800283a 	ret

00010c5c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10c5c:	defffc04 	addi	sp,sp,-16
   10c60:	df000315 	stw	fp,12(sp)
   10c64:	df000304 	addi	fp,sp,12
   10c68:	e13ffd15 	stw	r4,-12(fp)
   10c6c:	e17ffe15 	stw	r5,-8(fp)
   10c70:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10c74:	e0fffe17 	ldw	r3,-8(fp)
   10c78:	e0bffd17 	ldw	r2,-12(fp)
   10c7c:	18800e26 	beq	r3,r2,10cb8 <alt_load_section+0x5c>
  {
    while( to != end )
   10c80:	00000a06 	br	10cac <alt_load_section+0x50>
    {
      *to++ = *from++;
   10c84:	e0bffd17 	ldw	r2,-12(fp)
   10c88:	10c00017 	ldw	r3,0(r2)
   10c8c:	e0bffe17 	ldw	r2,-8(fp)
   10c90:	10c00015 	stw	r3,0(r2)
   10c94:	e0bffe17 	ldw	r2,-8(fp)
   10c98:	10800104 	addi	r2,r2,4
   10c9c:	e0bffe15 	stw	r2,-8(fp)
   10ca0:	e0bffd17 	ldw	r2,-12(fp)
   10ca4:	10800104 	addi	r2,r2,4
   10ca8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10cac:	e0fffe17 	ldw	r3,-8(fp)
   10cb0:	e0bfff17 	ldw	r2,-4(fp)
   10cb4:	18bff31e 	bne	r3,r2,10c84 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   10cb8:	e037883a 	mov	sp,fp
   10cbc:	df000017 	ldw	fp,0(sp)
   10cc0:	dec00104 	addi	sp,sp,4
   10cc4:	f800283a 	ret

00010cc8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10cc8:	defffd04 	addi	sp,sp,-12
   10ccc:	dfc00215 	stw	ra,8(sp)
   10cd0:	df000115 	stw	fp,4(sp)
   10cd4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10cd8:	0009883a 	mov	r4,zero
   10cdc:	0010ea80 	call	10ea8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10ce0:	0010edc0 	call	10edc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10ce4:	01000074 	movhi	r4,1
   10ce8:	210ac704 	addi	r4,r4,11036
   10cec:	01400074 	movhi	r5,1
   10cf0:	294ac704 	addi	r5,r5,11036
   10cf4:	01800074 	movhi	r6,1
   10cf8:	318ac704 	addi	r6,r6,11036
   10cfc:	00118340 	call	11834 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10d00:	d120be17 	ldw	r4,-32008(gp)
   10d04:	d160bf17 	ldw	r5,-32004(gp)
   10d08:	d1a0c017 	ldw	r6,-32000(gp)
   10d0c:	001005c0 	call	1005c <main>
   10d10:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10d14:	01000044 	movi	r4,1
   10d18:	00114840 	call	11484 <close>
  exit (result);
   10d1c:	e13fff17 	ldw	r4,-4(fp)
   10d20:	00120340 	call	12034 <exit>

00010d24 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10d24:	defff704 	addi	sp,sp,-36
   10d28:	dfc00815 	stw	ra,32(sp)
   10d2c:	df000715 	stw	fp,28(sp)
   10d30:	df000704 	addi	fp,sp,28
   10d34:	e13ffb15 	stw	r4,-20(fp)
   10d38:	e17ffc15 	stw	r5,-16(fp)
   10d3c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10d40:	e0bffb17 	ldw	r2,-20(fp)
   10d44:	1004803a 	cmplt	r2,r2,zero
   10d48:	1000091e 	bne	r2,zero,10d70 <write+0x4c>
   10d4c:	e13ffb17 	ldw	r4,-20(fp)
   10d50:	01400304 	movi	r5,12
   10d54:	0010ba40 	call	10ba4 <__mulsi3>
   10d58:	1007883a 	mov	r3,r2
   10d5c:	00800074 	movhi	r2,1
   10d60:	108ba104 	addi	r2,r2,11908
   10d64:	1887883a 	add	r3,r3,r2
   10d68:	e0ffff15 	stw	r3,-4(fp)
   10d6c:	00000106 	br	10d74 <write+0x50>
   10d70:	e03fff15 	stw	zero,-4(fp)
   10d74:	e0bfff17 	ldw	r2,-4(fp)
   10d78:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   10d7c:	e0bffa17 	ldw	r2,-24(fp)
   10d80:	1005003a 	cmpeq	r2,r2,zero
   10d84:	1000241e 	bne	r2,zero,10e18 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10d88:	e0bffa17 	ldw	r2,-24(fp)
   10d8c:	10800217 	ldw	r2,8(r2)
   10d90:	108000cc 	andi	r2,r2,3
   10d94:	1005003a 	cmpeq	r2,r2,zero
   10d98:	10001a1e 	bne	r2,zero,10e04 <write+0xe0>
   10d9c:	e0bffa17 	ldw	r2,-24(fp)
   10da0:	10800017 	ldw	r2,0(r2)
   10da4:	10800617 	ldw	r2,24(r2)
   10da8:	1005003a 	cmpeq	r2,r2,zero
   10dac:	1000151e 	bne	r2,zero,10e04 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10db0:	e0bffa17 	ldw	r2,-24(fp)
   10db4:	10800017 	ldw	r2,0(r2)
   10db8:	10800617 	ldw	r2,24(r2)
   10dbc:	e17ffc17 	ldw	r5,-16(fp)
   10dc0:	e1bffd17 	ldw	r6,-12(fp)
   10dc4:	e13ffa17 	ldw	r4,-24(fp)
   10dc8:	103ee83a 	callr	r2
   10dcc:	e0bff915 	stw	r2,-28(fp)
   10dd0:	e0bff917 	ldw	r2,-28(fp)
   10dd4:	1004403a 	cmpge	r2,r2,zero
   10dd8:	1000071e 	bne	r2,zero,10df8 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   10ddc:	0010e480 	call	10e48 <alt_get_errno>
   10de0:	e0fff917 	ldw	r3,-28(fp)
   10de4:	00c7c83a 	sub	r3,zero,r3
   10de8:	10c00015 	stw	r3,0(r2)
        return -1;
   10dec:	00bfffc4 	movi	r2,-1
   10df0:	e0bffe15 	stw	r2,-8(fp)
   10df4:	00000e06 	br	10e30 <write+0x10c>
      }
      return rval;
   10df8:	e0bff917 	ldw	r2,-28(fp)
   10dfc:	e0bffe15 	stw	r2,-8(fp)
   10e00:	00000b06 	br	10e30 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10e04:	0010e480 	call	10e48 <alt_get_errno>
   10e08:	1007883a 	mov	r3,r2
   10e0c:	00800344 	movi	r2,13
   10e10:	18800015 	stw	r2,0(r3)
   10e14:	00000406 	br	10e28 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10e18:	0010e480 	call	10e48 <alt_get_errno>
   10e1c:	1007883a 	mov	r3,r2
   10e20:	00801444 	movi	r2,81
   10e24:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10e28:	00bfffc4 	movi	r2,-1
   10e2c:	e0bffe15 	stw	r2,-8(fp)
   10e30:	e0bffe17 	ldw	r2,-8(fp)
}
   10e34:	e037883a 	mov	sp,fp
   10e38:	dfc00117 	ldw	ra,4(sp)
   10e3c:	df000017 	ldw	fp,0(sp)
   10e40:	dec00204 	addi	sp,sp,8
   10e44:	f800283a 	ret

00010e48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10e48:	defffd04 	addi	sp,sp,-12
   10e4c:	dfc00215 	stw	ra,8(sp)
   10e50:	df000115 	stw	fp,4(sp)
   10e54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10e58:	00800074 	movhi	r2,1
   10e5c:	108c0804 	addi	r2,r2,12320
   10e60:	10800017 	ldw	r2,0(r2)
   10e64:	1005003a 	cmpeq	r2,r2,zero
   10e68:	1000061e 	bne	r2,zero,10e84 <alt_get_errno+0x3c>
   10e6c:	00800074 	movhi	r2,1
   10e70:	108c0804 	addi	r2,r2,12320
   10e74:	10800017 	ldw	r2,0(r2)
   10e78:	103ee83a 	callr	r2
   10e7c:	e0bfff15 	stw	r2,-4(fp)
   10e80:	00000306 	br	10e90 <alt_get_errno+0x48>
   10e84:	00800074 	movhi	r2,1
   10e88:	108cbe04 	addi	r2,r2,13048
   10e8c:	e0bfff15 	stw	r2,-4(fp)
   10e90:	e0bfff17 	ldw	r2,-4(fp)
}
   10e94:	e037883a 	mov	sp,fp
   10e98:	dfc00117 	ldw	ra,4(sp)
   10e9c:	df000017 	ldw	fp,0(sp)
   10ea0:	dec00204 	addi	sp,sp,8
   10ea4:	f800283a 	ret

00010ea8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10ea8:	defffd04 	addi	sp,sp,-12
   10eac:	dfc00215 	stw	ra,8(sp)
   10eb0:	df000115 	stw	fp,4(sp)
   10eb4:	df000104 	addi	fp,sp,4
   10eb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, nios);
   10ebc:	0011c080 	call	11c08 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10ec0:	00800044 	movi	r2,1
   10ec4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10ec8:	e037883a 	mov	sp,fp
   10ecc:	dfc00117 	ldw	ra,4(sp)
   10ed0:	df000017 	ldw	fp,0(sp)
   10ed4:	dec00204 	addi	sp,sp,8
   10ed8:	f800283a 	ret

00010edc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10edc:	defffe04 	addi	sp,sp,-8
   10ee0:	dfc00115 	stw	ra,4(sp)
   10ee4:	df000015 	stw	fp,0(sp)
   10ee8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
   10eec:	01000074 	movhi	r4,1
   10ef0:	210b8c04 	addi	r4,r4,11824
   10ef4:	0010f180 	call	10f18 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
   10ef8:	0007883a 	mov	r3,zero
   10efc:	00800044 	movi	r2,1
   10f00:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   10f04:	e037883a 	mov	sp,fp
   10f08:	dfc00117 	ldw	ra,4(sp)
   10f0c:	df000017 	ldw	fp,0(sp)
   10f10:	dec00204 	addi	sp,sp,8
   10f14:	f800283a 	ret

00010f18 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10f18:	defffd04 	addi	sp,sp,-12
   10f1c:	dfc00215 	stw	ra,8(sp)
   10f20:	df000115 	stw	fp,4(sp)
   10f24:	df000104 	addi	fp,sp,4
   10f28:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10f2c:	e13fff17 	ldw	r4,-4(fp)
   10f30:	01400074 	movhi	r5,1
   10f34:	294c0504 	addi	r5,r5,12308
   10f38:	001162c0 	call	1162c <alt_dev_llist_insert>
}
   10f3c:	e037883a 	mov	sp,fp
   10f40:	dfc00117 	ldw	ra,4(sp)
   10f44:	df000017 	ldw	fp,0(sp)
   10f48:	dec00204 	addi	sp,sp,8
   10f4c:	f800283a 	ret

00010f50 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10f50:	defffa04 	addi	sp,sp,-24
   10f54:	dfc00515 	stw	ra,20(sp)
   10f58:	df000415 	stw	fp,16(sp)
   10f5c:	df000404 	addi	fp,sp,16
   10f60:	e13ffd15 	stw	r4,-12(fp)
   10f64:	e17ffe15 	stw	r5,-8(fp)
   10f68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10f6c:	e0bffd17 	ldw	r2,-12(fp)
   10f70:	10800017 	ldw	r2,0(r2)
   10f74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10f78:	e0bffc17 	ldw	r2,-16(fp)
   10f7c:	11000a04 	addi	r4,r2,40
   10f80:	e0bffd17 	ldw	r2,-12(fp)
   10f84:	11c00217 	ldw	r7,8(r2)
   10f88:	e17ffe17 	ldw	r5,-8(fp)
   10f8c:	e1bfff17 	ldw	r6,-4(fp)
   10f90:	00110000 	call	11000 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10f94:	e037883a 	mov	sp,fp
   10f98:	dfc00117 	ldw	ra,4(sp)
   10f9c:	df000017 	ldw	fp,0(sp)
   10fa0:	dec00204 	addi	sp,sp,8
   10fa4:	f800283a 	ret

00010fa8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10fa8:	defffa04 	addi	sp,sp,-24
   10fac:	dfc00515 	stw	ra,20(sp)
   10fb0:	df000415 	stw	fp,16(sp)
   10fb4:	df000404 	addi	fp,sp,16
   10fb8:	e13ffd15 	stw	r4,-12(fp)
   10fbc:	e17ffe15 	stw	r5,-8(fp)
   10fc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10fc4:	e0bffd17 	ldw	r2,-12(fp)
   10fc8:	10800017 	ldw	r2,0(r2)
   10fcc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10fd0:	e0bffc17 	ldw	r2,-16(fp)
   10fd4:	11000a04 	addi	r4,r2,40
   10fd8:	e0bffd17 	ldw	r2,-12(fp)
   10fdc:	11c00217 	ldw	r7,8(r2)
   10fe0:	e17ffe17 	ldw	r5,-8(fp)
   10fe4:	e1bfff17 	ldw	r6,-4(fp)
   10fe8:	00111040 	call	11104 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10fec:	e037883a 	mov	sp,fp
   10ff0:	dfc00117 	ldw	ra,4(sp)
   10ff4:	df000017 	ldw	fp,0(sp)
   10ff8:	dec00204 	addi	sp,sp,8
   10ffc:	f800283a 	ret

00011000 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   11000:	defff604 	addi	sp,sp,-40
   11004:	df000915 	stw	fp,36(sp)
   11008:	df000904 	addi	fp,sp,36
   1100c:	e13ffb15 	stw	r4,-20(fp)
   11010:	e17ffc15 	stw	r5,-16(fp)
   11014:	e1bffd15 	stw	r6,-12(fp)
   11018:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   1101c:	e0bffb17 	ldw	r2,-20(fp)
   11020:	10800017 	ldw	r2,0(r2)
   11024:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   11028:	e0bffc17 	ldw	r2,-16(fp)
   1102c:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   11030:	e0bffd17 	ldw	r2,-12(fp)
   11034:	1007883a 	mov	r3,r2
   11038:	e0bffc17 	ldw	r2,-16(fp)
   1103c:	10c5883a 	add	r2,r2,r3
   11040:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   11044:	00001606 	br	110a0 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11048:	e0bffa17 	ldw	r2,-24(fp)
   1104c:	10800037 	ldwio	r2,0(r2)
   11050:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   11054:	e0bff717 	ldw	r2,-36(fp)
   11058:	10a0000c 	andi	r2,r2,32768
   1105c:	1005003a 	cmpeq	r2,r2,zero
   11060:	1000081e 	bne	r2,zero,11084 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   11064:	e0bff717 	ldw	r2,-36(fp)
   11068:	1007883a 	mov	r3,r2
   1106c:	e0bff917 	ldw	r2,-28(fp)
   11070:	10c00005 	stb	r3,0(r2)
   11074:	e0bff917 	ldw	r2,-28(fp)
   11078:	10800044 	addi	r2,r2,1
   1107c:	e0bff915 	stw	r2,-28(fp)
   11080:	00000706 	br	110a0 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   11084:	e0fff917 	ldw	r3,-28(fp)
   11088:	e0bffc17 	ldw	r2,-16(fp)
   1108c:	1880071e 	bne	r3,r2,110ac <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   11090:	e0bffe17 	ldw	r2,-8(fp)
   11094:	1090000c 	andi	r2,r2,16384
   11098:	1004c03a 	cmpne	r2,r2,zero
   1109c:	1000031e 	bne	r2,zero,110ac <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   110a0:	e0fff917 	ldw	r3,-28(fp)
   110a4:	e0bff817 	ldw	r2,-32(fp)
   110a8:	18bfe736 	bltu	r3,r2,11048 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   110ac:	e0fff917 	ldw	r3,-28(fp)
   110b0:	e0bffc17 	ldw	r2,-16(fp)
   110b4:	18800526 	beq	r3,r2,110cc <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   110b8:	e0fff917 	ldw	r3,-28(fp)
   110bc:	e0bffc17 	ldw	r2,-16(fp)
   110c0:	1887c83a 	sub	r3,r3,r2
   110c4:	e0ffff15 	stw	r3,-4(fp)
   110c8:	00000906 	br	110f0 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   110cc:	e0bffe17 	ldw	r2,-8(fp)
   110d0:	1090000c 	andi	r2,r2,16384
   110d4:	1005003a 	cmpeq	r2,r2,zero
   110d8:	1000031e 	bne	r2,zero,110e8 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   110dc:	00bffd44 	movi	r2,-11
   110e0:	e0bfff15 	stw	r2,-4(fp)
   110e4:	00000206 	br	110f0 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   110e8:	00bffec4 	movi	r2,-5
   110ec:	e0bfff15 	stw	r2,-4(fp)
   110f0:	e0bfff17 	ldw	r2,-4(fp)
}
   110f4:	e037883a 	mov	sp,fp
   110f8:	df000017 	ldw	fp,0(sp)
   110fc:	dec00104 	addi	sp,sp,4
   11100:	f800283a 	ret

00011104 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11104:	defff904 	addi	sp,sp,-28
   11108:	df000615 	stw	fp,24(sp)
   1110c:	df000604 	addi	fp,sp,24
   11110:	e13ffc15 	stw	r4,-16(fp)
   11114:	e17ffd15 	stw	r5,-12(fp)
   11118:	e1bffe15 	stw	r6,-8(fp)
   1111c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   11120:	e0bffc17 	ldw	r2,-16(fp)
   11124:	10800017 	ldw	r2,0(r2)
   11128:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   1112c:	e0bffe17 	ldw	r2,-8(fp)
   11130:	1007883a 	mov	r3,r2
   11134:	e0bffd17 	ldw	r2,-12(fp)
   11138:	10c5883a 	add	r2,r2,r3
   1113c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   11140:	00001106 	br	11188 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11144:	e0bffb17 	ldw	r2,-20(fp)
   11148:	10800104 	addi	r2,r2,4
   1114c:	10800037 	ldwio	r2,0(r2)
   11150:	10bfffec 	andhi	r2,r2,65535
   11154:	1005003a 	cmpeq	r2,r2,zero
   11158:	10000b1e 	bne	r2,zero,11188 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1115c:	e13ffb17 	ldw	r4,-20(fp)
   11160:	e0bffd17 	ldw	r2,-12(fp)
   11164:	10800003 	ldbu	r2,0(r2)
   11168:	10c03fcc 	andi	r3,r2,255
   1116c:	18c0201c 	xori	r3,r3,128
   11170:	18ffe004 	addi	r3,r3,-128
   11174:	e0bffd17 	ldw	r2,-12(fp)
   11178:	10800044 	addi	r2,r2,1
   1117c:	e0bffd15 	stw	r2,-12(fp)
   11180:	2005883a 	mov	r2,r4
   11184:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11188:	e0fffd17 	ldw	r3,-12(fp)
   1118c:	e0bffa17 	ldw	r2,-24(fp)
   11190:	18bfec36 	bltu	r3,r2,11144 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   11194:	e0bffe17 	ldw	r2,-8(fp)
}
   11198:	e037883a 	mov	sp,fp
   1119c:	df000017 	ldw	fp,0(sp)
   111a0:	dec00104 	addi	sp,sp,4
   111a4:	f800283a 	ret

000111a8 <perf_print_formatted_report>:
 * second.
 */
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
   111a8:	deffef04 	addi	sp,sp,-68
   111ac:	dfc00f15 	stw	ra,60(sp)
   111b0:	df000e15 	stw	fp,56(sp)
   111b4:	df000e04 	addi	fp,sp,56
   111b8:	e13ffd15 	stw	r4,-12(fp)
   111bc:	e17ffe15 	stw	r5,-8(fp)
   111c0:	e1c00215 	stw	r7,8(fp)
   111c4:	e1bfff15 	stw	r6,-4(fp)
    va_list name_args;
    alt_u64 total_usec;
    alt_u64 total_clocks;
    alt_u64 section_clocks;
    char* section_name;
    int section_num = 1;
   111c8:	00800044 	movi	r2,1
   111cc:	e0bff415 	stw	r2,-48(fp)

    const char* separator =
      "+---------------+-----+------------+---------------+------------+\n";
   111d0:	00800074 	movhi	r2,1
   111d4:	108acd04 	addi	r2,r2,11060
   111d8:	e0bff315 	stw	r2,-52(fp)
    
    const char* column_header =
      "| Section       |  %  | Time (usec)|  Time (clocks)|Occurrences |\n";
   111dc:	00800074 	movhi	r2,1
   111e0:	108ade04 	addi	r2,r2,11128
   111e4:	e0bff215 	stw	r2,-56(fp)

    PERF_STOP_MEASURING (perf_base);
   111e8:	e0bffd17 	ldw	r2,-12(fp)
   111ec:	10000035 	stwio	zero,0(r2)

    va_start (name_args, num_sections);
   111f0:	e0800204 	addi	r2,fp,8
   111f4:	e0bffc15 	stw	r2,-16(fp)

    total_clocks = perf_get_total_time (perf_base);
   111f8:	e13ffd17 	ldw	r4,-12(fp)
   111fc:	0011cd80 	call	11cd8 <perf_get_total_time>
   11200:	1009883a 	mov	r4,r2
   11204:	180b883a 	mov	r5,r3
   11208:	e13ff815 	stw	r4,-32(fp)
   1120c:	e17ff915 	stw	r5,-28(fp)
    total_usec = total_clocks * 1000000 / clock_freq_hertz;
   11210:	e13ff817 	ldw	r4,-32(fp)
   11214:	e17ff917 	ldw	r5,-28(fp)
   11218:	018003f4 	movhi	r6,15
   1121c:	31909004 	addi	r6,r6,16960
   11220:	000f883a 	mov	r7,zero
   11224:	00122f40 	call	122f4 <__muldi3>
   11228:	1009883a 	mov	r4,r2
   1122c:	180b883a 	mov	r5,r3
   11230:	200d883a 	mov	r6,r4
   11234:	280f883a 	mov	r7,r5
   11238:	e0bffe17 	ldw	r2,-8(fp)
   1123c:	0007883a 	mov	r3,zero
   11240:	3009883a 	mov	r4,r6
   11244:	380b883a 	mov	r5,r7
   11248:	100d883a 	mov	r6,r2
   1124c:	180f883a 	mov	r7,r3
   11250:	00124180 	call	12418 <__udivdi3>
   11254:	1009883a 	mov	r4,r2
   11258:	180b883a 	mov	r5,r3
   1125c:	e13ffa15 	stw	r4,-24(fp)
   11260:	e17ffb15 	stw	r5,-20(fp)

    // Print the total at the top:
    printf("--Performance Counter Report--\n");
   11264:	01000074 	movhi	r4,1
   11268:	210aef04 	addi	r4,r4,11196
   1126c:	00121200 	call	12120 <puts>
    printf("Total Time : %llu usec ", total_usec);            
   11270:	01000074 	movhi	r4,1
   11274:	210af704 	addi	r4,r4,11228
   11278:	e17ffa17 	ldw	r5,-24(fp)
   1127c:	e1bffb17 	ldw	r6,-20(fp)
   11280:	001012c0 	call	1012c <printf>
    printf("(%llu clock-cycles)\n", total_clocks);            
   11284:	01000074 	movhi	r4,1
   11288:	210afd04 	addi	r4,r4,11252
   1128c:	e17ff817 	ldw	r5,-32(fp)
   11290:	e1bff917 	ldw	r6,-28(fp)
   11294:	001012c0 	call	1012c <printf>
    printf("%s", separator);
   11298:	01000074 	movhi	r4,1
   1129c:	210b0304 	addi	r4,r4,11276
   112a0:	e17ff317 	ldw	r5,-52(fp)
   112a4:	001012c0 	call	1012c <printf>
    printf("%s", column_header);
   112a8:	01000074 	movhi	r4,1
   112ac:	210b0304 	addi	r4,r4,11276
   112b0:	e17ff217 	ldw	r5,-56(fp)
   112b4:	001012c0 	call	1012c <printf>
    printf("%s", separator);
   112b8:	01000074 	movhi	r4,1
   112bc:	210b0304 	addi	r4,r4,11276
   112c0:	e17ff317 	ldw	r5,-52(fp)
   112c4:	001012c0 	call	1012c <printf>

    section_name = va_arg(name_args, char*);
   112c8:	e0fffc17 	ldw	r3,-16(fp)
   112cc:	18800104 	addi	r2,r3,4
   112d0:	e0bffc15 	stw	r2,-16(fp)
   112d4:	1805883a 	mov	r2,r3
   112d8:	10800017 	ldw	r2,0(r2)
   112dc:	e0bff515 	stw	r2,-44(fp)

    for (section_num = 1; section_num <= num_sections; section_num++)
   112e0:	00800044 	movi	r2,1
   112e4:	e0bff415 	stw	r2,-48(fp)
   112e8:	00005d06 	br	11460 <perf_print_formatted_report+0x2b8>
    {
        section_clocks = perf_get_section_time (perf_base, section_num);
   112ec:	e13ffd17 	ldw	r4,-12(fp)
   112f0:	e17ff417 	ldw	r5,-48(fp)
   112f4:	0011c280 	call	11c28 <perf_get_section_time>
   112f8:	1009883a 	mov	r4,r2
   112fc:	180b883a 	mov	r5,r3
   11300:	e13ff615 	stw	r4,-40(fp)
   11304:	e17ff715 	stw	r5,-36(fp)
        /* section name, small C library does not support left-justify, 
         * uses right-justify instead.
         */
        printf ("|%15s", section_name);
   11308:	01000074 	movhi	r4,1
   1130c:	210b0404 	addi	r4,r4,11280
   11310:	e17ff517 	ldw	r5,-44(fp)
   11314:	001012c0 	call	1012c <printf>

        /* section usage */
        if (total_clocks) 
   11318:	e0bff817 	ldw	r2,-32(fp)
   1131c:	e0fff917 	ldw	r3,-28(fp)
   11320:	10c4b03a 	or	r2,r2,r3
   11324:	1005003a 	cmpeq	r2,r2,zero
   11328:	1000171e 	bne	r2,zero,11388 <perf_print_formatted_report+0x1e0>
        {
            printf ("|%4u ", (unsigned int)(section_clocks * 100 / total_clocks));
   1132c:	e13ff617 	ldw	r4,-40(fp)
   11330:	e17ff717 	ldw	r5,-36(fp)
   11334:	01801904 	movi	r6,100
   11338:	000f883a 	mov	r7,zero
   1133c:	00122f40 	call	122f4 <__muldi3>
   11340:	1009883a 	mov	r4,r2
   11344:	180b883a 	mov	r5,r3
   11348:	2005883a 	mov	r2,r4
   1134c:	2807883a 	mov	r3,r5
   11350:	1009883a 	mov	r4,r2
   11354:	180b883a 	mov	r5,r3
   11358:	e1bff817 	ldw	r6,-32(fp)
   1135c:	e1fff917 	ldw	r7,-28(fp)
   11360:	00124180 	call	12418 <__udivdi3>
   11364:	1009883a 	mov	r4,r2
   11368:	180b883a 	mov	r5,r3
   1136c:	2005883a 	mov	r2,r4
   11370:	2807883a 	mov	r3,r5
   11374:	100b883a 	mov	r5,r2
   11378:	01000074 	movhi	r4,1
   1137c:	210b0604 	addi	r4,r4,11288
   11380:	001012c0 	call	1012c <printf>
   11384:	00000406 	br	11398 <perf_print_formatted_report+0x1f0>
        }
        else
        {
            printf ("|%4u ", 0);
   11388:	01000074 	movhi	r4,1
   1138c:	210b0604 	addi	r4,r4,11288
   11390:	000b883a 	mov	r5,zero
   11394:	001012c0 	call	1012c <printf>
        }        

        /* section usecs */
        printf ("|%11llu ", (alt_u64)(section_clocks * 1000000 / clock_freq_hertz));
   11398:	e13ff617 	ldw	r4,-40(fp)
   1139c:	e17ff717 	ldw	r5,-36(fp)
   113a0:	018003f4 	movhi	r6,15
   113a4:	31909004 	addi	r6,r6,16960
   113a8:	000f883a 	mov	r7,zero
   113ac:	00122f40 	call	122f4 <__muldi3>
   113b0:	1009883a 	mov	r4,r2
   113b4:	180b883a 	mov	r5,r3
   113b8:	200d883a 	mov	r6,r4
   113bc:	280f883a 	mov	r7,r5
   113c0:	e0bffe17 	ldw	r2,-8(fp)
   113c4:	0007883a 	mov	r3,zero
   113c8:	3009883a 	mov	r4,r6
   113cc:	380b883a 	mov	r5,r7
   113d0:	100d883a 	mov	r6,r2
   113d4:	180f883a 	mov	r7,r3
   113d8:	00124180 	call	12418 <__udivdi3>
   113dc:	1009883a 	mov	r4,r2
   113e0:	180b883a 	mov	r5,r3
   113e4:	2005883a 	mov	r2,r4
   113e8:	2807883a 	mov	r3,r5
   113ec:	01000074 	movhi	r4,1
   113f0:	210b0804 	addi	r4,r4,11296
   113f4:	100b883a 	mov	r5,r2
   113f8:	180d883a 	mov	r6,r3
   113fc:	001012c0 	call	1012c <printf>

        /* section clocks */
        printf ("|%14u ", (unsigned int)section_clocks);
   11400:	e17ff617 	ldw	r5,-40(fp)
   11404:	01000074 	movhi	r4,1
   11408:	210b0b04 	addi	r4,r4,11308
   1140c:	001012c0 	call	1012c <printf>

        /* section occurrences */
        printf ("|%10u  |\n",
   11410:	e13ffd17 	ldw	r4,-12(fp)
   11414:	e17ff417 	ldw	r5,-48(fp)
   11418:	0011d2c0 	call	11d2c <perf_get_num_starts>
   1141c:	100b883a 	mov	r5,r2
   11420:	01000074 	movhi	r4,1
   11424:	210b0d04 	addi	r4,r4,11316
   11428:	001012c0 	call	1012c <printf>
        (unsigned int) perf_get_num_starts (perf_base, section_num));

        printf ("%s", separator);
   1142c:	01000074 	movhi	r4,1
   11430:	210b0304 	addi	r4,r4,11276
   11434:	e17ff317 	ldw	r5,-52(fp)
   11438:	001012c0 	call	1012c <printf>

        section_name = va_arg(name_args, char*);
   1143c:	e0fffc17 	ldw	r3,-16(fp)
   11440:	18800104 	addi	r2,r3,4
   11444:	e0bffc15 	stw	r2,-16(fp)
   11448:	1805883a 	mov	r2,r3
   1144c:	10800017 	ldw	r2,0(r2)
   11450:	e0bff515 	stw	r2,-44(fp)
    printf("%s", column_header);
    printf("%s", separator);

    section_name = va_arg(name_args, char*);

    for (section_num = 1; section_num <= num_sections; section_num++)
   11454:	e0bff417 	ldw	r2,-48(fp)
   11458:	10800044 	addi	r2,r2,1
   1145c:	e0bff415 	stw	r2,-48(fp)
   11460:	e0fff417 	ldw	r3,-48(fp)
   11464:	e0bfff17 	ldw	r2,-4(fp)
   11468:	10ffa00e 	bge	r2,r3,112ec <perf_print_formatted_report+0x144>
        section_name = va_arg(name_args, char*);
    }

    va_end (name_args);

    return 0;
   1146c:	0005883a 	mov	r2,zero
}
   11470:	e037883a 	mov	sp,fp
   11474:	dfc00117 	ldw	ra,4(sp)
   11478:	df000017 	ldw	fp,0(sp)
   1147c:	dec00304 	addi	sp,sp,12
   11480:	f800283a 	ret

00011484 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11484:	defff804 	addi	sp,sp,-32
   11488:	dfc00715 	stw	ra,28(sp)
   1148c:	df000615 	stw	fp,24(sp)
   11490:	df000604 	addi	fp,sp,24
   11494:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11498:	e0bffc17 	ldw	r2,-16(fp)
   1149c:	1004803a 	cmplt	r2,r2,zero
   114a0:	1000091e 	bne	r2,zero,114c8 <close+0x44>
   114a4:	e13ffc17 	ldw	r4,-16(fp)
   114a8:	01400304 	movi	r5,12
   114ac:	0010ba40 	call	10ba4 <__mulsi3>
   114b0:	1007883a 	mov	r3,r2
   114b4:	00800074 	movhi	r2,1
   114b8:	108ba104 	addi	r2,r2,11908
   114bc:	1887883a 	add	r3,r3,r2
   114c0:	e0ffff15 	stw	r3,-4(fp)
   114c4:	00000106 	br	114cc <close+0x48>
   114c8:	e03fff15 	stw	zero,-4(fp)
   114cc:	e0bfff17 	ldw	r2,-4(fp)
   114d0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   114d4:	e0bffb17 	ldw	r2,-20(fp)
   114d8:	1005003a 	cmpeq	r2,r2,zero
   114dc:	10001d1e 	bne	r2,zero,11554 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   114e0:	e0bffb17 	ldw	r2,-20(fp)
   114e4:	10800017 	ldw	r2,0(r2)
   114e8:	10800417 	ldw	r2,16(r2)
   114ec:	1005003a 	cmpeq	r2,r2,zero
   114f0:	1000071e 	bne	r2,zero,11510 <close+0x8c>
   114f4:	e0bffb17 	ldw	r2,-20(fp)
   114f8:	10800017 	ldw	r2,0(r2)
   114fc:	10800417 	ldw	r2,16(r2)
   11500:	e13ffb17 	ldw	r4,-20(fp)
   11504:	103ee83a 	callr	r2
   11508:	e0bffe15 	stw	r2,-8(fp)
   1150c:	00000106 	br	11514 <close+0x90>
   11510:	e03ffe15 	stw	zero,-8(fp)
   11514:	e0bffe17 	ldw	r2,-8(fp)
   11518:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1151c:	e13ffc17 	ldw	r4,-16(fp)
   11520:	0011b900 	call	11b90 <alt_release_fd>
    if (rval < 0)
   11524:	e0bffa17 	ldw	r2,-24(fp)
   11528:	1004403a 	cmpge	r2,r2,zero
   1152c:	1000071e 	bne	r2,zero,1154c <close+0xc8>
    {
      ALT_ERRNO = -rval;
   11530:	00115840 	call	11584 <alt_get_errno>
   11534:	e0fffa17 	ldw	r3,-24(fp)
   11538:	00c7c83a 	sub	r3,zero,r3
   1153c:	10c00015 	stw	r3,0(r2)
      return -1;
   11540:	00bfffc4 	movi	r2,-1
   11544:	e0bffd15 	stw	r2,-12(fp)
   11548:	00000806 	br	1156c <close+0xe8>
    }
    return 0;
   1154c:	e03ffd15 	stw	zero,-12(fp)
   11550:	00000606 	br	1156c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11554:	00115840 	call	11584 <alt_get_errno>
   11558:	1007883a 	mov	r3,r2
   1155c:	00801444 	movi	r2,81
   11560:	18800015 	stw	r2,0(r3)
    return -1;
   11564:	00bfffc4 	movi	r2,-1
   11568:	e0bffd15 	stw	r2,-12(fp)
   1156c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   11570:	e037883a 	mov	sp,fp
   11574:	dfc00117 	ldw	ra,4(sp)
   11578:	df000017 	ldw	fp,0(sp)
   1157c:	dec00204 	addi	sp,sp,8
   11580:	f800283a 	ret

00011584 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11584:	defffd04 	addi	sp,sp,-12
   11588:	dfc00215 	stw	ra,8(sp)
   1158c:	df000115 	stw	fp,4(sp)
   11590:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11594:	00800074 	movhi	r2,1
   11598:	108c0804 	addi	r2,r2,12320
   1159c:	10800017 	ldw	r2,0(r2)
   115a0:	1005003a 	cmpeq	r2,r2,zero
   115a4:	1000061e 	bne	r2,zero,115c0 <alt_get_errno+0x3c>
   115a8:	00800074 	movhi	r2,1
   115ac:	108c0804 	addi	r2,r2,12320
   115b0:	10800017 	ldw	r2,0(r2)
   115b4:	103ee83a 	callr	r2
   115b8:	e0bfff15 	stw	r2,-4(fp)
   115bc:	00000306 	br	115cc <alt_get_errno+0x48>
   115c0:	00800074 	movhi	r2,1
   115c4:	108cbe04 	addi	r2,r2,13048
   115c8:	e0bfff15 	stw	r2,-4(fp)
   115cc:	e0bfff17 	ldw	r2,-4(fp)
}
   115d0:	e037883a 	mov	sp,fp
   115d4:	dfc00117 	ldw	ra,4(sp)
   115d8:	df000017 	ldw	fp,0(sp)
   115dc:	dec00204 	addi	sp,sp,8
   115e0:	f800283a 	ret

000115e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   115e4:	deffff04 	addi	sp,sp,-4
   115e8:	df000015 	stw	fp,0(sp)
   115ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   115f0:	e037883a 	mov	sp,fp
   115f4:	df000017 	ldw	fp,0(sp)
   115f8:	dec00104 	addi	sp,sp,4
   115fc:	f800283a 	ret

00011600 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11600:	defffc04 	addi	sp,sp,-16
   11604:	df000315 	stw	fp,12(sp)
   11608:	df000304 	addi	fp,sp,12
   1160c:	e13ffd15 	stw	r4,-12(fp)
   11610:	e17ffe15 	stw	r5,-8(fp)
   11614:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11618:	e0bfff17 	ldw	r2,-4(fp)
}
   1161c:	e037883a 	mov	sp,fp
   11620:	df000017 	ldw	fp,0(sp)
   11624:	dec00104 	addi	sp,sp,4
   11628:	f800283a 	ret

0001162c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1162c:	defff904 	addi	sp,sp,-28
   11630:	dfc00615 	stw	ra,24(sp)
   11634:	df000515 	stw	fp,20(sp)
   11638:	df000504 	addi	fp,sp,20
   1163c:	e13ffd15 	stw	r4,-12(fp)
   11640:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11644:	e0bffd17 	ldw	r2,-12(fp)
   11648:	1005003a 	cmpeq	r2,r2,zero
   1164c:	1000041e 	bne	r2,zero,11660 <alt_dev_llist_insert+0x34>
   11650:	e0bffd17 	ldw	r2,-12(fp)
   11654:	10800217 	ldw	r2,8(r2)
   11658:	1004c03a 	cmpne	r2,r2,zero
   1165c:	1000071e 	bne	r2,zero,1167c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   11660:	00116e00 	call	116e0 <alt_get_errno>
   11664:	1007883a 	mov	r3,r2
   11668:	00800584 	movi	r2,22
   1166c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11670:	00bffa84 	movi	r2,-22
   11674:	e0bfff15 	stw	r2,-4(fp)
   11678:	00001306 	br	116c8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1167c:	e0fffd17 	ldw	r3,-12(fp)
   11680:	e0bffe17 	ldw	r2,-8(fp)
   11684:	e0bffb15 	stw	r2,-20(fp)
   11688:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1168c:	e0fffc17 	ldw	r3,-16(fp)
   11690:	e0bffb17 	ldw	r2,-20(fp)
   11694:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   11698:	e0bffb17 	ldw	r2,-20(fp)
   1169c:	10c00017 	ldw	r3,0(r2)
   116a0:	e0bffc17 	ldw	r2,-16(fp)
   116a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   116a8:	e0bffb17 	ldw	r2,-20(fp)
   116ac:	10c00017 	ldw	r3,0(r2)
   116b0:	e0bffc17 	ldw	r2,-16(fp)
   116b4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   116b8:	e0fffb17 	ldw	r3,-20(fp)
   116bc:	e0bffc17 	ldw	r2,-16(fp)
   116c0:	18800015 	stw	r2,0(r3)

  return 0;  
   116c4:	e03fff15 	stw	zero,-4(fp)
   116c8:	e0bfff17 	ldw	r2,-4(fp)
}
   116cc:	e037883a 	mov	sp,fp
   116d0:	dfc00117 	ldw	ra,4(sp)
   116d4:	df000017 	ldw	fp,0(sp)
   116d8:	dec00204 	addi	sp,sp,8
   116dc:	f800283a 	ret

000116e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   116e0:	defffd04 	addi	sp,sp,-12
   116e4:	dfc00215 	stw	ra,8(sp)
   116e8:	df000115 	stw	fp,4(sp)
   116ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   116f0:	00800074 	movhi	r2,1
   116f4:	108c0804 	addi	r2,r2,12320
   116f8:	10800017 	ldw	r2,0(r2)
   116fc:	1005003a 	cmpeq	r2,r2,zero
   11700:	1000061e 	bne	r2,zero,1171c <alt_get_errno+0x3c>
   11704:	00800074 	movhi	r2,1
   11708:	108c0804 	addi	r2,r2,12320
   1170c:	10800017 	ldw	r2,0(r2)
   11710:	103ee83a 	callr	r2
   11714:	e0bfff15 	stw	r2,-4(fp)
   11718:	00000306 	br	11728 <alt_get_errno+0x48>
   1171c:	00800074 	movhi	r2,1
   11720:	108cbe04 	addi	r2,r2,13048
   11724:	e0bfff15 	stw	r2,-4(fp)
   11728:	e0bfff17 	ldw	r2,-4(fp)
}
   1172c:	e037883a 	mov	sp,fp
   11730:	dfc00117 	ldw	ra,4(sp)
   11734:	df000017 	ldw	fp,0(sp)
   11738:	dec00204 	addi	sp,sp,8
   1173c:	f800283a 	ret

00011740 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11740:	deffff04 	addi	sp,sp,-4
   11744:	df000015 	stw	fp,0(sp)
   11748:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1174c:	e037883a 	mov	sp,fp
   11750:	df000017 	ldw	fp,0(sp)
   11754:	dec00104 	addi	sp,sp,4
   11758:	f800283a 	ret

0001175c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1175c:	defff804 	addi	sp,sp,-32
   11760:	dfc00715 	stw	ra,28(sp)
   11764:	df000615 	stw	fp,24(sp)
   11768:	dc000515 	stw	r16,20(sp)
   1176c:	df000504 	addi	fp,sp,20
   11770:	e13ffc15 	stw	r4,-16(fp)
   11774:	e17ffd15 	stw	r5,-12(fp)
   11778:	e1bffe15 	stw	r6,-8(fp)
   1177c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   11780:	e13ffd17 	ldw	r4,-12(fp)
   11784:	e17ffe17 	ldw	r5,-8(fp)
   11788:	e1bfff17 	ldw	r6,-4(fp)
   1178c:	00119a40 	call	119a4 <open>
   11790:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   11794:	e0bffb17 	ldw	r2,-20(fp)
   11798:	1004803a 	cmplt	r2,r2,zero
   1179c:	10001f1e 	bne	r2,zero,1181c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   117a0:	e13ffb17 	ldw	r4,-20(fp)
   117a4:	04000074 	movhi	r16,1
   117a8:	840ba104 	addi	r16,r16,11908
   117ac:	01400304 	movi	r5,12
   117b0:	0010ba40 	call	10ba4 <__mulsi3>
   117b4:	1405883a 	add	r2,r2,r16
   117b8:	10c00017 	ldw	r3,0(r2)
   117bc:	e0bffc17 	ldw	r2,-16(fp)
   117c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   117c4:	e13ffb17 	ldw	r4,-20(fp)
   117c8:	04000074 	movhi	r16,1
   117cc:	840ba104 	addi	r16,r16,11908
   117d0:	01400304 	movi	r5,12
   117d4:	0010ba40 	call	10ba4 <__mulsi3>
   117d8:	1405883a 	add	r2,r2,r16
   117dc:	10800104 	addi	r2,r2,4
   117e0:	10c00017 	ldw	r3,0(r2)
   117e4:	e0bffc17 	ldw	r2,-16(fp)
   117e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   117ec:	e13ffb17 	ldw	r4,-20(fp)
   117f0:	04000074 	movhi	r16,1
   117f4:	840ba104 	addi	r16,r16,11908
   117f8:	01400304 	movi	r5,12
   117fc:	0010ba40 	call	10ba4 <__mulsi3>
   11800:	1405883a 	add	r2,r2,r16
   11804:	10800204 	addi	r2,r2,8
   11808:	10c00017 	ldw	r3,0(r2)
   1180c:	e0bffc17 	ldw	r2,-16(fp)
   11810:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11814:	e13ffb17 	ldw	r4,-20(fp)
   11818:	0011b900 	call	11b90 <alt_release_fd>
  }
} 
   1181c:	e037883a 	mov	sp,fp
   11820:	dfc00217 	ldw	ra,8(sp)
   11824:	df000117 	ldw	fp,4(sp)
   11828:	dc000017 	ldw	r16,0(sp)
   1182c:	dec00304 	addi	sp,sp,12
   11830:	f800283a 	ret

00011834 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11834:	defffb04 	addi	sp,sp,-20
   11838:	dfc00415 	stw	ra,16(sp)
   1183c:	df000315 	stw	fp,12(sp)
   11840:	df000304 	addi	fp,sp,12
   11844:	e13ffd15 	stw	r4,-12(fp)
   11848:	e17ffe15 	stw	r5,-8(fp)
   1184c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11850:	01000074 	movhi	r4,1
   11854:	210ba404 	addi	r4,r4,11920
   11858:	e17ffd17 	ldw	r5,-12(fp)
   1185c:	01800044 	movi	r6,1
   11860:	01c07fc4 	movi	r7,511
   11864:	001175c0 	call	1175c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11868:	01000074 	movhi	r4,1
   1186c:	210ba104 	addi	r4,r4,11908
   11870:	e17ffe17 	ldw	r5,-8(fp)
   11874:	000d883a 	mov	r6,zero
   11878:	01c07fc4 	movi	r7,511
   1187c:	001175c0 	call	1175c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11880:	01000074 	movhi	r4,1
   11884:	210ba704 	addi	r4,r4,11932
   11888:	e17fff17 	ldw	r5,-4(fp)
   1188c:	01800044 	movi	r6,1
   11890:	01c07fc4 	movi	r7,511
   11894:	001175c0 	call	1175c <alt_open_fd>
}  
   11898:	e037883a 	mov	sp,fp
   1189c:	dfc00117 	ldw	ra,4(sp)
   118a0:	df000017 	ldw	fp,0(sp)
   118a4:	dec00204 	addi	sp,sp,8
   118a8:	f800283a 	ret

000118ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   118ac:	defffa04 	addi	sp,sp,-24
   118b0:	dfc00515 	stw	ra,20(sp)
   118b4:	df000415 	stw	fp,16(sp)
   118b8:	dc000315 	stw	r16,12(sp)
   118bc:	df000304 	addi	fp,sp,12
   118c0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   118c4:	e0bffe17 	ldw	r2,-8(fp)
   118c8:	10800217 	ldw	r2,8(r2)
   118cc:	10d00034 	orhi	r3,r2,16384
   118d0:	e0bffe17 	ldw	r2,-8(fp)
   118d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   118d8:	e03ffd15 	stw	zero,-12(fp)
   118dc:	00002306 	br	1196c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   118e0:	e13ffd17 	ldw	r4,-12(fp)
   118e4:	04000074 	movhi	r16,1
   118e8:	840ba104 	addi	r16,r16,11908
   118ec:	01400304 	movi	r5,12
   118f0:	0010ba40 	call	10ba4 <__mulsi3>
   118f4:	1405883a 	add	r2,r2,r16
   118f8:	10c00017 	ldw	r3,0(r2)
   118fc:	e0bffe17 	ldw	r2,-8(fp)
   11900:	10800017 	ldw	r2,0(r2)
   11904:	1880161e 	bne	r3,r2,11960 <alt_file_locked+0xb4>
   11908:	e13ffd17 	ldw	r4,-12(fp)
   1190c:	04000074 	movhi	r16,1
   11910:	840ba104 	addi	r16,r16,11908
   11914:	01400304 	movi	r5,12
   11918:	0010ba40 	call	10ba4 <__mulsi3>
   1191c:	1405883a 	add	r2,r2,r16
   11920:	10800204 	addi	r2,r2,8
   11924:	10800017 	ldw	r2,0(r2)
   11928:	1004403a 	cmpge	r2,r2,zero
   1192c:	10000c1e 	bne	r2,zero,11960 <alt_file_locked+0xb4>
   11930:	e13ffd17 	ldw	r4,-12(fp)
   11934:	01400304 	movi	r5,12
   11938:	0010ba40 	call	10ba4 <__mulsi3>
   1193c:	1007883a 	mov	r3,r2
   11940:	00800074 	movhi	r2,1
   11944:	108ba104 	addi	r2,r2,11908
   11948:	1887883a 	add	r3,r3,r2
   1194c:	e0bffe17 	ldw	r2,-8(fp)
   11950:	18800326 	beq	r3,r2,11960 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11954:	00bffcc4 	movi	r2,-13
   11958:	e0bfff15 	stw	r2,-4(fp)
   1195c:	00000a06 	br	11988 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11960:	e0bffd17 	ldw	r2,-12(fp)
   11964:	10800044 	addi	r2,r2,1
   11968:	e0bffd15 	stw	r2,-12(fp)
   1196c:	00800074 	movhi	r2,1
   11970:	108c0704 	addi	r2,r2,12316
   11974:	10800017 	ldw	r2,0(r2)
   11978:	1007883a 	mov	r3,r2
   1197c:	e0bffd17 	ldw	r2,-12(fp)
   11980:	18bfd72e 	bgeu	r3,r2,118e0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11984:	e03fff15 	stw	zero,-4(fp)
   11988:	e0bfff17 	ldw	r2,-4(fp)
}
   1198c:	e037883a 	mov	sp,fp
   11990:	dfc00217 	ldw	ra,8(sp)
   11994:	df000117 	ldw	fp,4(sp)
   11998:	dc000017 	ldw	r16,0(sp)
   1199c:	dec00304 	addi	sp,sp,12
   119a0:	f800283a 	ret

000119a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   119a4:	defff404 	addi	sp,sp,-48
   119a8:	dfc00b15 	stw	ra,44(sp)
   119ac:	df000a15 	stw	fp,40(sp)
   119b0:	df000a04 	addi	fp,sp,40
   119b4:	e13ffb15 	stw	r4,-20(fp)
   119b8:	e17ffc15 	stw	r5,-16(fp)
   119bc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   119c0:	00bfffc4 	movi	r2,-1
   119c4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   119c8:	00bffb44 	movi	r2,-19
   119cc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   119d0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   119d4:	e13ffb17 	ldw	r4,-20(fp)
   119d8:	01400074 	movhi	r5,1
   119dc:	294c0504 	addi	r5,r5,12308
   119e0:	0011db00 	call	11db0 <alt_find_dev>
   119e4:	e0bffa15 	stw	r2,-24(fp)
   119e8:	e0bffa17 	ldw	r2,-24(fp)
   119ec:	1004c03a 	cmpne	r2,r2,zero
   119f0:	1000051e 	bne	r2,zero,11a08 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   119f4:	e13ffb17 	ldw	r4,-20(fp)
   119f8:	0011e440 	call	11e44 <alt_find_file>
   119fc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   11a00:	00800044 	movi	r2,1
   11a04:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11a08:	e0bffa17 	ldw	r2,-24(fp)
   11a0c:	1005003a 	cmpeq	r2,r2,zero
   11a10:	1000311e 	bne	r2,zero,11ad8 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11a14:	e13ffa17 	ldw	r4,-24(fp)
   11a18:	0011f640 	call	11f64 <alt_get_fd>
   11a1c:	e0bff815 	stw	r2,-32(fp)
   11a20:	e0bff817 	ldw	r2,-32(fp)
   11a24:	1004403a 	cmpge	r2,r2,zero
   11a28:	1000031e 	bne	r2,zero,11a38 <open+0x94>
    {
      status = index;
   11a2c:	e0bff817 	ldw	r2,-32(fp)
   11a30:	e0bff715 	stw	r2,-36(fp)
   11a34:	00002a06 	br	11ae0 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   11a38:	e13ff817 	ldw	r4,-32(fp)
   11a3c:	01400304 	movi	r5,12
   11a40:	0010ba40 	call	10ba4 <__mulsi3>
   11a44:	1007883a 	mov	r3,r2
   11a48:	00800074 	movhi	r2,1
   11a4c:	108ba104 	addi	r2,r2,11908
   11a50:	1885883a 	add	r2,r3,r2
   11a54:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11a58:	e0fffc17 	ldw	r3,-16(fp)
   11a5c:	00900034 	movhi	r2,16384
   11a60:	10bfffc4 	addi	r2,r2,-1
   11a64:	1886703a 	and	r3,r3,r2
   11a68:	e0bff917 	ldw	r2,-28(fp)
   11a6c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11a70:	e0bff617 	ldw	r2,-40(fp)
   11a74:	1004c03a 	cmpne	r2,r2,zero
   11a78:	1000061e 	bne	r2,zero,11a94 <open+0xf0>
   11a7c:	e13ff917 	ldw	r4,-28(fp)
   11a80:	00118ac0 	call	118ac <alt_file_locked>
   11a84:	e0bff715 	stw	r2,-36(fp)
   11a88:	e0bff717 	ldw	r2,-36(fp)
   11a8c:	1004803a 	cmplt	r2,r2,zero
   11a90:	1000131e 	bne	r2,zero,11ae0 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11a94:	e0bffa17 	ldw	r2,-24(fp)
   11a98:	10800317 	ldw	r2,12(r2)
   11a9c:	1005003a 	cmpeq	r2,r2,zero
   11aa0:	1000091e 	bne	r2,zero,11ac8 <open+0x124>
   11aa4:	e0bffa17 	ldw	r2,-24(fp)
   11aa8:	10800317 	ldw	r2,12(r2)
   11aac:	e13ff917 	ldw	r4,-28(fp)
   11ab0:	e17ffb17 	ldw	r5,-20(fp)
   11ab4:	e1bffc17 	ldw	r6,-16(fp)
   11ab8:	e1fffd17 	ldw	r7,-12(fp)
   11abc:	103ee83a 	callr	r2
   11ac0:	e0bfff15 	stw	r2,-4(fp)
   11ac4:	00000106 	br	11acc <open+0x128>
   11ac8:	e03fff15 	stw	zero,-4(fp)
   11acc:	e0bfff17 	ldw	r2,-4(fp)
   11ad0:	e0bff715 	stw	r2,-36(fp)
   11ad4:	00000206 	br	11ae0 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11ad8:	00bffb44 	movi	r2,-19
   11adc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11ae0:	e0bff717 	ldw	r2,-36(fp)
   11ae4:	1004403a 	cmpge	r2,r2,zero
   11ae8:	1000091e 	bne	r2,zero,11b10 <open+0x16c>
  {
    alt_release_fd (index);  
   11aec:	e13ff817 	ldw	r4,-32(fp)
   11af0:	0011b900 	call	11b90 <alt_release_fd>
    ALT_ERRNO = -status;
   11af4:	0011b300 	call	11b30 <alt_get_errno>
   11af8:	e0fff717 	ldw	r3,-36(fp)
   11afc:	00c7c83a 	sub	r3,zero,r3
   11b00:	10c00015 	stw	r3,0(r2)
    return -1;
   11b04:	00bfffc4 	movi	r2,-1
   11b08:	e0bffe15 	stw	r2,-8(fp)
   11b0c:	00000206 	br	11b18 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   11b10:	e0bff817 	ldw	r2,-32(fp)
   11b14:	e0bffe15 	stw	r2,-8(fp)
   11b18:	e0bffe17 	ldw	r2,-8(fp)
}
   11b1c:	e037883a 	mov	sp,fp
   11b20:	dfc00117 	ldw	ra,4(sp)
   11b24:	df000017 	ldw	fp,0(sp)
   11b28:	dec00204 	addi	sp,sp,8
   11b2c:	f800283a 	ret

00011b30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11b30:	defffd04 	addi	sp,sp,-12
   11b34:	dfc00215 	stw	ra,8(sp)
   11b38:	df000115 	stw	fp,4(sp)
   11b3c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11b40:	00800074 	movhi	r2,1
   11b44:	108c0804 	addi	r2,r2,12320
   11b48:	10800017 	ldw	r2,0(r2)
   11b4c:	1005003a 	cmpeq	r2,r2,zero
   11b50:	1000061e 	bne	r2,zero,11b6c <alt_get_errno+0x3c>
   11b54:	00800074 	movhi	r2,1
   11b58:	108c0804 	addi	r2,r2,12320
   11b5c:	10800017 	ldw	r2,0(r2)
   11b60:	103ee83a 	callr	r2
   11b64:	e0bfff15 	stw	r2,-4(fp)
   11b68:	00000306 	br	11b78 <alt_get_errno+0x48>
   11b6c:	00800074 	movhi	r2,1
   11b70:	108cbe04 	addi	r2,r2,13048
   11b74:	e0bfff15 	stw	r2,-4(fp)
   11b78:	e0bfff17 	ldw	r2,-4(fp)
}
   11b7c:	e037883a 	mov	sp,fp
   11b80:	dfc00117 	ldw	ra,4(sp)
   11b84:	df000017 	ldw	fp,0(sp)
   11b88:	dec00204 	addi	sp,sp,8
   11b8c:	f800283a 	ret

00011b90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11b90:	defffc04 	addi	sp,sp,-16
   11b94:	dfc00315 	stw	ra,12(sp)
   11b98:	df000215 	stw	fp,8(sp)
   11b9c:	dc000115 	stw	r16,4(sp)
   11ba0:	df000104 	addi	fp,sp,4
   11ba4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   11ba8:	e0bfff17 	ldw	r2,-4(fp)
   11bac:	108000d0 	cmplti	r2,r2,3
   11bb0:	10000f1e 	bne	r2,zero,11bf0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   11bb4:	e13fff17 	ldw	r4,-4(fp)
   11bb8:	04000074 	movhi	r16,1
   11bbc:	840ba104 	addi	r16,r16,11908
   11bc0:	01400304 	movi	r5,12
   11bc4:	0010ba40 	call	10ba4 <__mulsi3>
   11bc8:	1405883a 	add	r2,r2,r16
   11bcc:	10800204 	addi	r2,r2,8
   11bd0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   11bd4:	e13fff17 	ldw	r4,-4(fp)
   11bd8:	04000074 	movhi	r16,1
   11bdc:	840ba104 	addi	r16,r16,11908
   11be0:	01400304 	movi	r5,12
   11be4:	0010ba40 	call	10ba4 <__mulsi3>
   11be8:	1405883a 	add	r2,r2,r16
   11bec:	10000015 	stw	zero,0(r2)
  }
}
   11bf0:	e037883a 	mov	sp,fp
   11bf4:	dfc00217 	ldw	ra,8(sp)
   11bf8:	df000117 	ldw	fp,4(sp)
   11bfc:	dc000017 	ldw	r16,0(sp)
   11c00:	dec00304 	addi	sp,sp,12
   11c04:	f800283a 	ret

00011c08 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   11c08:	deffff04 	addi	sp,sp,-4
   11c0c:	df000015 	stw	fp,0(sp)
   11c10:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11c14:	000170fa 	wrctl	ienable,zero
}
   11c18:	e037883a 	mov	sp,fp
   11c1c:	df000017 	ldw	fp,0(sp)
   11c20:	dec00104 	addi	sp,sp,4
   11c24:	f800283a 	ret

00011c28 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
   11c28:	defff904 	addi	sp,sp,-28
   11c2c:	df000615 	stw	fp,24(sp)
   11c30:	df000604 	addi	fp,sp,24
   11c34:	e13ffe15 	stw	r4,-8(fp)
   11c38:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
   11c3c:	e03ffa15 	stw	zero,-24(fp)
   11c40:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
   11c44:	e0bffe17 	ldw	r2,-8(fp)
   11c48:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
   11c4c:	e0bfff17 	ldw	r2,-4(fp)
   11c50:	1004913a 	slli	r2,r2,4
   11c54:	1007883a 	mov	r3,r2
   11c58:	e0bffe17 	ldw	r2,-8(fp)
   11c5c:	1885883a 	add	r2,r3,r2
   11c60:	10800037 	ldwio	r2,0(r2)
   11c64:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
   11c68:	e0bfff17 	ldw	r2,-4(fp)
   11c6c:	1004913a 	slli	r2,r2,4
   11c70:	1007883a 	mov	r3,r2
   11c74:	e0bffe17 	ldw	r2,-8(fp)
   11c78:	1885883a 	add	r2,r3,r2
   11c7c:	10800104 	addi	r2,r2,4
   11c80:	10800037 	ldwio	r2,0(r2)
   11c84:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   11c88:	e0bffc17 	ldw	r2,-16(fp)
   11c8c:	0007883a 	mov	r3,zero
   11c90:	100a983a 	sll	r5,r2,zero
   11c94:	0009883a 	mov	r4,zero
   11c98:	e0bffd17 	ldw	r2,-12(fp)
   11c9c:	0007883a 	mov	r3,zero
   11ca0:	208cb03a 	or	r6,r4,r2
   11ca4:	e1bffa15 	stw	r6,-24(fp)
   11ca8:	28c4b03a 	or	r2,r5,r3
   11cac:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
   11cb0:	e17ffa17 	ldw	r5,-24(fp)
   11cb4:	e1bffb17 	ldw	r6,-20(fp)
   11cb8:	2807883a 	mov	r3,r5
   11cbc:	3009883a 	mov	r4,r6
}
   11cc0:	1805883a 	mov	r2,r3
   11cc4:	2007883a 	mov	r3,r4
   11cc8:	e037883a 	mov	sp,fp
   11ccc:	df000017 	ldw	fp,0(sp)
   11cd0:	dec00104 	addi	sp,sp,4
   11cd4:	f800283a 	ret

00011cd8 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
   11cd8:	defffd04 	addi	sp,sp,-12
   11cdc:	dfc00215 	stw	ra,8(sp)
   11ce0:	df000115 	stw	fp,4(sp)
   11ce4:	df000104 	addi	fp,sp,4
   11ce8:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
   11cec:	e13fff17 	ldw	r4,-4(fp)
   11cf0:	000b883a 	mov	r5,zero
   11cf4:	0011c280 	call	11c28 <perf_get_section_time>
   11cf8:	1009883a 	mov	r4,r2
   11cfc:	180b883a 	mov	r5,r3
   11d00:	200d883a 	mov	r6,r4
   11d04:	280f883a 	mov	r7,r5
   11d08:	3007883a 	mov	r3,r6
   11d0c:	3809883a 	mov	r4,r7
}
   11d10:	1805883a 	mov	r2,r3
   11d14:	2007883a 	mov	r3,r4
   11d18:	e037883a 	mov	sp,fp
   11d1c:	dfc00117 	ldw	ra,4(sp)
   11d20:	df000017 	ldw	fp,0(sp)
   11d24:	dec00204 	addi	sp,sp,8
   11d28:	f800283a 	ret

00011d2c <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
   11d2c:	defffd04 	addi	sp,sp,-12
   11d30:	df000215 	stw	fp,8(sp)
   11d34:	df000204 	addi	fp,sp,8
   11d38:	e13ffe15 	stw	r4,-8(fp)
   11d3c:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
   11d40:	e0bfff17 	ldw	r2,-4(fp)
   11d44:	1004913a 	slli	r2,r2,4
   11d48:	1007883a 	mov	r3,r2
   11d4c:	e0bffe17 	ldw	r2,-8(fp)
   11d50:	1885883a 	add	r2,r3,r2
   11d54:	10800204 	addi	r2,r2,8
   11d58:	10800037 	ldwio	r2,0(r2)
}
   11d5c:	e037883a 	mov	sp,fp
   11d60:	df000017 	ldw	fp,0(sp)
   11d64:	dec00104 	addi	sp,sp,4
   11d68:	f800283a 	ret

00011d6c <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
   11d6c:	deffff04 	addi	sp,sp,-4
   11d70:	df000015 	stw	fp,0(sp)
   11d74:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
   11d78:	0005883a 	mov	r2,zero
#else
    return (void*)0;
#endif
}
   11d7c:	e037883a 	mov	sp,fp
   11d80:	df000017 	ldw	fp,0(sp)
   11d84:	dec00104 	addi	sp,sp,4
   11d88:	f800283a 	ret

00011d8c <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
   11d8c:	deffff04 	addi	sp,sp,-4
   11d90:	df000015 	stw	fp,0(sp)
   11d94:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
   11d98:	0080bef4 	movhi	r2,763
   11d9c:	10bc2004 	addi	r2,r2,-3968
}
   11da0:	e037883a 	mov	sp,fp
   11da4:	df000017 	ldw	fp,0(sp)
   11da8:	dec00104 	addi	sp,sp,4
   11dac:	f800283a 	ret

00011db0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11db0:	defff904 	addi	sp,sp,-28
   11db4:	dfc00615 	stw	ra,24(sp)
   11db8:	df000515 	stw	fp,20(sp)
   11dbc:	df000504 	addi	fp,sp,20
   11dc0:	e13ffd15 	stw	r4,-12(fp)
   11dc4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11dc8:	e0bffe17 	ldw	r2,-8(fp)
   11dcc:	10800017 	ldw	r2,0(r2)
   11dd0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11dd4:	e13ffd17 	ldw	r4,-12(fp)
   11dd8:	00109c00 	call	109c0 <strlen>
   11ddc:	10800044 	addi	r2,r2,1
   11de0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11de4:	00000d06 	br	11e1c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11de8:	e0bffc17 	ldw	r2,-16(fp)
   11dec:	11000217 	ldw	r4,8(r2)
   11df0:	e1bffb17 	ldw	r6,-20(fp)
   11df4:	e17ffd17 	ldw	r5,-12(fp)
   11df8:	00120540 	call	12054 <memcmp>
   11dfc:	1004c03a 	cmpne	r2,r2,zero
   11e00:	1000031e 	bne	r2,zero,11e10 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11e04:	e0bffc17 	ldw	r2,-16(fp)
   11e08:	e0bfff15 	stw	r2,-4(fp)
   11e0c:	00000706 	br	11e2c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11e10:	e0bffc17 	ldw	r2,-16(fp)
   11e14:	10800017 	ldw	r2,0(r2)
   11e18:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11e1c:	e0fffe17 	ldw	r3,-8(fp)
   11e20:	e0bffc17 	ldw	r2,-16(fp)
   11e24:	10fff01e 	bne	r2,r3,11de8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11e28:	e03fff15 	stw	zero,-4(fp)
   11e2c:	e0bfff17 	ldw	r2,-4(fp)
}
   11e30:	e037883a 	mov	sp,fp
   11e34:	dfc00117 	ldw	ra,4(sp)
   11e38:	df000017 	ldw	fp,0(sp)
   11e3c:	dec00204 	addi	sp,sp,8
   11e40:	f800283a 	ret

00011e44 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11e44:	defffa04 	addi	sp,sp,-24
   11e48:	dfc00515 	stw	ra,20(sp)
   11e4c:	df000415 	stw	fp,16(sp)
   11e50:	df000404 	addi	fp,sp,16
   11e54:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11e58:	00800074 	movhi	r2,1
   11e5c:	108c0304 	addi	r2,r2,12300
   11e60:	10800017 	ldw	r2,0(r2)
   11e64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11e68:	00003306 	br	11f38 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   11e6c:	e0bffd17 	ldw	r2,-12(fp)
   11e70:	11000217 	ldw	r4,8(r2)
   11e74:	00109c00 	call	109c0 <strlen>
   11e78:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   11e7c:	e0bffd17 	ldw	r2,-12(fp)
   11e80:	10c00217 	ldw	r3,8(r2)
   11e84:	e0bffc17 	ldw	r2,-16(fp)
   11e88:	1885883a 	add	r2,r3,r2
   11e8c:	10bfffc4 	addi	r2,r2,-1
   11e90:	10800003 	ldbu	r2,0(r2)
   11e94:	10803fcc 	andi	r2,r2,255
   11e98:	1080201c 	xori	r2,r2,128
   11e9c:	10bfe004 	addi	r2,r2,-128
   11ea0:	10800bd8 	cmpnei	r2,r2,47
   11ea4:	1000031e 	bne	r2,zero,11eb4 <alt_find_file+0x70>
    {
      len -= 1;
   11ea8:	e0bffc17 	ldw	r2,-16(fp)
   11eac:	10bfffc4 	addi	r2,r2,-1
   11eb0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11eb4:	e0bffc17 	ldw	r2,-16(fp)
   11eb8:	1007883a 	mov	r3,r2
   11ebc:	e0bffe17 	ldw	r2,-8(fp)
   11ec0:	1885883a 	add	r2,r3,r2
   11ec4:	10800003 	ldbu	r2,0(r2)
   11ec8:	10803fcc 	andi	r2,r2,255
   11ecc:	1080201c 	xori	r2,r2,128
   11ed0:	10bfe004 	addi	r2,r2,-128
   11ed4:	10800be0 	cmpeqi	r2,r2,47
   11ed8:	10000a1e 	bne	r2,zero,11f04 <alt_find_file+0xc0>
   11edc:	e0bffc17 	ldw	r2,-16(fp)
   11ee0:	1007883a 	mov	r3,r2
   11ee4:	e0bffe17 	ldw	r2,-8(fp)
   11ee8:	1885883a 	add	r2,r3,r2
   11eec:	10800003 	ldbu	r2,0(r2)
   11ef0:	10803fcc 	andi	r2,r2,255
   11ef4:	1080201c 	xori	r2,r2,128
   11ef8:	10bfe004 	addi	r2,r2,-128
   11efc:	1004c03a 	cmpne	r2,r2,zero
   11f00:	10000a1e 	bne	r2,zero,11f2c <alt_find_file+0xe8>
   11f04:	e0bffd17 	ldw	r2,-12(fp)
   11f08:	11000217 	ldw	r4,8(r2)
   11f0c:	e1bffc17 	ldw	r6,-16(fp)
   11f10:	e17ffe17 	ldw	r5,-8(fp)
   11f14:	00120540 	call	12054 <memcmp>
   11f18:	1004c03a 	cmpne	r2,r2,zero
   11f1c:	1000031e 	bne	r2,zero,11f2c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11f20:	e0bffd17 	ldw	r2,-12(fp)
   11f24:	e0bfff15 	stw	r2,-4(fp)
   11f28:	00000806 	br	11f4c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   11f2c:	e0bffd17 	ldw	r2,-12(fp)
   11f30:	10800017 	ldw	r2,0(r2)
   11f34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11f38:	00c00074 	movhi	r3,1
   11f3c:	18cc0304 	addi	r3,r3,12300
   11f40:	e0bffd17 	ldw	r2,-12(fp)
   11f44:	10ffc91e 	bne	r2,r3,11e6c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11f48:	e03fff15 	stw	zero,-4(fp)
   11f4c:	e0bfff17 	ldw	r2,-4(fp)
}
   11f50:	e037883a 	mov	sp,fp
   11f54:	dfc00117 	ldw	ra,4(sp)
   11f58:	df000017 	ldw	fp,0(sp)
   11f5c:	dec00204 	addi	sp,sp,8
   11f60:	f800283a 	ret

00011f64 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11f64:	defffa04 	addi	sp,sp,-24
   11f68:	dfc00515 	stw	ra,20(sp)
   11f6c:	df000415 	stw	fp,16(sp)
   11f70:	dc000315 	stw	r16,12(sp)
   11f74:	df000304 	addi	fp,sp,12
   11f78:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   11f7c:	00bffa04 	movi	r2,-24
   11f80:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11f84:	e03ffe15 	stw	zero,-8(fp)
   11f88:	00002006 	br	1200c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   11f8c:	e13ffe17 	ldw	r4,-8(fp)
   11f90:	04000074 	movhi	r16,1
   11f94:	840ba104 	addi	r16,r16,11908
   11f98:	01400304 	movi	r5,12
   11f9c:	0010ba40 	call	10ba4 <__mulsi3>
   11fa0:	1405883a 	add	r2,r2,r16
   11fa4:	10800017 	ldw	r2,0(r2)
   11fa8:	1004c03a 	cmpne	r2,r2,zero
   11fac:	1000141e 	bne	r2,zero,12000 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   11fb0:	e13ffe17 	ldw	r4,-8(fp)
   11fb4:	04000074 	movhi	r16,1
   11fb8:	840ba104 	addi	r16,r16,11908
   11fbc:	01400304 	movi	r5,12
   11fc0:	0010ba40 	call	10ba4 <__mulsi3>
   11fc4:	1407883a 	add	r3,r2,r16
   11fc8:	e0bfff17 	ldw	r2,-4(fp)
   11fcc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   11fd0:	00800074 	movhi	r2,1
   11fd4:	108c0704 	addi	r2,r2,12316
   11fd8:	10c00017 	ldw	r3,0(r2)
   11fdc:	e0bffe17 	ldw	r2,-8(fp)
   11fe0:	1880040e 	bge	r3,r2,11ff4 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   11fe4:	00c00074 	movhi	r3,1
   11fe8:	18cc0704 	addi	r3,r3,12316
   11fec:	e0bffe17 	ldw	r2,-8(fp)
   11ff0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   11ff4:	e0bffe17 	ldw	r2,-8(fp)
   11ff8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11ffc:	00000606 	br	12018 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12000:	e0bffe17 	ldw	r2,-8(fp)
   12004:	10800044 	addi	r2,r2,1
   12008:	e0bffe15 	stw	r2,-8(fp)
   1200c:	e0bffe17 	ldw	r2,-8(fp)
   12010:	10800810 	cmplti	r2,r2,32
   12014:	103fdd1e 	bne	r2,zero,11f8c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12018:	e0bffd17 	ldw	r2,-12(fp)
}
   1201c:	e037883a 	mov	sp,fp
   12020:	dfc00217 	ldw	ra,8(sp)
   12024:	df000117 	ldw	fp,4(sp)
   12028:	dc000017 	ldw	r16,0(sp)
   1202c:	dec00304 	addi	sp,sp,12
   12030:	f800283a 	ret

00012034 <exit>:
   12034:	defffe04 	addi	sp,sp,-8
   12038:	dc400015 	stw	r17,0(sp)
   1203c:	000b883a 	mov	r5,zero
   12040:	2023883a 	mov	r17,r4
   12044:	dfc00115 	stw	ra,4(sp)
   12048:	00121380 	call	12138 <__call_exitprocs>
   1204c:	8809883a 	mov	r4,r17
   12050:	0012ac40 	call	12ac4 <_exit>

00012054 <memcmp>:
   12054:	31ffffc4 	addi	r7,r6,-1
   12058:	3000061e 	bne	r6,zero,12074 <memcmp+0x20>
   1205c:	00000a06 	br	12088 <memcmp+0x34>
   12060:	39ffffc4 	addi	r7,r7,-1
   12064:	00bfffc4 	movi	r2,-1
   12068:	21000044 	addi	r4,r4,1
   1206c:	29400044 	addi	r5,r5,1
   12070:	38800526 	beq	r7,r2,12088 <memcmp+0x34>
   12074:	20c00003 	ldbu	r3,0(r4)
   12078:	28800003 	ldbu	r2,0(r5)
   1207c:	18bff826 	beq	r3,r2,12060 <memcmp+0xc>
   12080:	1885c83a 	sub	r2,r3,r2
   12084:	f800283a 	ret
   12088:	0005883a 	mov	r2,zero
   1208c:	f800283a 	ret

00012090 <_puts_r>:
   12090:	defffd04 	addi	sp,sp,-12
   12094:	dc000015 	stw	r16,0(sp)
   12098:	2021883a 	mov	r16,r4
   1209c:	2809883a 	mov	r4,r5
   120a0:	dfc00215 	stw	ra,8(sp)
   120a4:	dc400115 	stw	r17,4(sp)
   120a8:	2823883a 	mov	r17,r5
   120ac:	00109c00 	call	109c0 <strlen>
   120b0:	80c00217 	ldw	r3,8(r16)
   120b4:	02000074 	movhi	r8,1
   120b8:	42024104 	addi	r8,r8,2308
   120bc:	880d883a 	mov	r6,r17
   120c0:	100f883a 	mov	r7,r2
   120c4:	8009883a 	mov	r4,r16
   120c8:	180b883a 	mov	r5,r3
   120cc:	1a000115 	stw	r8,4(r3)
   120d0:	403ee83a 	callr	r8
   120d4:	047fffc4 	movi	r17,-1
   120d8:	8009883a 	mov	r4,r16
   120dc:	01800074 	movhi	r6,1
   120e0:	318b1304 	addi	r6,r6,11340
   120e4:	01c00044 	movi	r7,1
   120e8:	1440071e 	bne	r2,r17,12108 <_puts_r+0x78>
   120ec:	00ffffc4 	movi	r3,-1
   120f0:	1805883a 	mov	r2,r3
   120f4:	dfc00217 	ldw	ra,8(sp)
   120f8:	dc400117 	ldw	r17,4(sp)
   120fc:	dc000017 	ldw	r16,0(sp)
   12100:	dec00304 	addi	sp,sp,12
   12104:	f800283a 	ret
   12108:	81400217 	ldw	r5,8(r16)
   1210c:	28c00117 	ldw	r3,4(r5)
   12110:	183ee83a 	callr	r3
   12114:	0007883a 	mov	r3,zero
   12118:	147ff51e 	bne	r2,r17,120f0 <_puts_r+0x60>
   1211c:	003ff306 	br	120ec <_puts_r+0x5c>

00012120 <puts>:
   12120:	00800074 	movhi	r2,1
   12124:	108c0104 	addi	r2,r2,12292
   12128:	200b883a 	mov	r5,r4
   1212c:	11000017 	ldw	r4,0(r2)
   12130:	00120901 	jmpi	12090 <_puts_r>

00012134 <register_fini>:
   12134:	f800283a 	ret

00012138 <__call_exitprocs>:
   12138:	defff304 	addi	sp,sp,-52
   1213c:	00800074 	movhi	r2,1
   12140:	108c0204 	addi	r2,r2,12296
   12144:	df000b15 	stw	fp,44(sp)
   12148:	17000017 	ldw	fp,0(r2)
   1214c:	00800034 	movhi	r2,0
   12150:	10800004 	addi	r2,r2,0
   12154:	1005003a 	cmpeq	r2,r2,zero
   12158:	d8800215 	stw	r2,8(sp)
   1215c:	e0800c04 	addi	r2,fp,48
   12160:	dd800915 	stw	r22,36(sp)
   12164:	dd400815 	stw	r21,32(sp)
   12168:	dfc00c15 	stw	ra,48(sp)
   1216c:	ddc00a15 	stw	r23,40(sp)
   12170:	dd000715 	stw	r20,28(sp)
   12174:	dcc00615 	stw	r19,24(sp)
   12178:	dc800515 	stw	r18,20(sp)
   1217c:	dc400415 	stw	r17,16(sp)
   12180:	dc000315 	stw	r16,12(sp)
   12184:	282d883a 	mov	r22,r5
   12188:	d9000115 	stw	r4,4(sp)
   1218c:	d8800015 	stw	r2,0(sp)
   12190:	282b003a 	cmpeq	r21,r5,zero
   12194:	e4400c17 	ldw	r17,48(fp)
   12198:	88001226 	beq	r17,zero,121e4 <__call_exitprocs+0xac>
   1219c:	ddc00017 	ldw	r23,0(sp)
   121a0:	88800117 	ldw	r2,4(r17)
   121a4:	8c802217 	ldw	r18,136(r17)
   121a8:	143fffc4 	addi	r16,r2,-1
   121ac:	80000b16 	blt	r16,zero,121dc <__call_exitprocs+0xa4>
   121b0:	9027003a 	cmpeq	r19,r18,zero
   121b4:	a800171e 	bne	r21,zero,12214 <__call_exitprocs+0xdc>
   121b8:	9800051e 	bne	r19,zero,121d0 <__call_exitprocs+0x98>
   121bc:	8409883a 	add	r4,r16,r16
   121c0:	2105883a 	add	r2,r4,r4
   121c4:	1485883a 	add	r2,r2,r18
   121c8:	10c02017 	ldw	r3,128(r2)
   121cc:	b0c01226 	beq	r22,r3,12218 <__call_exitprocs+0xe0>
   121d0:	843fffc4 	addi	r16,r16,-1
   121d4:	00bfffc4 	movi	r2,-1
   121d8:	80bff61e 	bne	r16,r2,121b4 <__call_exitprocs+0x7c>
   121dc:	d8800217 	ldw	r2,8(sp)
   121e0:	10003226 	beq	r2,zero,122ac <__call_exitprocs+0x174>
   121e4:	dfc00c17 	ldw	ra,48(sp)
   121e8:	df000b17 	ldw	fp,44(sp)
   121ec:	ddc00a17 	ldw	r23,40(sp)
   121f0:	dd800917 	ldw	r22,36(sp)
   121f4:	dd400817 	ldw	r21,32(sp)
   121f8:	dd000717 	ldw	r20,28(sp)
   121fc:	dcc00617 	ldw	r19,24(sp)
   12200:	dc800517 	ldw	r18,20(sp)
   12204:	dc400417 	ldw	r17,16(sp)
   12208:	dc000317 	ldw	r16,12(sp)
   1220c:	dec00d04 	addi	sp,sp,52
   12210:	f800283a 	ret
   12214:	8409883a 	add	r4,r16,r16
   12218:	88c00117 	ldw	r3,4(r17)
   1221c:	2105883a 	add	r2,r4,r4
   12220:	1445883a 	add	r2,r2,r17
   12224:	18ffffc4 	addi	r3,r3,-1
   12228:	11800217 	ldw	r6,8(r2)
   1222c:	1c001826 	beq	r3,r16,12290 <__call_exitprocs+0x158>
   12230:	10000215 	stw	zero,8(r2)
   12234:	303fe626 	beq	r6,zero,121d0 <__call_exitprocs+0x98>
   12238:	8d000117 	ldw	r20,4(r17)
   1223c:	9800121e 	bne	r19,zero,12288 <__call_exitprocs+0x150>
   12240:	00c00044 	movi	r3,1
   12244:	1c06983a 	sll	r3,r3,r16
   12248:	90804017 	ldw	r2,256(r18)
   1224c:	1884703a 	and	r2,r3,r2
   12250:	10000d26 	beq	r2,zero,12288 <__call_exitprocs+0x150>
   12254:	90804117 	ldw	r2,260(r18)
   12258:	1884703a 	and	r2,r3,r2
   1225c:	10000e1e 	bne	r2,zero,12298 <__call_exitprocs+0x160>
   12260:	2105883a 	add	r2,r4,r4
   12264:	1485883a 	add	r2,r2,r18
   12268:	11400017 	ldw	r5,0(r2)
   1226c:	d9000117 	ldw	r4,4(sp)
   12270:	303ee83a 	callr	r6
   12274:	88800117 	ldw	r2,4(r17)
   12278:	a0bfc61e 	bne	r20,r2,12194 <__call_exitprocs+0x5c>
   1227c:	b8800017 	ldw	r2,0(r23)
   12280:	147fd326 	beq	r2,r17,121d0 <__call_exitprocs+0x98>
   12284:	003fc306 	br	12194 <__call_exitprocs+0x5c>
   12288:	303ee83a 	callr	r6
   1228c:	003ff906 	br	12274 <__call_exitprocs+0x13c>
   12290:	8c000115 	stw	r16,4(r17)
   12294:	003fe706 	br	12234 <__call_exitprocs+0xfc>
   12298:	2105883a 	add	r2,r4,r4
   1229c:	1485883a 	add	r2,r2,r18
   122a0:	11000017 	ldw	r4,0(r2)
   122a4:	303ee83a 	callr	r6
   122a8:	003ff206 	br	12274 <__call_exitprocs+0x13c>
   122ac:	88800117 	ldw	r2,4(r17)
   122b0:	10000b1e 	bne	r2,zero,122e0 <__call_exitprocs+0x1a8>
   122b4:	89000017 	ldw	r4,0(r17)
   122b8:	20000a26 	beq	r4,zero,122e4 <__call_exitprocs+0x1ac>
   122bc:	b9000015 	stw	r4,0(r23)
   122c0:	90000226 	beq	r18,zero,122cc <__call_exitprocs+0x194>
   122c4:	9009883a 	mov	r4,r18
   122c8:	00000000 	call	0 <__alt_mem_ram-0x10000>
   122cc:	8809883a 	mov	r4,r17
   122d0:	00000000 	call	0 <__alt_mem_ram-0x10000>
   122d4:	bc400017 	ldw	r17,0(r23)
   122d8:	883fb11e 	bne	r17,zero,121a0 <__call_exitprocs+0x68>
   122dc:	003fc106 	br	121e4 <__call_exitprocs+0xac>
   122e0:	89000017 	ldw	r4,0(r17)
   122e4:	882f883a 	mov	r23,r17
   122e8:	2023883a 	mov	r17,r4
   122ec:	883fac1e 	bne	r17,zero,121a0 <__call_exitprocs+0x68>
   122f0:	003fbc06 	br	121e4 <__call_exitprocs+0xac>

000122f4 <__muldi3>:
   122f4:	defff204 	addi	sp,sp,-56
   122f8:	df000c15 	stw	fp,48(sp)
   122fc:	3038d43a 	srli	fp,r6,16
   12300:	dd000815 	stw	r20,32(sp)
   12304:	dc400515 	stw	r17,20(sp)
   12308:	2028d43a 	srli	r20,r4,16
   1230c:	247fffcc 	andi	r17,r4,65535
   12310:	dc000415 	stw	r16,16(sp)
   12314:	343fffcc 	andi	r16,r6,65535
   12318:	dcc00715 	stw	r19,28(sp)
   1231c:	d9000015 	stw	r4,0(sp)
   12320:	2827883a 	mov	r19,r5
   12324:	8809883a 	mov	r4,r17
   12328:	d9400115 	stw	r5,4(sp)
   1232c:	800b883a 	mov	r5,r16
   12330:	d9800215 	stw	r6,8(sp)
   12334:	dfc00d15 	stw	ra,52(sp)
   12338:	d9c00315 	stw	r7,12(sp)
   1233c:	dd800a15 	stw	r22,40(sp)
   12340:	dd400915 	stw	r21,36(sp)
   12344:	302d883a 	mov	r22,r6
   12348:	ddc00b15 	stw	r23,44(sp)
   1234c:	dc800615 	stw	r18,24(sp)
   12350:	0010ba40 	call	10ba4 <__mulsi3>
   12354:	8809883a 	mov	r4,r17
   12358:	e00b883a 	mov	r5,fp
   1235c:	102b883a 	mov	r21,r2
   12360:	0010ba40 	call	10ba4 <__mulsi3>
   12364:	800b883a 	mov	r5,r16
   12368:	a009883a 	mov	r4,r20
   1236c:	1023883a 	mov	r17,r2
   12370:	0010ba40 	call	10ba4 <__mulsi3>
   12374:	a009883a 	mov	r4,r20
   12378:	e00b883a 	mov	r5,fp
   1237c:	1021883a 	mov	r16,r2
   12380:	0010ba40 	call	10ba4 <__mulsi3>
   12384:	a8ffffcc 	andi	r3,r21,65535
   12388:	a82ad43a 	srli	r21,r21,16
   1238c:	8c23883a 	add	r17,r17,r16
   12390:	1011883a 	mov	r8,r2
   12394:	ac6b883a 	add	r21,r21,r17
   12398:	a804943a 	slli	r2,r21,16
   1239c:	b009883a 	mov	r4,r22
   123a0:	980b883a 	mov	r5,r19
   123a4:	10c7883a 	add	r3,r2,r3
   123a8:	a812d43a 	srli	r9,r21,16
   123ac:	180d883a 	mov	r6,r3
   123b0:	ac00022e 	bgeu	r21,r16,123bc <__muldi3+0xc8>
   123b4:	00800074 	movhi	r2,1
   123b8:	4091883a 	add	r8,r8,r2
   123bc:	4267883a 	add	r19,r8,r9
   123c0:	302d883a 	mov	r22,r6
   123c4:	0010ba40 	call	10ba4 <__mulsi3>
   123c8:	d9400317 	ldw	r5,12(sp)
   123cc:	d9000017 	ldw	r4,0(sp)
   123d0:	1023883a 	mov	r17,r2
   123d4:	0010ba40 	call	10ba4 <__mulsi3>
   123d8:	14cb883a 	add	r5,r2,r19
   123dc:	894b883a 	add	r5,r17,r5
   123e0:	b005883a 	mov	r2,r22
   123e4:	2807883a 	mov	r3,r5
   123e8:	dfc00d17 	ldw	ra,52(sp)
   123ec:	df000c17 	ldw	fp,48(sp)
   123f0:	ddc00b17 	ldw	r23,44(sp)
   123f4:	dd800a17 	ldw	r22,40(sp)
   123f8:	dd400917 	ldw	r21,36(sp)
   123fc:	dd000817 	ldw	r20,32(sp)
   12400:	dcc00717 	ldw	r19,28(sp)
   12404:	dc800617 	ldw	r18,24(sp)
   12408:	dc400517 	ldw	r17,20(sp)
   1240c:	dc000417 	ldw	r16,16(sp)
   12410:	dec00e04 	addi	sp,sp,56
   12414:	f800283a 	ret

00012418 <__udivdi3>:
   12418:	defff104 	addi	sp,sp,-60
   1241c:	0015883a 	mov	r10,zero
   12420:	2005883a 	mov	r2,r4
   12424:	3011883a 	mov	r8,r6
   12428:	df000d15 	stw	fp,52(sp)
   1242c:	dd400a15 	stw	r21,40(sp)
   12430:	dcc00815 	stw	r19,32(sp)
   12434:	dfc00e15 	stw	ra,56(sp)
   12438:	ddc00c15 	stw	r23,48(sp)
   1243c:	dd800b15 	stw	r22,44(sp)
   12440:	dd000915 	stw	r20,36(sp)
   12444:	dc800715 	stw	r18,28(sp)
   12448:	dc400615 	stw	r17,24(sp)
   1244c:	dc000515 	stw	r16,20(sp)
   12450:	da800315 	stw	r10,12(sp)
   12454:	4027883a 	mov	r19,r8
   12458:	1039883a 	mov	fp,r2
   1245c:	282b883a 	mov	r21,r5
   12460:	da800415 	stw	r10,16(sp)
   12464:	3800401e 	bne	r7,zero,12568 <__udivdi3+0x150>
   12468:	2a006536 	bltu	r5,r8,12600 <__udivdi3+0x1e8>
   1246c:	4000b526 	beq	r8,zero,12744 <__udivdi3+0x32c>
   12470:	00bfffd4 	movui	r2,65535
   12474:	14c0ad36 	bltu	r2,r19,1272c <__udivdi3+0x314>
   12478:	00803fc4 	movi	r2,255
   1247c:	14c15e36 	bltu	r2,r19,129f8 <__udivdi3+0x5e0>
   12480:	000b883a 	mov	r5,zero
   12484:	0005883a 	mov	r2,zero
   12488:	9884d83a 	srl	r2,r19,r2
   1248c:	01000074 	movhi	r4,1
   12490:	210b1404 	addi	r4,r4,11344
   12494:	01800804 	movi	r6,32
   12498:	1105883a 	add	r2,r2,r4
   1249c:	10c00003 	ldbu	r3,0(r2)
   124a0:	28c7883a 	add	r3,r5,r3
   124a4:	30e9c83a 	sub	r20,r6,r3
   124a8:	a0010a1e 	bne	r20,zero,128d4 <__udivdi3+0x4bc>
   124ac:	982ed43a 	srli	r23,r19,16
   124b0:	acebc83a 	sub	r21,r21,r19
   124b4:	9dbfffcc 	andi	r22,r19,65535
   124b8:	05000044 	movi	r20,1
   124bc:	a809883a 	mov	r4,r21
   124c0:	b80b883a 	mov	r5,r23
   124c4:	0010b940 	call	10b94 <__udivsi3>
   124c8:	100b883a 	mov	r5,r2
   124cc:	b009883a 	mov	r4,r22
   124d0:	1021883a 	mov	r16,r2
   124d4:	0010ba40 	call	10ba4 <__mulsi3>
   124d8:	a809883a 	mov	r4,r21
   124dc:	b80b883a 	mov	r5,r23
   124e0:	1023883a 	mov	r17,r2
   124e4:	0010b9c0 	call	10b9c <__umodsi3>
   124e8:	1004943a 	slli	r2,r2,16
   124ec:	e006d43a 	srli	r3,fp,16
   124f0:	10c4b03a 	or	r2,r2,r3
   124f4:	1440042e 	bgeu	r2,r17,12508 <__udivdi3+0xf0>
   124f8:	14c5883a 	add	r2,r2,r19
   124fc:	843fffc4 	addi	r16,r16,-1
   12500:	14c00136 	bltu	r2,r19,12508 <__udivdi3+0xf0>
   12504:	14415c36 	bltu	r2,r17,12a78 <__udivdi3+0x660>
   12508:	1463c83a 	sub	r17,r2,r17
   1250c:	8809883a 	mov	r4,r17
   12510:	b80b883a 	mov	r5,r23
   12514:	0010b940 	call	10b94 <__udivsi3>
   12518:	100b883a 	mov	r5,r2
   1251c:	b009883a 	mov	r4,r22
   12520:	102b883a 	mov	r21,r2
   12524:	0010ba40 	call	10ba4 <__mulsi3>
   12528:	8809883a 	mov	r4,r17
   1252c:	b80b883a 	mov	r5,r23
   12530:	1025883a 	mov	r18,r2
   12534:	0010b9c0 	call	10b9c <__umodsi3>
   12538:	1004943a 	slli	r2,r2,16
   1253c:	e0ffffcc 	andi	r3,fp,65535
   12540:	10c4b03a 	or	r2,r2,r3
   12544:	1480042e 	bgeu	r2,r18,12558 <__udivdi3+0x140>
   12548:	9885883a 	add	r2,r19,r2
   1254c:	ad7fffc4 	addi	r21,r21,-1
   12550:	14c00136 	bltu	r2,r19,12558 <__udivdi3+0x140>
   12554:	14813c36 	bltu	r2,r18,12a48 <__udivdi3+0x630>
   12558:	8004943a 	slli	r2,r16,16
   1255c:	a009883a 	mov	r4,r20
   12560:	a884b03a 	or	r2,r21,r2
   12564:	00001506 	br	125bc <__udivdi3+0x1a4>
   12568:	380d883a 	mov	r6,r7
   1256c:	29c06c36 	bltu	r5,r7,12720 <__udivdi3+0x308>
   12570:	00bfffd4 	movui	r2,65535
   12574:	11c06436 	bltu	r2,r7,12708 <__udivdi3+0x2f0>
   12578:	00803fc4 	movi	r2,255
   1257c:	11c11836 	bltu	r2,r7,129e0 <__udivdi3+0x5c8>
   12580:	000b883a 	mov	r5,zero
   12584:	0005883a 	mov	r2,zero
   12588:	3084d83a 	srl	r2,r6,r2
   1258c:	01000074 	movhi	r4,1
   12590:	210b1404 	addi	r4,r4,11344
   12594:	01c00804 	movi	r7,32
   12598:	1105883a 	add	r2,r2,r4
   1259c:	10c00003 	ldbu	r3,0(r2)
   125a0:	28c7883a 	add	r3,r5,r3
   125a4:	38edc83a 	sub	r22,r7,r3
   125a8:	b000731e 	bne	r22,zero,12778 <__udivdi3+0x360>
   125ac:	35400136 	bltu	r6,r21,125b4 <__udivdi3+0x19c>
   125b0:	e4c05b36 	bltu	fp,r19,12720 <__udivdi3+0x308>
   125b4:	00800044 	movi	r2,1
   125b8:	0009883a 	mov	r4,zero
   125bc:	d8800315 	stw	r2,12(sp)
   125c0:	d9400317 	ldw	r5,12(sp)
   125c4:	2007883a 	mov	r3,r4
   125c8:	d9000415 	stw	r4,16(sp)
   125cc:	2805883a 	mov	r2,r5
   125d0:	dfc00e17 	ldw	ra,56(sp)
   125d4:	df000d17 	ldw	fp,52(sp)
   125d8:	ddc00c17 	ldw	r23,48(sp)
   125dc:	dd800b17 	ldw	r22,44(sp)
   125e0:	dd400a17 	ldw	r21,40(sp)
   125e4:	dd000917 	ldw	r20,36(sp)
   125e8:	dcc00817 	ldw	r19,32(sp)
   125ec:	dc800717 	ldw	r18,28(sp)
   125f0:	dc400617 	ldw	r17,24(sp)
   125f4:	dc000517 	ldw	r16,20(sp)
   125f8:	dec00f04 	addi	sp,sp,60
   125fc:	f800283a 	ret
   12600:	00bfffd4 	movui	r2,65535
   12604:	12005636 	bltu	r2,r8,12760 <__udivdi3+0x348>
   12608:	00803fc4 	movi	r2,255
   1260c:	12010036 	bltu	r2,r8,12a10 <__udivdi3+0x5f8>
   12610:	000b883a 	mov	r5,zero
   12614:	0005883a 	mov	r2,zero
   12618:	9884d83a 	srl	r2,r19,r2
   1261c:	01000074 	movhi	r4,1
   12620:	210b1404 	addi	r4,r4,11344
   12624:	01800804 	movi	r6,32
   12628:	1105883a 	add	r2,r2,r4
   1262c:	10c00003 	ldbu	r3,0(r2)
   12630:	28c7883a 	add	r3,r5,r3
   12634:	30cbc83a 	sub	r5,r6,r3
   12638:	28000626 	beq	r5,zero,12654 <__udivdi3+0x23c>
   1263c:	3145c83a 	sub	r2,r6,r5
   12640:	e084d83a 	srl	r2,fp,r2
   12644:	a946983a 	sll	r3,r21,r5
   12648:	e178983a 	sll	fp,fp,r5
   1264c:	9966983a 	sll	r19,r19,r5
   12650:	18aab03a 	or	r21,r3,r2
   12654:	982ed43a 	srli	r23,r19,16
   12658:	a809883a 	mov	r4,r21
   1265c:	9cbfffcc 	andi	r18,r19,65535
   12660:	b80b883a 	mov	r5,r23
   12664:	0010b940 	call	10b94 <__udivsi3>
   12668:	100b883a 	mov	r5,r2
   1266c:	9009883a 	mov	r4,r18
   12670:	1021883a 	mov	r16,r2
   12674:	0010ba40 	call	10ba4 <__mulsi3>
   12678:	a809883a 	mov	r4,r21
   1267c:	b80b883a 	mov	r5,r23
   12680:	1023883a 	mov	r17,r2
   12684:	0010b9c0 	call	10b9c <__umodsi3>
   12688:	1004943a 	slli	r2,r2,16
   1268c:	e006d43a 	srli	r3,fp,16
   12690:	10c4b03a 	or	r2,r2,r3
   12694:	1440042e 	bgeu	r2,r17,126a8 <__udivdi3+0x290>
   12698:	14c5883a 	add	r2,r2,r19
   1269c:	843fffc4 	addi	r16,r16,-1
   126a0:	14c00136 	bltu	r2,r19,126a8 <__udivdi3+0x290>
   126a4:	1440ea36 	bltu	r2,r17,12a50 <__udivdi3+0x638>
   126a8:	1463c83a 	sub	r17,r2,r17
   126ac:	8809883a 	mov	r4,r17
   126b0:	b80b883a 	mov	r5,r23
   126b4:	0010b940 	call	10b94 <__udivsi3>
   126b8:	100b883a 	mov	r5,r2
   126bc:	9009883a 	mov	r4,r18
   126c0:	102b883a 	mov	r21,r2
   126c4:	0010ba40 	call	10ba4 <__mulsi3>
   126c8:	8809883a 	mov	r4,r17
   126cc:	b80b883a 	mov	r5,r23
   126d0:	1025883a 	mov	r18,r2
   126d4:	0010b9c0 	call	10b9c <__umodsi3>
   126d8:	1004943a 	slli	r2,r2,16
   126dc:	e0ffffcc 	andi	r3,fp,65535
   126e0:	10c4b03a 	or	r2,r2,r3
   126e4:	1480042e 	bgeu	r2,r18,126f8 <__udivdi3+0x2e0>
   126e8:	9885883a 	add	r2,r19,r2
   126ec:	ad7fffc4 	addi	r21,r21,-1
   126f0:	14c00136 	bltu	r2,r19,126f8 <__udivdi3+0x2e0>
   126f4:	1480d936 	bltu	r2,r18,12a5c <__udivdi3+0x644>
   126f8:	8004943a 	slli	r2,r16,16
   126fc:	0009883a 	mov	r4,zero
   12700:	a884b03a 	or	r2,r21,r2
   12704:	003fad06 	br	125bc <__udivdi3+0x1a4>
   12708:	00804034 	movhi	r2,256
   1270c:	10bfffc4 	addi	r2,r2,-1
   12710:	11c0b636 	bltu	r2,r7,129ec <__udivdi3+0x5d4>
   12714:	01400404 	movi	r5,16
   12718:	2805883a 	mov	r2,r5
   1271c:	003f9a06 	br	12588 <__udivdi3+0x170>
   12720:	0005883a 	mov	r2,zero
   12724:	0009883a 	mov	r4,zero
   12728:	003fa406 	br	125bc <__udivdi3+0x1a4>
   1272c:	00804034 	movhi	r2,256
   12730:	10bfffc4 	addi	r2,r2,-1
   12734:	14c0b336 	bltu	r2,r19,12a04 <__udivdi3+0x5ec>
   12738:	01400404 	movi	r5,16
   1273c:	2805883a 	mov	r2,r5
   12740:	003f5106 	br	12488 <__udivdi3+0x70>
   12744:	01000044 	movi	r4,1
   12748:	000b883a 	mov	r5,zero
   1274c:	0010b940 	call	10b94 <__udivsi3>
   12750:	1027883a 	mov	r19,r2
   12754:	00bfffd4 	movui	r2,65535
   12758:	14fff436 	bltu	r2,r19,1272c <__udivdi3+0x314>
   1275c:	003f4606 	br	12478 <__udivdi3+0x60>
   12760:	00804034 	movhi	r2,256
   12764:	10bfffc4 	addi	r2,r2,-1
   12768:	1200ac36 	bltu	r2,r8,12a1c <__udivdi3+0x604>
   1276c:	01400404 	movi	r5,16
   12770:	2805883a 	mov	r2,r5
   12774:	003fa806 	br	12618 <__udivdi3+0x200>
   12778:	3d85c83a 	sub	r2,r7,r22
   1277c:	3588983a 	sll	r4,r6,r22
   12780:	9886d83a 	srl	r3,r19,r2
   12784:	a8a2d83a 	srl	r17,r21,r2
   12788:	e084d83a 	srl	r2,fp,r2
   1278c:	20eeb03a 	or	r23,r4,r3
   12790:	b824d43a 	srli	r18,r23,16
   12794:	ad86983a 	sll	r3,r21,r22
   12798:	8809883a 	mov	r4,r17
   1279c:	900b883a 	mov	r5,r18
   127a0:	1886b03a 	or	r3,r3,r2
   127a4:	d8c00115 	stw	r3,4(sp)
   127a8:	bc3fffcc 	andi	r16,r23,65535
   127ac:	0010b940 	call	10b94 <__udivsi3>
   127b0:	100b883a 	mov	r5,r2
   127b4:	8009883a 	mov	r4,r16
   127b8:	1029883a 	mov	r20,r2
   127bc:	0010ba40 	call	10ba4 <__mulsi3>
   127c0:	900b883a 	mov	r5,r18
   127c4:	8809883a 	mov	r4,r17
   127c8:	102b883a 	mov	r21,r2
   127cc:	0010b9c0 	call	10b9c <__umodsi3>
   127d0:	d9400117 	ldw	r5,4(sp)
   127d4:	1004943a 	slli	r2,r2,16
   127d8:	9da6983a 	sll	r19,r19,r22
   127dc:	2806d43a 	srli	r3,r5,16
   127e0:	10c4b03a 	or	r2,r2,r3
   127e4:	1540032e 	bgeu	r2,r21,127f4 <__udivdi3+0x3dc>
   127e8:	15c5883a 	add	r2,r2,r23
   127ec:	a53fffc4 	addi	r20,r20,-1
   127f0:	15c0912e 	bgeu	r2,r23,12a38 <__udivdi3+0x620>
   127f4:	1563c83a 	sub	r17,r2,r21
   127f8:	8809883a 	mov	r4,r17
   127fc:	900b883a 	mov	r5,r18
   12800:	0010b940 	call	10b94 <__udivsi3>
   12804:	100b883a 	mov	r5,r2
   12808:	8009883a 	mov	r4,r16
   1280c:	102b883a 	mov	r21,r2
   12810:	0010ba40 	call	10ba4 <__mulsi3>
   12814:	8809883a 	mov	r4,r17
   12818:	900b883a 	mov	r5,r18
   1281c:	1021883a 	mov	r16,r2
   12820:	0010b9c0 	call	10b9c <__umodsi3>
   12824:	da800117 	ldw	r10,4(sp)
   12828:	1004943a 	slli	r2,r2,16
   1282c:	50ffffcc 	andi	r3,r10,65535
   12830:	10c6b03a 	or	r3,r2,r3
   12834:	1c00032e 	bgeu	r3,r16,12844 <__udivdi3+0x42c>
   12838:	1dc7883a 	add	r3,r3,r23
   1283c:	ad7fffc4 	addi	r21,r21,-1
   12840:	1dc0792e 	bgeu	r3,r23,12a28 <__udivdi3+0x610>
   12844:	a004943a 	slli	r2,r20,16
   12848:	982ed43a 	srli	r23,r19,16
   1284c:	9cffffcc 	andi	r19,r19,65535
   12850:	a8a4b03a 	or	r18,r21,r2
   12854:	947fffcc 	andi	r17,r18,65535
   12858:	902ad43a 	srli	r21,r18,16
   1285c:	8809883a 	mov	r4,r17
   12860:	980b883a 	mov	r5,r19
   12864:	1c21c83a 	sub	r16,r3,r16
   12868:	0010ba40 	call	10ba4 <__mulsi3>
   1286c:	8809883a 	mov	r4,r17
   12870:	b80b883a 	mov	r5,r23
   12874:	1029883a 	mov	r20,r2
   12878:	0010ba40 	call	10ba4 <__mulsi3>
   1287c:	980b883a 	mov	r5,r19
   12880:	a809883a 	mov	r4,r21
   12884:	1023883a 	mov	r17,r2
   12888:	0010ba40 	call	10ba4 <__mulsi3>
   1288c:	a809883a 	mov	r4,r21
   12890:	b80b883a 	mov	r5,r23
   12894:	1027883a 	mov	r19,r2
   12898:	0010ba40 	call	10ba4 <__mulsi3>
   1289c:	1009883a 	mov	r4,r2
   128a0:	a004d43a 	srli	r2,r20,16
   128a4:	8ce3883a 	add	r17,r17,r19
   128a8:	1447883a 	add	r3,r2,r17
   128ac:	1cc0022e 	bgeu	r3,r19,128b8 <__udivdi3+0x4a0>
   128b0:	00800074 	movhi	r2,1
   128b4:	2089883a 	add	r4,r4,r2
   128b8:	1804d43a 	srli	r2,r3,16
   128bc:	2085883a 	add	r2,r4,r2
   128c0:	80804436 	bltu	r16,r2,129d4 <__udivdi3+0x5bc>
   128c4:	80803e26 	beq	r16,r2,129c0 <__udivdi3+0x5a8>
   128c8:	9005883a 	mov	r2,r18
   128cc:	0009883a 	mov	r4,zero
   128d0:	003f3a06 	br	125bc <__udivdi3+0x1a4>
   128d4:	9d26983a 	sll	r19,r19,r20
   128d8:	3505c83a 	sub	r2,r6,r20
   128dc:	a8a2d83a 	srl	r17,r21,r2
   128e0:	982ed43a 	srli	r23,r19,16
   128e4:	e084d83a 	srl	r2,fp,r2
   128e8:	ad06983a 	sll	r3,r21,r20
   128ec:	8809883a 	mov	r4,r17
   128f0:	b80b883a 	mov	r5,r23
   128f4:	1886b03a 	or	r3,r3,r2
   128f8:	d8c00015 	stw	r3,0(sp)
   128fc:	9dbfffcc 	andi	r22,r19,65535
   12900:	0010b940 	call	10b94 <__udivsi3>
   12904:	100b883a 	mov	r5,r2
   12908:	b009883a 	mov	r4,r22
   1290c:	d8800215 	stw	r2,8(sp)
   12910:	0010ba40 	call	10ba4 <__mulsi3>
   12914:	8809883a 	mov	r4,r17
   12918:	b80b883a 	mov	r5,r23
   1291c:	102b883a 	mov	r21,r2
   12920:	0010b9c0 	call	10b9c <__umodsi3>
   12924:	d9000017 	ldw	r4,0(sp)
   12928:	1004943a 	slli	r2,r2,16
   1292c:	2006d43a 	srli	r3,r4,16
   12930:	10c4b03a 	or	r2,r2,r3
   12934:	1540052e 	bgeu	r2,r21,1294c <__udivdi3+0x534>
   12938:	d9400217 	ldw	r5,8(sp)
   1293c:	14c5883a 	add	r2,r2,r19
   12940:	297fffc4 	addi	r5,r5,-1
   12944:	d9400215 	stw	r5,8(sp)
   12948:	14c0462e 	bgeu	r2,r19,12a64 <__udivdi3+0x64c>
   1294c:	1563c83a 	sub	r17,r2,r21
   12950:	8809883a 	mov	r4,r17
   12954:	b80b883a 	mov	r5,r23
   12958:	0010b940 	call	10b94 <__udivsi3>
   1295c:	100b883a 	mov	r5,r2
   12960:	b009883a 	mov	r4,r22
   12964:	1025883a 	mov	r18,r2
   12968:	0010ba40 	call	10ba4 <__mulsi3>
   1296c:	8809883a 	mov	r4,r17
   12970:	b80b883a 	mov	r5,r23
   12974:	1021883a 	mov	r16,r2
   12978:	0010b9c0 	call	10b9c <__umodsi3>
   1297c:	da800017 	ldw	r10,0(sp)
   12980:	1004943a 	slli	r2,r2,16
   12984:	50ffffcc 	andi	r3,r10,65535
   12988:	10c6b03a 	or	r3,r2,r3
   1298c:	1c00062e 	bgeu	r3,r16,129a8 <__udivdi3+0x590>
   12990:	1cc7883a 	add	r3,r3,r19
   12994:	94bfffc4 	addi	r18,r18,-1
   12998:	1cc00336 	bltu	r3,r19,129a8 <__udivdi3+0x590>
   1299c:	1c00022e 	bgeu	r3,r16,129a8 <__udivdi3+0x590>
   129a0:	94bfffc4 	addi	r18,r18,-1
   129a4:	1cc7883a 	add	r3,r3,r19
   129a8:	d9000217 	ldw	r4,8(sp)
   129ac:	e538983a 	sll	fp,fp,r20
   129b0:	1c2bc83a 	sub	r21,r3,r16
   129b4:	2004943a 	slli	r2,r4,16
   129b8:	90a8b03a 	or	r20,r18,r2
   129bc:	003ebf06 	br	124bc <__udivdi3+0xa4>
   129c0:	1804943a 	slli	r2,r3,16
   129c4:	e588983a 	sll	r4,fp,r22
   129c8:	a0ffffcc 	andi	r3,r20,65535
   129cc:	10c5883a 	add	r2,r2,r3
   129d0:	20bfbd2e 	bgeu	r4,r2,128c8 <__udivdi3+0x4b0>
   129d4:	90bfffc4 	addi	r2,r18,-1
   129d8:	0009883a 	mov	r4,zero
   129dc:	003ef706 	br	125bc <__udivdi3+0x1a4>
   129e0:	01400204 	movi	r5,8
   129e4:	2805883a 	mov	r2,r5
   129e8:	003ee706 	br	12588 <__udivdi3+0x170>
   129ec:	01400604 	movi	r5,24
   129f0:	2805883a 	mov	r2,r5
   129f4:	003ee406 	br	12588 <__udivdi3+0x170>
   129f8:	01400204 	movi	r5,8
   129fc:	2805883a 	mov	r2,r5
   12a00:	003ea106 	br	12488 <__udivdi3+0x70>
   12a04:	01400604 	movi	r5,24
   12a08:	2805883a 	mov	r2,r5
   12a0c:	003e9e06 	br	12488 <__udivdi3+0x70>
   12a10:	01400204 	movi	r5,8
   12a14:	2805883a 	mov	r2,r5
   12a18:	003eff06 	br	12618 <__udivdi3+0x200>
   12a1c:	01400604 	movi	r5,24
   12a20:	2805883a 	mov	r2,r5
   12a24:	003efc06 	br	12618 <__udivdi3+0x200>
   12a28:	1c3f862e 	bgeu	r3,r16,12844 <__udivdi3+0x42c>
   12a2c:	1dc7883a 	add	r3,r3,r23
   12a30:	ad7fffc4 	addi	r21,r21,-1
   12a34:	003f8306 	br	12844 <__udivdi3+0x42c>
   12a38:	157f6e2e 	bgeu	r2,r21,127f4 <__udivdi3+0x3dc>
   12a3c:	a53fffc4 	addi	r20,r20,-1
   12a40:	15c5883a 	add	r2,r2,r23
   12a44:	003f6b06 	br	127f4 <__udivdi3+0x3dc>
   12a48:	ad7fffc4 	addi	r21,r21,-1
   12a4c:	003ec206 	br	12558 <__udivdi3+0x140>
   12a50:	843fffc4 	addi	r16,r16,-1
   12a54:	14c5883a 	add	r2,r2,r19
   12a58:	003f1306 	br	126a8 <__udivdi3+0x290>
   12a5c:	ad7fffc4 	addi	r21,r21,-1
   12a60:	003f2506 	br	126f8 <__udivdi3+0x2e0>
   12a64:	157fb92e 	bgeu	r2,r21,1294c <__udivdi3+0x534>
   12a68:	297fffc4 	addi	r5,r5,-1
   12a6c:	14c5883a 	add	r2,r2,r19
   12a70:	d9400215 	stw	r5,8(sp)
   12a74:	003fb506 	br	1294c <__udivdi3+0x534>
   12a78:	843fffc4 	addi	r16,r16,-1
   12a7c:	14c5883a 	add	r2,r2,r19
   12a80:	003ea106 	br	12508 <__udivdi3+0xf0>

00012a84 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   12a84:	defffd04 	addi	sp,sp,-12
   12a88:	df000215 	stw	fp,8(sp)
   12a8c:	df000204 	addi	fp,sp,8
   12a90:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   12a94:	e0bfff17 	ldw	r2,-4(fp)
   12a98:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12a9c:	e0bffe17 	ldw	r2,-8(fp)
   12aa0:	1005003a 	cmpeq	r2,r2,zero
   12aa4:	1000021e 	bne	r2,zero,12ab0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   12aa8:	002af070 	cmpltui	zero,zero,43969
   12aac:	00000106 	br	12ab4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   12ab0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   12ab4:	e037883a 	mov	sp,fp
   12ab8:	df000017 	ldw	fp,0(sp)
   12abc:	dec00104 	addi	sp,sp,4
   12ac0:	f800283a 	ret

00012ac4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12ac4:	defffd04 	addi	sp,sp,-12
   12ac8:	dfc00215 	stw	ra,8(sp)
   12acc:	df000115 	stw	fp,4(sp)
   12ad0:	df000104 	addi	fp,sp,4
   12ad4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   12ad8:	e13fff17 	ldw	r4,-4(fp)
   12adc:	0012a840 	call	12a84 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12ae0:	003fff06 	br	12ae0 <_exit+0x1c>
   12ae4:	00012134 	movhi	zero,1156
